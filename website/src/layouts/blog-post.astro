---
import type { CollectionEntry } from "astro:content";
import BaseLayout from "./base-layout.astro";
import { resolveBlogImagePath } from "../pages/blog/resolve-image";
import { resolveAuthorAvatar } from "../utils/resolve-author-avatar";
import { format } from "date-fns/format";
import { Image } from "astro:assets";
import BlogAuthor from "../components/BlogAuthor.astro";

type Props = CollectionEntry<"blog">["data"];
const { title, image: relativeImage, publishDate, author, authorAvatar, authors } = Astro.props;
const image = relativeImage && (await resolveBlogImagePath(Astro.params.slug ?? "", relativeImage));
// Fixed height value for all images
const fixedHeight = 360;

// Handle both single author and multiple authors
const authorList =
  authors ?? (author ? [{ name: author.name, title: author.title, avatar: authorAvatar }] : []);

// Resolve avatars for all authors
const authorsWithAvatars = await Promise.all(
  authorList.map(async (author) => ({
    ...author,
    avatar: author.avatar ? await resolveAuthorAvatar(author.avatar) : undefined,
  })),
);
---

<style>
  .content {
    min-height: 100%;
    box-sizing: border-box;
    font-size: var(--fontSizeBase400);
  }
  @media only screen and (min-width: 1024px) {
    .content {
      padding: 3rem;
    }
  }
  .hero-image {
    width: 100%;
  }
  .hero-image img {
    display: block;
    margin: 0 auto;
    box-shadow: var(--shadow2);
    /* Force a fixed height for all hero images, letting width auto-adjust */
    height: 360px;
    width: auto;
  }
  .prose {
    width: 720px;
    max-width: calc(100% - 2em);
    margin: auto;
  }
  .title {
    margin-bottom: 1em;
    padding: 1em 0;
    text-align: center;
    line-height: 1;
  }
  .title h1 {
    margin: 0 0 0.5em 0;
  }
  .date {
    display: block;
    padding: 1rem;
    font-size: var(--fontSizeBase400);
    color: var(--colorNeutralForeground1);
  }
  .last-updated-on {
    font-style: italic;
  }
  hr {
    display: block;
    margin-top: 2rem;
    border-top: 0;
    border-color: var(--colorNeutralStroke3);
  }
</style>
<BaseLayout>
  <article class="content">
    <div class="hero-image">
      {image && <Image src={image} alt="" height={fixedHeight} />}
    </div>
    <div class="prose">
      <div class="title">
        <time class="date" datetime={publishDate.toISOString()}>
          {format(publishDate, "MMMM d, yyyy")}
        </time>
        <h1>{title}</h1>
        <hr />
      </div>
      <slot />

      {
        authorList.length > 0 && (
          <div
            class="author-section"
            style="margin: 2rem 0; padding: 1rem 0; border-top: 1px solid var(--colorNeutralStroke3);"
          >
            {authorsWithAvatars.map((author) => (
              <div style="margin-bottom: 1rem;">
                <BlogAuthor name={author.name} title={author.title} avatar={author.avatar} />
              </div>
            ))}
          </div>
        )
      }
    </div>
  </article>
</BaseLayout>
