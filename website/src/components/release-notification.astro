---
import { getCollection } from "astro:content";
const releaseNotes = await getCollection("docs", (x) => x.id.startsWith("docs/release-notes"));
const last = releaseNotes[releaseNotes.length - 1];
const releaseDate = last.data.releaseDate;
if (!releaseDate) {
  const today = new Date();
  throw new Error(
    [
      "Last release notes should have a releaseDate: property in frontmatter. For example:",
      `  releaseDate: ${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate()}`,
      "",
    ].join("\n"),
  );
}

if (!last.data.version) {
  const today = new Date();
  throw new Error(
    [
      "Last release notes should have a version: property in frontmatter. For example:",
      `  version: "X.Y"`,
      "",
    ].join("\n"),
  );
}
import Link from "@typespec/astro-utils/components/link.astro";
---

<script is:inline define:vars={{ releaseDate }}>
  document.addEventListener("DOMContentLoaded", () => {
    const bannerEls = document.querySelectorAll(".new-version-banner");
    const today = new Date();
    if (today.getTime() - new Date(releaseDate).getTime() > 7 * 86400000 /* 7 days */) {
      bannerEls.forEach((x) => x.classList.add("hide"));
    }
  });
</script>

<style>
  .new-version-banner {
    background-color: var(--colorBrandBackground);
    display: block;
    padding: 2px 1rem;
    color: white;
    border-radius: 2px;
    line-height: 24px;
  }
  .new-version-banner:hover {
    background-color: var(--colorBrandBackgroundHover);
  }
  .hide {
    display: none;
  }
</style>

<Link class="new-version-banner" href={last.slug}>
  Version {last.data.version} is now available!
</Link>
