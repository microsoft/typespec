// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace SampleTypeSpec
{
    /// <summary> This is a sample typespec project. </summary>
    public partial class SampleTypeSpecClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly ApiKeyCredential _keyCredential;
        private const string AuthorizationHeader = "my-api-key";
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of SampleTypeSpecClient for mocking. </summary>
        protected SampleTypeSpecClient()
        {
        }

        /// <summary> Initializes a new instance of SampleTypeSpecClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="keyCredential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="keyCredential"/> is null. </exception>
        public SampleTypeSpecClient(Uri endpoint, ApiKeyCredential keyCredential) : this(endpoint, keyCredential, new SampleTypeSpecClientOptions())
        {
        }

        /// <summary> Initializes a new instance of SampleTypeSpecClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="keyCredential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="keyCredential"/> is null. </exception>
        public SampleTypeSpecClient(Uri endpoint, ApiKeyCredential keyCredential, SampleTypeSpecClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(keyCredential, nameof(keyCredential));

            options ??= new SampleTypeSpecClientOptions();

            _endpoint = endpoint;
            _keyCredential = keyCredential;
            Pipeline = ClientPipeline.Create(options, Array.Empty<PipelinePolicy>(), new PipelinePolicy[] { ApiKeyAuthenticationPolicy.CreateHeaderApiKeyPolicy(_keyCredential, AuthorizationHeader) }, Array.Empty<PipelinePolicy>());
            _apiVersion = options.Version;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] Return hi
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="headParameter"></param>
        /// <param name="queryParameter"></param>
        /// <param name="optionalQuery"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="headParameter"/> or <paramref name="queryParameter"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult SayHi(string headParameter, string queryParameter, string optionalQuery, RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method SayHi.");
                Argument.AssertNotNull(headParameter, nameof(headParameter));
                Argument.AssertNotNull(queryParameter, nameof(queryParameter));

                using PipelineMessage message = CreateSayHiRequest(headParameter, queryParameter, optionalQuery, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method SayHi: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method SayHi.");
            }
        }

        /// <summary>
        /// [Protocol Method] Return hi
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="headParameter"></param>
        /// <param name="queryParameter"></param>
        /// <param name="optionalQuery"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="headParameter"/> or <paramref name="queryParameter"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> SayHiAsync(string headParameter, string queryParameter, string optionalQuery, RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method SayHiAsync.");
                Argument.AssertNotNull(headParameter, nameof(headParameter));
                Argument.AssertNotNull(queryParameter, nameof(queryParameter));

                using PipelineMessage message = CreateSayHiRequest(headParameter, queryParameter, optionalQuery, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method SayHiAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method SayHiAsync.");
            }
        }

        /// <summary> Return hi. </summary>
        /// <param name="headParameter"></param>
        /// <param name="queryParameter"></param>
        /// <param name="optionalQuery"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="headParameter"/> or <paramref name="queryParameter"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Thing> SayHi(string headParameter, string queryParameter, string optionalQuery = default, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method SayHi.");
                Argument.AssertNotNull(headParameter, nameof(headParameter));
                Argument.AssertNotNull(queryParameter, nameof(queryParameter));

                ClientResult result = SayHi(headParameter, queryParameter, optionalQuery, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
                return ClientResult.FromValue((Thing)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method SayHi: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method SayHi.");
            }
        }

        /// <summary> Return hi. </summary>
        /// <param name="headParameter"></param>
        /// <param name="queryParameter"></param>
        /// <param name="optionalQuery"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="headParameter"/> or <paramref name="queryParameter"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Thing>> SayHiAsync(string headParameter, string queryParameter, string optionalQuery = default, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method SayHiAsync.");
                Argument.AssertNotNull(headParameter, nameof(headParameter));
                Argument.AssertNotNull(queryParameter, nameof(queryParameter));

                ClientResult result = await SayHiAsync(headParameter, queryParameter, optionalQuery, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
                return ClientResult.FromValue((Thing)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method SayHiAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method SayHiAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] Return hi again
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="p2"></param>
        /// <param name="p1"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p2"/>, <paramref name="p1"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult HelloAgain(string p2, string p1, BinaryContent content, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method HelloAgain.");
                Argument.AssertNotNull(p2, nameof(p2));
                Argument.AssertNotNull(p1, nameof(p1));
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreateHelloAgainRequest(p2, p1, content, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method HelloAgain: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method HelloAgain.");
            }
        }

        /// <summary>
        /// [Protocol Method] Return hi again
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="p2"></param>
        /// <param name="p1"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p2"/>, <paramref name="p1"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> HelloAgainAsync(string p2, string p1, BinaryContent content, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method HelloAgainAsync.");
                Argument.AssertNotNull(p2, nameof(p2));
                Argument.AssertNotNull(p1, nameof(p1));
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreateHelloAgainRequest(p2, p1, content, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method HelloAgainAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method HelloAgainAsync.");
            }
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p2"></param>
        /// <param name="p1"></param>
        /// <param name="action"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p2"/>, <paramref name="p1"/> or <paramref name="action"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<RoundTripModel> HelloAgain(string p2, string p1, RoundTripModel action, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method HelloAgain.");
                Argument.AssertNotNull(p2, nameof(p2));
                Argument.AssertNotNull(p1, nameof(p1));
                Argument.AssertNotNull(action, nameof(action));

                ClientResult result = HelloAgain(p2, p1, action, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
                return ClientResult.FromValue((RoundTripModel)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method HelloAgain: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method HelloAgain.");
            }
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p2"></param>
        /// <param name="p1"></param>
        /// <param name="action"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p2"/>, <paramref name="p1"/> or <paramref name="action"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<RoundTripModel>> HelloAgainAsync(string p2, string p1, RoundTripModel action, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method HelloAgainAsync.");
                Argument.AssertNotNull(p2, nameof(p2));
                Argument.AssertNotNull(p1, nameof(p1));
                Argument.AssertNotNull(action, nameof(action));

                ClientResult result = await HelloAgainAsync(p2, p1, action, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
                return ClientResult.FromValue((RoundTripModel)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method HelloAgainAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method HelloAgainAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] Return hi again
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="p2"></param>
        /// <param name="p1"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p2"/>, <paramref name="p1"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult NoContentType(string p2, string p1, BinaryContent content, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method NoContentType.");
                Argument.AssertNotNull(p2, nameof(p2));
                Argument.AssertNotNull(p1, nameof(p1));
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreateNoContentTypeRequest(p2, p1, content, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method NoContentType: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method NoContentType.");
            }
        }

        /// <summary>
        /// [Protocol Method] Return hi again
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="p2"></param>
        /// <param name="p1"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p2"/>, <paramref name="p1"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> NoContentTypeAsync(string p2, string p1, BinaryContent content, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method NoContentTypeAsync.");
                Argument.AssertNotNull(p2, nameof(p2));
                Argument.AssertNotNull(p1, nameof(p1));
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreateNoContentTypeRequest(p2, p1, content, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method NoContentTypeAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method NoContentTypeAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] Return hi in demo2
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult HelloDemo2(RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method HelloDemo2.");
                using PipelineMessage message = CreateHelloDemo2Request(options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method HelloDemo2: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method HelloDemo2.");
            }
        }

        /// <summary>
        /// [Protocol Method] Return hi in demo2
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> HelloDemo2Async(RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method HelloDemo2Async.");
                using PipelineMessage message = CreateHelloDemo2Request(options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method HelloDemo2Async: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method HelloDemo2Async.");
            }
        }

        /// <summary> Return hi in demo2. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Thing> HelloDemo2(CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method HelloDemo2.");
                ClientResult result = HelloDemo2(cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
                return ClientResult.FromValue((Thing)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method HelloDemo2: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method HelloDemo2.");
            }
        }

        /// <summary> Return hi in demo2. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Thing>> HelloDemo2Async(CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method HelloDemo2Async.");
                ClientResult result = await HelloDemo2Async(cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
                return ClientResult.FromValue((Thing)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method HelloDemo2Async: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method HelloDemo2Async.");
            }
        }

        /// <summary>
        /// [Protocol Method] Create with literal value
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult CreateLiteral(BinaryContent content, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method CreateLiteral.");
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreateCreateLiteralRequest(content, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method CreateLiteral: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method CreateLiteral.");
            }
        }

        /// <summary>
        /// [Protocol Method] Create with literal value
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> CreateLiteralAsync(BinaryContent content, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method CreateLiteralAsync.");
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreateCreateLiteralRequest(content, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method CreateLiteralAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method CreateLiteralAsync.");
            }
        }

        /// <summary> Create with literal value. </summary>
        /// <param name="body"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Thing> CreateLiteral(Thing body, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method CreateLiteral.");
                Argument.AssertNotNull(body, nameof(body));

                ClientResult result = CreateLiteral(body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
                return ClientResult.FromValue((Thing)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method CreateLiteral: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method CreateLiteral.");
            }
        }

        /// <summary> Create with literal value. </summary>
        /// <param name="body"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Thing>> CreateLiteralAsync(Thing body, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method CreateLiteralAsync.");
                Argument.AssertNotNull(body, nameof(body));

                ClientResult result = await CreateLiteralAsync(body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
                return ClientResult.FromValue((Thing)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method CreateLiteralAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method CreateLiteralAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] Send literal parameters
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult HelloLiteral(RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method HelloLiteral.");
                using PipelineMessage message = CreateHelloLiteralRequest(options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method HelloLiteral: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method HelloLiteral.");
            }
        }

        /// <summary>
        /// [Protocol Method] Send literal parameters
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> HelloLiteralAsync(RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method HelloLiteralAsync.");
                using PipelineMessage message = CreateHelloLiteralRequest(options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method HelloLiteralAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method HelloLiteralAsync.");
            }
        }

        /// <summary> Send literal parameters. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Thing> HelloLiteral(CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method HelloLiteral.");
                ClientResult result = HelloLiteral(cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
                return ClientResult.FromValue((Thing)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method HelloLiteral: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method HelloLiteral.");
            }
        }

        /// <summary> Send literal parameters. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Thing>> HelloLiteralAsync(CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method HelloLiteralAsync.");
                ClientResult result = await HelloLiteralAsync(cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
                return ClientResult.FromValue((Thing)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method HelloLiteralAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method HelloLiteralAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] top level method
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="action"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult TopAction(DateTimeOffset action, RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method TopAction.");
                using PipelineMessage message = CreateTopActionRequest(action, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method TopAction: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method TopAction.");
            }
        }

        /// <summary>
        /// [Protocol Method] top level method
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="action"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> TopActionAsync(DateTimeOffset action, RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method TopActionAsync.");
                using PipelineMessage message = CreateTopActionRequest(action, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method TopActionAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method TopActionAsync.");
            }
        }

        /// <summary> top level method. </summary>
        /// <param name="action"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Thing> TopAction(DateTimeOffset action, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method TopAction.");
                ClientResult result = TopAction(action, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
                return ClientResult.FromValue((Thing)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method TopAction: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method TopAction.");
            }
        }

        /// <summary> top level method. </summary>
        /// <param name="action"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Thing>> TopActionAsync(DateTimeOffset action, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method TopActionAsync.");
                ClientResult result = await TopActionAsync(action, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
                return ClientResult.FromValue((Thing)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method TopActionAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method TopActionAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] top level method2
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult TopAction2(RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method TopAction2.");
                using PipelineMessage message = CreateTopAction2Request(options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method TopAction2: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method TopAction2.");
            }
        }

        /// <summary>
        /// [Protocol Method] top level method2
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> TopAction2Async(RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method TopAction2Async.");
                using PipelineMessage message = CreateTopAction2Request(options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method TopAction2Async: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method TopAction2Async.");
            }
        }

        /// <summary>
        /// [Protocol Method] top level patch
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult PatchAction(BinaryContent content, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method PatchAction.");
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreatePatchActionRequest(content, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method PatchAction: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method PatchAction.");
            }
        }

        /// <summary>
        /// [Protocol Method] top level patch
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> PatchActionAsync(BinaryContent content, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method PatchActionAsync.");
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreatePatchActionRequest(content, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method PatchActionAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method PatchActionAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] body parameter without body decorator
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AnonymousBody(BinaryContent content, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method AnonymousBody.");
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreateAnonymousBodyRequest(content, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method AnonymousBody: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method AnonymousBody.");
            }
        }

        /// <summary>
        /// [Protocol Method] body parameter without body decorator
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AnonymousBodyAsync(BinaryContent content, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method AnonymousBodyAsync.");
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreateAnonymousBodyRequest(content, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method AnonymousBodyAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method AnonymousBodyAsync.");
            }
        }

        /// <summary> body parameter without body decorator. </summary>
        /// <param name="name"> name of the Thing. </param>
        /// <param name="requiredUnion"> required Union. </param>
        /// <param name="requiredLiteralString"> required literal string. </param>
        /// <param name="requiredNullableString"> required nullable string. </param>
        /// <param name="requiredLiteralInt"> required literal int. </param>
        /// <param name="requiredLiteralFloat"> required literal float. </param>
        /// <param name="requiredLiteralBool"> required literal bool. </param>
        /// <param name="requiredBadDescription"> description with xml &lt;|endoftext|&gt;. </param>
        /// <param name="requiredNullableList"> required nullable collection. </param>
        /// <param name="optionalNullableString"> required optional string. </param>
        /// <param name="optionalLiteralString"> optional literal string. </param>
        /// <param name="optionalLiteralInt"> optional literal int. </param>
        /// <param name="optionalLiteralFloat"> optional literal float. </param>
        /// <param name="optionalLiteralBool"> optional literal bool. </param>
        /// <param name="optionalNullableList"> optional nullable collection. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="requiredUnion"/> or <paramref name="requiredBadDescription"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Thing> AnonymousBody(string name, BinaryData requiredUnion, ThingRequiredLiteralString requiredLiteralString, string requiredNullableString, ThingRequiredLiteralInt requiredLiteralInt, ThingRequiredLiteralFloat requiredLiteralFloat, bool requiredLiteralBool, string requiredBadDescription, IEnumerable<int> requiredNullableList, string optionalNullableString = default, ThingOptionalLiteralString? optionalLiteralString = default, ThingOptionalLiteralInt? optionalLiteralInt = default, ThingOptionalLiteralFloat? optionalLiteralFloat = default, bool? optionalLiteralBool = default, IEnumerable<int> optionalNullableList = default, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method AnonymousBody.");
                Argument.AssertNotNull(name, nameof(name));
                Argument.AssertNotNull(requiredUnion, nameof(requiredUnion));
                Argument.AssertNotNull(requiredBadDescription, nameof(requiredBadDescription));

                Thing spreadModel = new Thing(
                    name,
                    requiredUnion,
                    requiredLiteralString,
                    requiredNullableString,
                    optionalNullableString,
                    requiredLiteralInt,
                    requiredLiteralFloat,
                    requiredLiteralBool,
                    optionalLiteralString,
                    optionalLiteralInt,
                    optionalLiteralFloat,
                    optionalLiteralBool,
                    requiredBadDescription,
                    optionalNullableList?.ToList() as IList<int> ?? new ChangeTrackingList<int>(),
                    requiredNullableList?.ToList() as IList<int> ?? new ChangeTrackingList<int>(),
                    null);
                ClientResult result = AnonymousBody(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
                return ClientResult.FromValue((Thing)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method AnonymousBody: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method AnonymousBody.");
            }
        }

        /// <summary> body parameter without body decorator. </summary>
        /// <param name="name"> name of the Thing. </param>
        /// <param name="requiredUnion"> required Union. </param>
        /// <param name="requiredLiteralString"> required literal string. </param>
        /// <param name="requiredNullableString"> required nullable string. </param>
        /// <param name="requiredLiteralInt"> required literal int. </param>
        /// <param name="requiredLiteralFloat"> required literal float. </param>
        /// <param name="requiredLiteralBool"> required literal bool. </param>
        /// <param name="requiredBadDescription"> description with xml &lt;|endoftext|&gt;. </param>
        /// <param name="requiredNullableList"> required nullable collection. </param>
        /// <param name="optionalNullableString"> required optional string. </param>
        /// <param name="optionalLiteralString"> optional literal string. </param>
        /// <param name="optionalLiteralInt"> optional literal int. </param>
        /// <param name="optionalLiteralFloat"> optional literal float. </param>
        /// <param name="optionalLiteralBool"> optional literal bool. </param>
        /// <param name="optionalNullableList"> optional nullable collection. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="requiredUnion"/> or <paramref name="requiredBadDescription"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Thing>> AnonymousBodyAsync(string name, BinaryData requiredUnion, ThingRequiredLiteralString requiredLiteralString, string requiredNullableString, ThingRequiredLiteralInt requiredLiteralInt, ThingRequiredLiteralFloat requiredLiteralFloat, bool requiredLiteralBool, string requiredBadDescription, IEnumerable<int> requiredNullableList, string optionalNullableString = default, ThingOptionalLiteralString? optionalLiteralString = default, ThingOptionalLiteralInt? optionalLiteralInt = default, ThingOptionalLiteralFloat? optionalLiteralFloat = default, bool? optionalLiteralBool = default, IEnumerable<int> optionalNullableList = default, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method AnonymousBodyAsync.");
                Argument.AssertNotNull(name, nameof(name));
                Argument.AssertNotNull(requiredUnion, nameof(requiredUnion));
                Argument.AssertNotNull(requiredBadDescription, nameof(requiredBadDescription));

                Thing spreadModel = new Thing(
                    name,
                    requiredUnion,
                    requiredLiteralString,
                    requiredNullableString,
                    optionalNullableString,
                    requiredLiteralInt,
                    requiredLiteralFloat,
                    requiredLiteralBool,
                    optionalLiteralString,
                    optionalLiteralInt,
                    optionalLiteralFloat,
                    optionalLiteralBool,
                    requiredBadDescription,
                    optionalNullableList?.ToList() as IList<int> ?? new ChangeTrackingList<int>(),
                    requiredNullableList?.ToList() as IList<int> ?? new ChangeTrackingList<int>(),
                    null);
                ClientResult result = await AnonymousBodyAsync(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
                return ClientResult.FromValue((Thing)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method AnonymousBodyAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method AnonymousBodyAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] Model can have its friendly name
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FriendlyModel(BinaryContent content, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method FriendlyModel.");
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreateFriendlyModelRequest(content, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method FriendlyModel: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method FriendlyModel.");
            }
        }

        /// <summary>
        /// [Protocol Method] Model can have its friendly name
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FriendlyModelAsync(BinaryContent content, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method FriendlyModelAsync.");
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreateFriendlyModelRequest(content, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method FriendlyModelAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method FriendlyModelAsync.");
            }
        }

        /// <summary> Model can have its friendly name. </summary>
        /// <param name="name"> name of the NotFriend. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Friend> FriendlyModel(string name, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method FriendlyModel.");
                Argument.AssertNotNull(name, nameof(name));

                Friend spreadModel = new Friend(name, null);
                ClientResult result = FriendlyModel(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
                return ClientResult.FromValue((Friend)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method FriendlyModel: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method FriendlyModel.");
            }
        }

        /// <summary> Model can have its friendly name. </summary>
        /// <param name="name"> name of the NotFriend. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Friend>> FriendlyModelAsync(string name, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method FriendlyModelAsync.");
                Argument.AssertNotNull(name, nameof(name));

                Friend spreadModel = new Friend(name, null);
                ClientResult result = await FriendlyModelAsync(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
                return ClientResult.FromValue((Friend)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method FriendlyModelAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method FriendlyModelAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] addTimeHeader
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult AddTimeHeader(RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method AddTimeHeader.");
                using PipelineMessage message = CreateAddTimeHeaderRequest(options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method AddTimeHeader: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method AddTimeHeader.");
            }
        }

        /// <summary>
        /// [Protocol Method] addTimeHeader
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> AddTimeHeaderAsync(RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method AddTimeHeaderAsync.");
                using PipelineMessage message = CreateAddTimeHeaderRequest(options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method AddTimeHeaderAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method AddTimeHeaderAsync.");
            }
        }

        /// <summary> addTimeHeader. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult AddTimeHeader(CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method AddTimeHeader.");
                return AddTimeHeader(cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method AddTimeHeader: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method AddTimeHeader.");
            }
        }

        /// <summary> addTimeHeader. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> AddTimeHeaderAsync(CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method AddTimeHeaderAsync.");
                return await AddTimeHeaderAsync(cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method AddTimeHeaderAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method AddTimeHeaderAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] Model can have its projected name
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult ProjectedNameModel(BinaryContent content, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method ProjectedNameModel.");
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreateProjectedNameModelRequest(content, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ProjectedNameModel: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ProjectedNameModel.");
            }
        }

        /// <summary>
        /// [Protocol Method] Model can have its projected name
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> ProjectedNameModelAsync(BinaryContent content, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method ProjectedNameModelAsync.");
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreateProjectedNameModelRequest(content, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ProjectedNameModelAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ProjectedNameModelAsync.");
            }
        }

        /// <summary> Model can have its projected name. </summary>
        /// <param name="name"> name of the ModelWithClientName. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<RenamedModel> ProjectedNameModel(string name, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method ProjectedNameModel.");
                Argument.AssertNotNull(name, nameof(name));

                RenamedModel spreadModel = new RenamedModel(name, null);
                ClientResult result = ProjectedNameModel(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
                return ClientResult.FromValue((RenamedModel)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ProjectedNameModel: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ProjectedNameModel.");
            }
        }

        /// <summary> Model can have its projected name. </summary>
        /// <param name="name"> name of the ModelWithClientName. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<RenamedModel>> ProjectedNameModelAsync(string name, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method ProjectedNameModelAsync.");
                Argument.AssertNotNull(name, nameof(name));

                RenamedModel spreadModel = new RenamedModel(name, null);
                ClientResult result = await ProjectedNameModelAsync(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
                return ClientResult.FromValue((RenamedModel)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ProjectedNameModelAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ProjectedNameModelAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] return anonymous model
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult ReturnsAnonymousModel(RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method ReturnsAnonymousModel.");
                using PipelineMessage message = CreateReturnsAnonymousModelRequest(options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ReturnsAnonymousModel: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ReturnsAnonymousModel.");
            }
        }

        /// <summary>
        /// [Protocol Method] return anonymous model
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> ReturnsAnonymousModelAsync(RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method ReturnsAnonymousModelAsync.");
                using PipelineMessage message = CreateReturnsAnonymousModelRequest(options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ReturnsAnonymousModelAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ReturnsAnonymousModelAsync.");
            }
        }

        /// <summary> return anonymous model. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<ReturnsAnonymousModelResponse> ReturnsAnonymousModel(CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method ReturnsAnonymousModel.");
                ClientResult result = ReturnsAnonymousModel(cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
                return ClientResult.FromValue((ReturnsAnonymousModelResponse)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ReturnsAnonymousModel: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ReturnsAnonymousModel.");
            }
        }

        /// <summary> return anonymous model. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<ReturnsAnonymousModelResponse>> ReturnsAnonymousModelAsync(CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method ReturnsAnonymousModelAsync.");
                ClientResult result = await ReturnsAnonymousModelAsync(cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
                return ClientResult.FromValue((ReturnsAnonymousModelResponse)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ReturnsAnonymousModelAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ReturnsAnonymousModelAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] get extensible enum
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accept"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accept"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetUnknownValue(string accept, RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method GetUnknownValue.");
                Argument.AssertNotNull(accept, nameof(accept));

                using PipelineMessage message = CreateGetUnknownValueRequest(accept, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method GetUnknownValue: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method GetUnknownValue.");
            }
        }

        /// <summary>
        /// [Protocol Method] get extensible enum
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accept"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accept"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetUnknownValueAsync(string accept, RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method GetUnknownValueAsync.");
                Argument.AssertNotNull(accept, nameof(accept));

                using PipelineMessage message = CreateGetUnknownValueRequest(accept, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method GetUnknownValueAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method GetUnknownValueAsync.");
            }
        }

        /// <summary> get extensible enum. </summary>
        /// <param name="accept"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accept"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<string> GetUnknownValue(string accept, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method GetUnknownValue.");
                Argument.AssertNotNull(accept, nameof(accept));

                ClientResult result = GetUnknownValue(accept, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
                return ClientResult.FromValue(result.GetRawResponse().Content.ToString(), result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method GetUnknownValue: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method GetUnknownValue.");
            }
        }

        /// <summary> get extensible enum. </summary>
        /// <param name="accept"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accept"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<string>> GetUnknownValueAsync(string accept, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method GetUnknownValueAsync.");
                Argument.AssertNotNull(accept, nameof(accept));

                ClientResult result = await GetUnknownValueAsync(accept, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
                return ClientResult.FromValue(result.GetRawResponse().Content.ToString(), result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method GetUnknownValueAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method GetUnknownValueAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] When set protocol false and convenient true, then the protocol method should be internal
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult InternalProtocol(BinaryContent content, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method InternalProtocol.");
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreateInternalProtocolRequest(content, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method InternalProtocol: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method InternalProtocol.");
            }
        }

        /// <summary>
        /// [Protocol Method] When set protocol false and convenient true, then the protocol method should be internal
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> InternalProtocolAsync(BinaryContent content, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method InternalProtocolAsync.");
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreateInternalProtocolRequest(content, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method InternalProtocolAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method InternalProtocolAsync.");
            }
        }

        /// <summary> When set protocol false and convenient true, then the protocol method should be internal. </summary>
        /// <param name="body"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Thing> InternalProtocol(Thing body, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method InternalProtocol.");
                Argument.AssertNotNull(body, nameof(body));

                ClientResult result = InternalProtocol(body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
                return ClientResult.FromValue((Thing)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method InternalProtocol: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method InternalProtocol.");
            }
        }

        /// <summary> When set protocol false and convenient true, then the protocol method should be internal. </summary>
        /// <param name="body"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Thing>> InternalProtocolAsync(Thing body, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method InternalProtocolAsync.");
                Argument.AssertNotNull(body, nameof(body));

                ClientResult result = await InternalProtocolAsync(body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
                return ClientResult.FromValue((Thing)result, result.GetRawResponse());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method InternalProtocolAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method InternalProtocolAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] When set protocol false and convenient true, the convenient method should be generated even it has the same signature as protocol one
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult StillConvenient(RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method StillConvenient.");
                using PipelineMessage message = CreateStillConvenientRequest(options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method StillConvenient: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method StillConvenient.");
            }
        }

        /// <summary>
        /// [Protocol Method] When set protocol false and convenient true, the convenient method should be generated even it has the same signature as protocol one
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> StillConvenientAsync(RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method StillConvenientAsync.");
                using PipelineMessage message = CreateStillConvenientRequest(options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method StillConvenientAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method StillConvenientAsync.");
            }
        }

        /// <summary> When set protocol false and convenient true, the convenient method should be generated even it has the same signature as protocol one. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult StillConvenient(CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method StillConvenient.");
                return StillConvenient(cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method StillConvenient: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method StillConvenient.");
            }
        }

        /// <summary> When set protocol false and convenient true, the convenient method should be generated even it has the same signature as protocol one. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> StillConvenientAsync(CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method StillConvenientAsync.");
                return await StillConvenientAsync(cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method StillConvenientAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method StillConvenientAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] head as boolean.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult HeadAsBoolean(string id, RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method HeadAsBoolean.");
                Argument.AssertNotNull(id, nameof(id));

                using PipelineMessage message = CreateHeadAsBooleanRequest(id, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method HeadAsBoolean: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method HeadAsBoolean.");
            }
        }

        /// <summary>
        /// [Protocol Method] head as boolean.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> HeadAsBooleanAsync(string id, RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method HeadAsBooleanAsync.");
                Argument.AssertNotNull(id, nameof(id));

                using PipelineMessage message = CreateHeadAsBooleanRequest(id, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method HeadAsBooleanAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method HeadAsBooleanAsync.");
            }
        }

        /// <summary> head as boolean. </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult HeadAsBoolean(string id, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method HeadAsBoolean.");
                Argument.AssertNotNull(id, nameof(id));

                return HeadAsBoolean(id, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method HeadAsBoolean: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method HeadAsBoolean.");
            }
        }

        /// <summary> head as boolean. </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> HeadAsBooleanAsync(string id, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method HeadAsBooleanAsync.");
                Argument.AssertNotNull(id, nameof(id));

                return await HeadAsBooleanAsync(id, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method HeadAsBooleanAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method HeadAsBooleanAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] Return hi again
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="p1"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithApiVersion(string p1, RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method WithApiVersion.");
                Argument.AssertNotNull(p1, nameof(p1));

                using PipelineMessage message = CreateWithApiVersionRequest(p1, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method WithApiVersion: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method WithApiVersion.");
            }
        }

        /// <summary>
        /// [Protocol Method] Return hi again
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="p1"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> WithApiVersionAsync(string p1, RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method WithApiVersionAsync.");
                Argument.AssertNotNull(p1, nameof(p1));

                using PipelineMessage message = CreateWithApiVersionRequest(p1, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method WithApiVersionAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method WithApiVersionAsync.");
            }
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p1"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult WithApiVersion(string p1, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method WithApiVersion.");
                Argument.AssertNotNull(p1, nameof(p1));

                return WithApiVersion(p1, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method WithApiVersion: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method WithApiVersion.");
            }
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p1"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> WithApiVersionAsync(string p1, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method WithApiVersionAsync.");
                Argument.AssertNotNull(p1, nameof(p1));

                return await WithApiVersionAsync(p1, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method WithApiVersionAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method WithApiVersionAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] List things with nextlink
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual CollectionResult ListWithNextLink(RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method ListWithNextLink.");
                return new SampleTypeSpecClientListWithNextLinkCollectionResult(this, null, options);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ListWithNextLink: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ListWithNextLink.");
            }
        }

        /// <summary>
        /// [Protocol Method] List things with nextlink
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncCollectionResult ListWithNextLinkAsync(RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method ListWithNextLinkAsync.");
                return new SampleTypeSpecClientListWithNextLinkAsyncCollectionResult(this, null, options);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ListWithNextLinkAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ListWithNextLinkAsync.");
            }
        }

        /// <summary> List things with nextlink. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual CollectionResult<Thing> ListWithNextLink(CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method ListWithNextLink.");
                return new SampleTypeSpecClientListWithNextLinkCollectionResultOfT(this, null, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ListWithNextLink: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ListWithNextLink.");
            }
        }

        /// <summary> List things with nextlink. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual AsyncCollectionResult<Thing> ListWithNextLinkAsync(CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method ListWithNextLinkAsync.");
                return new SampleTypeSpecClientListWithNextLinkAsyncCollectionResultOfT(this, null, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ListWithNextLinkAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ListWithNextLinkAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] List things with continuation token
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="token"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual CollectionResult ListWithContinuationToken(string token, RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method ListWithContinuationToken.");
                return new SampleTypeSpecClientListWithContinuationTokenCollectionResult(this, token, options);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ListWithContinuationToken: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ListWithContinuationToken.");
            }
        }

        /// <summary>
        /// [Protocol Method] List things with continuation token
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="token"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncCollectionResult ListWithContinuationTokenAsync(string token, RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method ListWithContinuationTokenAsync.");
                return new SampleTypeSpecClientListWithContinuationTokenAsyncCollectionResult(this, token, options);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ListWithContinuationTokenAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ListWithContinuationTokenAsync.");
            }
        }

        /// <summary> List things with continuation token. </summary>
        /// <param name="token"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual CollectionResult<Thing> ListWithContinuationToken(string token = default, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method ListWithContinuationToken.");
                return new SampleTypeSpecClientListWithContinuationTokenCollectionResultOfT(this, token, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ListWithContinuationToken: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ListWithContinuationToken.");
            }
        }

        /// <summary> List things with continuation token. </summary>
        /// <param name="token"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual AsyncCollectionResult<Thing> ListWithContinuationTokenAsync(string token = default, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method ListWithContinuationTokenAsync.");
                return new SampleTypeSpecClientListWithContinuationTokenAsyncCollectionResultOfT(this, token, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ListWithContinuationTokenAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ListWithContinuationTokenAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] List things with continuation token header response
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="token"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual CollectionResult ListWithContinuationTokenHeaderResponse(string token, RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method ListWithContinuationTokenHeaderResponse.");
                return new SampleTypeSpecClientListWithContinuationTokenHeaderResponseCollectionResult(this, token, options);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ListWithContinuationTokenHeaderResponse: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ListWithContinuationTokenHeaderResponse.");
            }
        }

        /// <summary>
        /// [Protocol Method] List things with continuation token header response
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="token"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncCollectionResult ListWithContinuationTokenHeaderResponseAsync(string token, RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method ListWithContinuationTokenHeaderResponseAsync.");
                return new SampleTypeSpecClientListWithContinuationTokenHeaderResponseAsyncCollectionResult(this, token, options);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ListWithContinuationTokenHeaderResponseAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ListWithContinuationTokenHeaderResponseAsync.");
            }
        }

        /// <summary> List things with continuation token header response. </summary>
        /// <param name="token"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual CollectionResult<Thing> ListWithContinuationTokenHeaderResponse(string token = default, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method ListWithContinuationTokenHeaderResponse.");
                return new SampleTypeSpecClientListWithContinuationTokenHeaderResponseCollectionResultOfT(this, token, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ListWithContinuationTokenHeaderResponse: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ListWithContinuationTokenHeaderResponse.");
            }
        }

        /// <summary> List things with continuation token header response. </summary>
        /// <param name="token"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual AsyncCollectionResult<Thing> ListWithContinuationTokenHeaderResponseAsync(string token = default, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method ListWithContinuationTokenHeaderResponseAsync.");
                return new SampleTypeSpecClientListWithContinuationTokenHeaderResponseAsyncCollectionResultOfT(this, token, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ListWithContinuationTokenHeaderResponseAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ListWithContinuationTokenHeaderResponseAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] List things with paging
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual CollectionResult ListWithPaging(RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method ListWithPaging.");
                return new SampleTypeSpecClientListWithPagingCollectionResult(this, options);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ListWithPaging: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ListWithPaging.");
            }
        }

        /// <summary>
        /// [Protocol Method] List things with paging
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncCollectionResult ListWithPagingAsync(RequestOptions options)
        {
            try
            {
                Console.WriteLine("Entering method ListWithPagingAsync.");
                return new SampleTypeSpecClientListWithPagingAsyncCollectionResult(this, options);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ListWithPagingAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ListWithPagingAsync.");
            }
        }

        /// <summary> List things with paging. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual CollectionResult<Thing> ListWithPaging(CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method ListWithPaging.");
                return new SampleTypeSpecClientListWithPagingCollectionResultOfT(this, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ListWithPaging: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ListWithPaging.");
            }
        }

        /// <summary> List things with paging. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual AsyncCollectionResult<Thing> ListWithPagingAsync(CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method ListWithPagingAsync.");
                return new SampleTypeSpecClientListWithPagingAsyncCollectionResultOfT(this, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method ListWithPagingAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method ListWithPagingAsync.");
            }
        }

        /// <summary>
        /// [Protocol Method] An operation with embedded parameters within the body
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="requiredHeader"> required header parameter. </param>
        /// <param name="requiredQuery"> required query parameter. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="optionalHeader"> optional header parameter. </param>
        /// <param name="optionalQuery"> optional query parameter. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredHeader"/>, <paramref name="requiredQuery"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult EmbeddedParameters(string requiredHeader, string requiredQuery, BinaryContent content, string optionalHeader = default, string optionalQuery = default, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method EmbeddedParameters.");
                Argument.AssertNotNull(requiredHeader, nameof(requiredHeader));
                Argument.AssertNotNull(requiredQuery, nameof(requiredQuery));
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreateEmbeddedParametersRequest(requiredHeader, requiredQuery, content, optionalHeader, optionalQuery, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method EmbeddedParameters: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method EmbeddedParameters.");
            }
        }

        /// <summary>
        /// [Protocol Method] An operation with embedded parameters within the body
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="requiredHeader"> required header parameter. </param>
        /// <param name="requiredQuery"> required query parameter. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="optionalHeader"> optional header parameter. </param>
        /// <param name="optionalQuery"> optional query parameter. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredHeader"/>, <paramref name="requiredQuery"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> EmbeddedParametersAsync(string requiredHeader, string requiredQuery, BinaryContent content, string optionalHeader = default, string optionalQuery = default, RequestOptions options = null)
        {
            try
            {
                Console.WriteLine("Entering method EmbeddedParametersAsync.");
                Argument.AssertNotNull(requiredHeader, nameof(requiredHeader));
                Argument.AssertNotNull(requiredQuery, nameof(requiredQuery));
                Argument.AssertNotNull(content, nameof(content));

                using PipelineMessage message = CreateEmbeddedParametersRequest(requiredHeader, requiredQuery, content, optionalHeader, optionalQuery, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method EmbeddedParametersAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method EmbeddedParametersAsync.");
            }
        }

        /// <summary> An operation with embedded parameters within the body. </summary>
        /// <param name="body"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult EmbeddedParameters(ModelWithEmbeddedNonBodyParameters body, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method EmbeddedParameters.");
                Argument.AssertNotNull(body, nameof(body));

                return EmbeddedParameters(body.RequiredHeader, body.RequiredQuery, body, body.OptionalHeader, body.OptionalQuery, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method EmbeddedParameters: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method EmbeddedParameters.");
            }
        }

        /// <summary> An operation with embedded parameters within the body. </summary>
        /// <param name="body"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> EmbeddedParametersAsync(ModelWithEmbeddedNonBodyParameters body, CancellationToken cancellationToken = default)
        {
            try
            {
                Console.WriteLine("Entering method EmbeddedParametersAsync.");
                Argument.AssertNotNull(body, nameof(body));

                return await EmbeddedParametersAsync(body.RequiredHeader, body.RequiredQuery, body, body.OptionalHeader, body.OptionalQuery, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An exception was thrown in method EmbeddedParametersAsync: {ex}");
                throw;
            }
            finally
            {
                Console.WriteLine("Exiting method EmbeddedParametersAsync.");
            }
        }
    }
}
