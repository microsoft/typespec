// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace SampleTypeSpec
{
    /// <summary> A sample dynamic model. </summary>
    public partial class DynamicModel : IJsonModel<DynamicModel>
    {
        /// <summary> Initializes a new instance of <see cref="DynamicModel"/> for deserialization. </summary>
        internal DynamicModel()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<DynamicModel>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DynamicModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DynamicModel)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            if (Optional.IsDefined(OptionalUnknown))
            {
                writer.WritePropertyName("optionalUnknown"u8);
#if NET6_0_OR_GREATER
                writer.WriteRawValue(OptionalUnknown);
#else
                using (JsonDocument document = JsonDocument.Parse(OptionalUnknown))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (Optional.IsDefined(OptionalInt))
            {
                writer.WritePropertyName("optionalInt"u8);
                writer.WriteNumberValue(OptionalInt.Value);
            }
            if (Optional.IsCollectionDefined(OptionalNullableList))
            {
                writer.WritePropertyName("optionalNullableList"u8);
                writer.WriteStartArray();
                foreach (int item in OptionalNullableList)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(RequiredNullableList))
            {
                writer.WritePropertyName("requiredNullableList"u8);
                writer.WriteStartArray();
                foreach (int item in RequiredNullableList)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNull("requiredNullableList"u8);
            }
            if (Optional.IsCollectionDefined(OptionalNullableDictionary))
            {
                writer.WritePropertyName("optionalNullableDictionary"u8);
                writer.WriteStartObject();
                foreach (var item in OptionalNullableDictionary)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(RequiredNullableDictionary))
            {
                writer.WritePropertyName("requiredNullableDictionary"u8);
                writer.WriteStartObject();
                foreach (var item in RequiredNullableDictionary)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNull("requiredNullableDictionary"u8);
            }
            writer.WritePropertyName("primitiveDictionary"u8);
            writer.WriteStartObject();
            foreach (var item in PrimitiveDictionary)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteNumberValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("foo"u8);
            writer.WriteObjectValue(Foo, options);
            writer.WritePropertyName("listFoo"u8);
            writer.WriteStartArray();
            foreach (AnotherDynamicModel item in ListFoo)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("listOfListFoo"u8);
            writer.WriteStartArray();
            foreach (IList<AnotherDynamicModel> item in ListOfListFoo)
            {
                if (item == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteStartArray();
                foreach (AnotherDynamicModel item0 in item)
                {
                    writer.WriteObjectValue(item0, options);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndArray();
            writer.WritePropertyName("dictionaryFoo"u8);
            writer.WriteStartObject();
            foreach (var item in DictionaryFoo)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value, options);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("dictionaryOfDictionaryFoo"u8);
            writer.WriteStartObject();
            foreach (var item in DictionaryOfDictionaryFoo)
            {
                writer.WritePropertyName(item.Key);
                if (item.Value == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteStartObject();
                foreach (var item0 in item.Value)
                {
                    writer.WritePropertyName(item0.Key);
                    writer.WriteObjectValue(item0.Value, options);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
            writer.WritePropertyName("dictionaryListFoo"u8);
            writer.WriteStartObject();
            foreach (var item in DictionaryListFoo)
            {
                writer.WritePropertyName(item.Key);
                if (item.Value == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteStartArray();
                foreach (AnotherDynamicModel item0 in item.Value)
                {
                    writer.WriteObjectValue(item0, options);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WritePropertyName("listOfDictionaryFoo"u8);
            writer.WriteStartArray();
            foreach (IDictionary<string, AnotherDynamicModel> item in ListOfDictionaryFoo)
            {
                if (item == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteStartObject();
                foreach (var item0 in item)
                {
                    writer.WritePropertyName(item0.Key);
                    writer.WriteObjectValue(item0.Value, options);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DynamicModel IJsonModel<DynamicModel>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DynamicModel JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DynamicModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DynamicModel)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDynamicModel(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static DynamicModel DeserializeDynamicModel(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            BinaryData optionalUnknown = default;
            int? optionalInt = default;
            IList<int> optionalNullableList = default;
            IList<int> requiredNullableList = default;
            IDictionary<string, int> optionalNullableDictionary = default;
            IDictionary<string, int> requiredNullableDictionary = default;
            IDictionary<string, int> primitiveDictionary = default;
            AnotherDynamicModel foo = default;
            IList<AnotherDynamicModel> listFoo = default;
            IList<IList<AnotherDynamicModel>> listOfListFoo = default;
            IDictionary<string, AnotherDynamicModel> dictionaryFoo = default;
            IDictionary<string, IDictionary<string, AnotherDynamicModel>> dictionaryOfDictionaryFoo = default;
            IDictionary<string, IList<AnotherDynamicModel>> dictionaryListFoo = default;
            IList<IDictionary<string, AnotherDynamicModel>> listOfDictionaryFoo = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("name"u8))
                {
                    name = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("optionalUnknown"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    optionalUnknown = BinaryData.FromString(prop.Value.GetRawText());
                    continue;
                }
                if (prop.NameEquals("optionalInt"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    optionalInt = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("optionalNullableList"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    optionalNullableList = array;
                    continue;
                }
                if (prop.NameEquals("requiredNullableList"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        requiredNullableList = new ChangeTrackingList<int>();
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    requiredNullableList = array;
                    continue;
                }
                if (prop.NameEquals("optionalNullableDictionary"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, int> dictionary = new Dictionary<string, int>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        dictionary.Add(prop0.Name, prop0.Value.GetInt32());
                    }
                    optionalNullableDictionary = dictionary;
                    continue;
                }
                if (prop.NameEquals("requiredNullableDictionary"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        requiredNullableDictionary = new ChangeTrackingDictionary<string, int>();
                        continue;
                    }
                    Dictionary<string, int> dictionary = new Dictionary<string, int>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        dictionary.Add(prop0.Name, prop0.Value.GetInt32());
                    }
                    requiredNullableDictionary = dictionary;
                    continue;
                }
                if (prop.NameEquals("primitiveDictionary"u8))
                {
                    Dictionary<string, int> dictionary = new Dictionary<string, int>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        dictionary.Add(prop0.Name, prop0.Value.GetInt32());
                    }
                    primitiveDictionary = dictionary;
                    continue;
                }
                if (prop.NameEquals("foo"u8))
                {
                    foo = AnotherDynamicModel.DeserializeAnotherDynamicModel(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("listFoo"u8))
                {
                    List<AnotherDynamicModel> array = new List<AnotherDynamicModel>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(AnotherDynamicModel.DeserializeAnotherDynamicModel(item, options));
                    }
                    listFoo = array;
                    continue;
                }
                if (prop.NameEquals("listOfListFoo"u8))
                {
                    List<IList<AnotherDynamicModel>> array = new List<IList<AnotherDynamicModel>>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            List<AnotherDynamicModel> array0 = new List<AnotherDynamicModel>();
                            foreach (var item0 in item.EnumerateArray())
                            {
                                array0.Add(AnotherDynamicModel.DeserializeAnotherDynamicModel(item0, options));
                            }
                            array.Add(array0);
                        }
                    }
                    listOfListFoo = array;
                    continue;
                }
                if (prop.NameEquals("dictionaryFoo"u8))
                {
                    Dictionary<string, AnotherDynamicModel> dictionary = new Dictionary<string, AnotherDynamicModel>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        dictionary.Add(prop0.Name, AnotherDynamicModel.DeserializeAnotherDynamicModel(prop0.Value, options));
                    }
                    dictionaryFoo = dictionary;
                    continue;
                }
                if (prop.NameEquals("dictionaryOfDictionaryFoo"u8))
                {
                    Dictionary<string, IDictionary<string, AnotherDynamicModel>> dictionary = new Dictionary<string, IDictionary<string, AnotherDynamicModel>>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            Dictionary<string, AnotherDynamicModel> dictionary0 = new Dictionary<string, AnotherDynamicModel>();
                            foreach (var prop1 in prop0.Value.EnumerateObject())
                            {
                                dictionary0.Add(prop1.Name, AnotherDynamicModel.DeserializeAnotherDynamicModel(prop1.Value, options));
                            }
                            dictionary.Add(prop0.Name, dictionary0);
                        }
                    }
                    dictionaryOfDictionaryFoo = dictionary;
                    continue;
                }
                if (prop.NameEquals("dictionaryListFoo"u8))
                {
                    Dictionary<string, IList<AnotherDynamicModel>> dictionary = new Dictionary<string, IList<AnotherDynamicModel>>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            List<AnotherDynamicModel> array = new List<AnotherDynamicModel>();
                            foreach (var item in prop0.Value.EnumerateArray())
                            {
                                array.Add(AnotherDynamicModel.DeserializeAnotherDynamicModel(item, options));
                            }
                            dictionary.Add(prop0.Name, array);
                        }
                    }
                    dictionaryListFoo = dictionary;
                    continue;
                }
                if (prop.NameEquals("listOfDictionaryFoo"u8))
                {
                    List<IDictionary<string, AnotherDynamicModel>> array = new List<IDictionary<string, AnotherDynamicModel>>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            Dictionary<string, AnotherDynamicModel> dictionary = new Dictionary<string, AnotherDynamicModel>();
                            foreach (var prop0 in item.EnumerateObject())
                            {
                                dictionary.Add(prop0.Name, AnotherDynamicModel.DeserializeAnotherDynamicModel(prop0.Value, options));
                            }
                            array.Add(dictionary);
                        }
                    }
                    listOfDictionaryFoo = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new DynamicModel(
                name,
                optionalUnknown,
                optionalInt,
                optionalNullableList ?? new ChangeTrackingList<int>(),
                requiredNullableList,
                optionalNullableDictionary ?? new ChangeTrackingDictionary<string, int>(),
                requiredNullableDictionary,
                primitiveDictionary,
                foo,
                listFoo,
                listOfListFoo,
                dictionaryFoo,
                dictionaryOfDictionaryFoo,
                dictionaryListFoo,
                listOfDictionaryFoo,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<DynamicModel>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DynamicModel>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, SampleTypeSpecContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DynamicModel)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DynamicModel IPersistableModel<DynamicModel>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DynamicModel PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DynamicModel>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeDynamicModel(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DynamicModel)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<DynamicModel>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="dynamicModel"> The <see cref="DynamicModel"/> to serialize into <see cref="BinaryContent"/>. </param>
        public static implicit operator BinaryContent(DynamicModel dynamicModel)
        {
            if (dynamicModel == null)
            {
                return null;
            }
            return BinaryContent.Create(dynamicModel, ModelSerializationExtensions.WireOptions);
        }
    }
}
