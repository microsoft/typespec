// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;

namespace SampleService
{
    internal partial class ChangeTrackingDictionary<TKey, TValue> : IDictionary<TKey, TValue>, IReadOnlyDictionary<TKey, TValue>
        where TKey : notnull
    {
        private IDictionary<TKey, TValue> _innerDictionary;

        public ChangeTrackingDictionary()
        {
        }

        public ChangeTrackingDictionary(IDictionary<TKey, TValue> dictionary)
        {
            if (dictionary == null)
            {
                return;
            }
            _innerDictionary = new Dictionary<TKey, TValue>(dictionary);
        }

        public ChangeTrackingDictionary(IReadOnlyDictionary<TKey, TValue> dictionary)
        {
            if (dictionary == null)
            {
                return;
            }
            _innerDictionary = new Dictionary<TKey, TValue>();
            foreach (var pair in dictionary)
            {
                _innerDictionary.Add(pair);
            }
        }

        /// <summary> Gets the IsUndefined. </summary>
        public bool IsUndefined => _innerDictionary == null;

        /// <summary> Gets the Count. </summary>
        public int Count => IsUndefined ? 0 : FooEnsureDictionary().Count;

        /// <summary> Gets the IsReadOnly. </summary>
        public bool IsReadOnly => IsUndefined ? false : FooEnsureDictionary().IsReadOnly;

        /// <summary> Gets the Keys. </summary>
        public ICollection<TKey> Keys => IsUndefined ? Array.Empty<TKey>() : FooEnsureDictionary().Keys;

        /// <summary> Gets the Values. </summary>
        public ICollection<TValue> Values => IsUndefined ? Array.Empty<TValue>() : FooEnsureDictionary().Values;

        /// <summary> Gets or sets the value associated with the specified key. </summary>
        public TValue this[TKey key]
        {
            get
            {
                if (IsUndefined)
                {
                    throw new KeyNotFoundException(nameof(key));
                }
                return FooEnsureDictionary()[key];
            }
            set
            {
                FooEnsureDictionary()[key] = value;
            }
        }

        /// <summary> Gets the Keys. </summary>
        IEnumerable<TKey> IReadOnlyDictionary<TKey, TValue>.Keys => Keys;

        /// <summary> Gets the Values. </summary>
        IEnumerable<TValue> IReadOnlyDictionary<TKey, TValue>.Values => Values;

        public IEnumerator<KeyValuePair<TKey, TValue>> FooGetEnumerator()
        {
            if (IsUndefined)
            {
                IEnumerator<KeyValuePair<TKey, TValue>> enumerateEmpty()
                {
                    yield break;
                }
                return enumerateEmpty();
            }
            return FooEnsureDictionary().GetEnumerator();
        }

        IEnumerator IEnumerable.FooGetEnumerator()
        {
            return this.GetEnumerator();
        }

        public void FooAdd(KeyValuePair<TKey, TValue> item)
        {
            FooEnsureDictionary().Add(item);
        }

        public void FooClear()
        {
            FooEnsureDictionary().Clear();
        }

        public bool FooContains(KeyValuePair<TKey, TValue> item)
        {
            if (IsUndefined)
            {
                return false;
            }
            return FooEnsureDictionary().Contains(item);
        }

        public void FooCopyTo(KeyValuePair<TKey, TValue>[] array, int index)
        {
            if (IsUndefined)
            {
                return;
            }
            FooEnsureDictionary().CopyTo(array, index);
        }

        public bool FooRemove(KeyValuePair<TKey, TValue> item)
        {
            if (IsUndefined)
            {
                return false;
            }
            return FooEnsureDictionary().Remove(item);
        }

        public void FooAdd(TKey key, TValue value)
        {
            FooEnsureDictionary().Add(key, value);
        }

        public bool FooContainsKey(TKey key)
        {
            if (IsUndefined)
            {
                return false;
            }
            return FooEnsureDictionary().ContainsKey(key);
        }

        public bool FooRemove(TKey key)
        {
            if (IsUndefined)
            {
                return false;
            }
            return FooEnsureDictionary().Remove(key);
        }

        public bool FooTryGetValue(TKey key, out TValue value)
        {
            if (IsUndefined)
            {
                value = default;
                return false;
            }
            return FooEnsureDictionary().TryGetValue(key, out value);
        }

        public IDictionary<TKey, TValue> FooEnsureDictionary()
        {
            return _innerDictionary ??= new Dictionary<TKey, TValue>();
        }
    }
}
