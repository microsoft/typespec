// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: A.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_A_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_A_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_A_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_A_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_A_2eproto;
namespace A {
class Output;
struct OutputDefaultTypeInternal;
extern OutputDefaultTypeInternal _Output_default_instance_;
}  // namespace A
PROTOBUF_NAMESPACE_OPEN
template <>
::A::Output* Arena::CreateMaybeMessage<::A::Output>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace A {

// ===================================================================


// -------------------------------------------------------------------

class Output final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:A.Output) */ {
 public:
  inline Output() : Output(nullptr) {}
  ~Output() override;
  explicit PROTOBUF_CONSTEXPR Output(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Output(const Output& from);
  Output(Output&& from) noexcept
    : Output() {
    *this = ::std::move(from);
  }

  inline Output& operator=(const Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline Output& operator=(Output&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Output& default_instance() {
    return *internal_default_instance();
  }
  static inline const Output* internal_default_instance() {
    return reinterpret_cast<const Output*>(
               &_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Output& a, Output& b) {
    a.Swap(&b);
  }
  inline void Swap(Output* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Output* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Output* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Output>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Output& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Output& from) {
    Output::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Output* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "A.Output";
  }
  protected:
  explicit Output(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondFieldFieldNumber = 2,
    kTestOutputFieldFieldNumber = 1,
  };
  // string secondField = 2;
  void clear_secondfield() ;
  const std::string& secondfield() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secondfield(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secondfield();
  PROTOBUF_NODISCARD std::string* release_secondfield();
  void set_allocated_secondfield(std::string* secondfield);
  private:
  const std::string& _internal_secondfield() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondfield(const std::string& value);
  std::string* _internal_mutable_secondfield();
  public:
  // int32 testOutputField = 1;
  void clear_testoutputfield() ;
  ::int32_t testoutputfield() const;
  void set_testoutputfield(::int32_t value);

  private:
  ::int32_t _internal_testoutputfield() const;
  void _internal_set_testoutputfield(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:A.Output)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondfield_;
    ::int32_t testoutputfield_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_A_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Output

// int32 testOutputField = 1;
inline void Output::clear_testoutputfield() {
  _impl_.testoutputfield_ = 0;
}
inline ::int32_t Output::testoutputfield() const {
  // @@protoc_insertion_point(field_get:A.Output.testOutputField)
  return _internal_testoutputfield();
}
inline void Output::set_testoutputfield(::int32_t value) {
  ;
  _internal_set_testoutputfield(value);
  // @@protoc_insertion_point(field_set:A.Output.testOutputField)
}
inline ::int32_t Output::_internal_testoutputfield() const {
  return _impl_.testoutputfield_;
}
inline void Output::_internal_set_testoutputfield(::int32_t value) {
  ;
  _impl_.testoutputfield_ = value;
}

// string secondField = 2;
inline void Output::clear_secondfield() {
  _impl_.secondfield_.ClearToEmpty();
}
inline const std::string& Output::secondfield() const {
  // @@protoc_insertion_point(field_get:A.Output.secondField)
  return _internal_secondfield();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Output::set_secondfield(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secondfield_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:A.Output.secondField)
}
inline std::string* Output::mutable_secondfield() {
  std::string* _s = _internal_mutable_secondfield();
  // @@protoc_insertion_point(field_mutable:A.Output.secondField)
  return _s;
}
inline const std::string& Output::_internal_secondfield() const {
  return _impl_.secondfield_.Get();
}
inline void Output::_internal_set_secondfield(const std::string& value) {

  _impl_.secondfield_.Set(value, GetArenaForAllocation());
}
inline std::string* Output::_internal_mutable_secondfield() {

  return _impl_.secondfield_.Mutable(GetArenaForAllocation());
}
inline std::string* Output::release_secondfield() {
  // @@protoc_insertion_point(field_release:A.Output.secondField)
  return _impl_.secondfield_.Release();
}
inline void Output::set_allocated_secondfield(std::string* secondfield) {
  _impl_.secondfield_.SetAllocated(secondfield, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secondfield_.IsDefault()) {
    _impl_.secondfield_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:A.Output.secondField)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace A


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_A_2eproto_2epb_2eh
