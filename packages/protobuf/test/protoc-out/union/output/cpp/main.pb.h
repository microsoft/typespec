// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_main_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_main_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_main_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_main_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_main_2eproto;
class Input;
struct InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class InputA;
struct InputADefaultTypeInternal;
extern InputADefaultTypeInternal _InputA_default_instance_;
class InputB;
struct InputBDefaultTypeInternal;
extern InputBDefaultTypeInternal _InputB_default_instance_;
class Output;
struct OutputDefaultTypeInternal;
extern OutputDefaultTypeInternal _Output_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::Input* Arena::CreateMaybeMessage<::Input>(Arena*);
template <>
::InputA* Arena::CreateMaybeMessage<::InputA>(Arena*);
template <>
::InputB* Arena::CreateMaybeMessage<::InputB>(Arena*);
template <>
::Output* Arena::CreateMaybeMessage<::Output>(Arena*);
PROTOBUF_NAMESPACE_CLOSE


// ===================================================================


// -------------------------------------------------------------------

class InputA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InputA) */ {
 public:
  inline InputA() : InputA(nullptr) {}
  ~InputA() override;
  explicit PROTOBUF_CONSTEXPR InputA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputA(const InputA& from);
  InputA(InputA&& from) noexcept
    : InputA() {
    *this = ::std::move(from);
  }

  inline InputA& operator=(const InputA& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputA& operator=(InputA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputA& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputA* internal_default_instance() {
    return reinterpret_cast<const InputA*>(
               &_InputA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputA& a, InputA& b) {
    a.Swap(&b);
  }
  inline void Swap(InputA* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputA* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InputA& from) {
    InputA::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputA* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "InputA";
  }
  protected:
  explicit InputA(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestInputFieldFieldNumber = 1,
  };
  // string testInputField = 1;
  void clear_testinputfield() ;
  const std::string& testinputfield() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_testinputfield(ArgT0&& arg0, ArgT... args);
  std::string* mutable_testinputfield();
  PROTOBUF_NODISCARD std::string* release_testinputfield();
  void set_allocated_testinputfield(std::string* testinputfield);
  private:
  const std::string& _internal_testinputfield() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_testinputfield(const std::string& value);
  std::string* _internal_mutable_testinputfield();
  public:
  // @@protoc_insertion_point(class_scope:InputA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr testinputfield_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};// -------------------------------------------------------------------

class InputB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InputB) */ {
 public:
  inline InputB() : InputB(nullptr) {}
  ~InputB() override;
  explicit PROTOBUF_CONSTEXPR InputB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputB(const InputB& from);
  InputB(InputB&& from) noexcept
    : InputB() {
    *this = ::std::move(from);
  }

  inline InputB& operator=(const InputB& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputB& operator=(InputB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputB& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputB* internal_default_instance() {
    return reinterpret_cast<const InputB*>(
               &_InputB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InputB& a, InputB& b) {
    a.Swap(&b);
  }
  inline void Swap(InputB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputB* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InputB& from) {
    InputB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "InputB";
  }
  protected:
  explicit InputB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestInputFieldFieldNumber = 1,
  };
  // uint32 testInputField = 1;
  void clear_testinputfield() ;
  ::uint32_t testinputfield() const;
  void set_testinputfield(::uint32_t value);

  private:
  ::uint32_t _internal_testinputfield() const;
  void _internal_set_testinputfield(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:InputB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t testinputfield_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};// -------------------------------------------------------------------

class Input final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Input) */ {
 public:
  inline Input() : Input(nullptr) {}
  ~Input() override;
  explicit PROTOBUF_CONSTEXPR Input(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Input& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kA = 1,
    kB = 2,
    VALUE_NOT_SET = 0,
  };

  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Input* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Input* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Input& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Input& from) {
    Input::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Input";
  }
  protected:
  explicit Input(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
  };
  // .InputA a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;

  public:
  void clear_a() ;
  const ::InputA& a() const;
  PROTOBUF_NODISCARD ::InputA* release_a();
  ::InputA* mutable_a();
  void set_allocated_a(::InputA* a);
  private:
  const ::InputA& _internal_a() const;
  ::InputA* _internal_mutable_a();
  public:
  void unsafe_arena_set_allocated_a(
      ::InputA* a);
  ::InputA* unsafe_arena_release_a();
  // .InputB b = 2;
  bool has_b() const;
  private:
  bool _internal_has_b() const;

  public:
  void clear_b() ;
  const ::InputB& b() const;
  PROTOBUF_NODISCARD ::InputB* release_b();
  ::InputB* mutable_b();
  void set_allocated_b(::InputB* b);
  private:
  const ::InputB& _internal_b() const;
  ::InputB* _internal_mutable_b();
  public:
  void unsafe_arena_set_allocated_b(
      ::InputB* b);
  ::InputB* unsafe_arena_release_b();
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:Input)
 private:
  class _Internal;
  void set_has_a();
  void set_has_b();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::InputA* a_;
      ::InputB* b_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};// -------------------------------------------------------------------

class Output final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Output) */ {
 public:
  inline Output() : Output(nullptr) {}
  ~Output() override;
  explicit PROTOBUF_CONSTEXPR Output(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Output(const Output& from);
  Output(Output&& from) noexcept
    : Output() {
    *this = ::std::move(from);
  }

  inline Output& operator=(const Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline Output& operator=(Output&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Output& default_instance() {
    return *internal_default_instance();
  }
  static inline const Output* internal_default_instance() {
    return reinterpret_cast<const Output*>(
               &_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Output& a, Output& b) {
    a.Swap(&b);
  }
  inline void Swap(Output* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Output* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Output* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Output>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Output& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Output& from) {
    Output::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Output* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Output";
  }
  protected:
  explicit Output(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondFieldFieldNumber = 2,
    kTestOutputFieldFieldNumber = 1,
  };
  // string secondField = 2;
  void clear_secondfield() ;
  const std::string& secondfield() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secondfield(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secondfield();
  PROTOBUF_NODISCARD std::string* release_secondfield();
  void set_allocated_secondfield(std::string* secondfield);
  private:
  const std::string& _internal_secondfield() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondfield(const std::string& value);
  std::string* _internal_mutable_secondfield();
  public:
  // int32 testOutputField = 1;
  void clear_testoutputfield() ;
  ::int32_t testoutputfield() const;
  void set_testoutputfield(::int32_t value);

  private:
  ::int32_t _internal_testoutputfield() const;
  void _internal_set_testoutputfield(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Output)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondfield_;
    ::int32_t testoutputfield_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InputA

// string testInputField = 1;
inline void InputA::clear_testinputfield() {
  _impl_.testinputfield_.ClearToEmpty();
}
inline const std::string& InputA::testinputfield() const {
  // @@protoc_insertion_point(field_get:InputA.testInputField)
  return _internal_testinputfield();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InputA::set_testinputfield(ArgT0&& arg0, ArgT... args) {
 
 _impl_.testinputfield_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InputA.testInputField)
}
inline std::string* InputA::mutable_testinputfield() {
  std::string* _s = _internal_mutable_testinputfield();
  // @@protoc_insertion_point(field_mutable:InputA.testInputField)
  return _s;
}
inline const std::string& InputA::_internal_testinputfield() const {
  return _impl_.testinputfield_.Get();
}
inline void InputA::_internal_set_testinputfield(const std::string& value) {

  _impl_.testinputfield_.Set(value, GetArenaForAllocation());
}
inline std::string* InputA::_internal_mutable_testinputfield() {

  return _impl_.testinputfield_.Mutable(GetArenaForAllocation());
}
inline std::string* InputA::release_testinputfield() {
  // @@protoc_insertion_point(field_release:InputA.testInputField)
  return _impl_.testinputfield_.Release();
}
inline void InputA::set_allocated_testinputfield(std::string* testinputfield) {
  _impl_.testinputfield_.SetAllocated(testinputfield, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.testinputfield_.IsDefault()) {
    _impl_.testinputfield_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InputA.testInputField)
}

// -------------------------------------------------------------------

// InputB

// uint32 testInputField = 1;
inline void InputB::clear_testinputfield() {
  _impl_.testinputfield_ = 0u;
}
inline ::uint32_t InputB::testinputfield() const {
  // @@protoc_insertion_point(field_get:InputB.testInputField)
  return _internal_testinputfield();
}
inline void InputB::set_testinputfield(::uint32_t value) {
  ;
  _internal_set_testinputfield(value);
  // @@protoc_insertion_point(field_set:InputB.testInputField)
}
inline ::uint32_t InputB::_internal_testinputfield() const {
  return _impl_.testinputfield_;
}
inline void InputB::_internal_set_testinputfield(::uint32_t value) {
  ;
  _impl_.testinputfield_ = value;
}

// -------------------------------------------------------------------

// Input

// .InputA a = 1;
inline bool Input::has_a() const {
  return value_case() == kA;
}
inline bool Input::_internal_has_a() const {
  return value_case() == kA;
}
inline void Input::set_has_a() {
  _impl_._oneof_case_[0] = kA;
}
inline void Input::clear_a() {
  if (value_case() == kA) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.a_;
    }
    clear_has_value();
  }
}
inline ::InputA* Input::release_a() {
  // @@protoc_insertion_point(field_release:Input.a)
  if (value_case() == kA) {
    clear_has_value();
    ::InputA* temp = _impl_.value_.a_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.a_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::InputA& Input::_internal_a() const {
  return value_case() == kA
      ? *_impl_.value_.a_
      : reinterpret_cast< ::InputA&>(::_InputA_default_instance_);
}
inline const ::InputA& Input::a() const {
  // @@protoc_insertion_point(field_get:Input.a)
  return _internal_a();
}
inline ::InputA* Input::unsafe_arena_release_a() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Input.a)
  if (value_case() == kA) {
    clear_has_value();
    ::InputA* temp = _impl_.value_.a_;
    _impl_.value_.a_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Input::unsafe_arena_set_allocated_a(::InputA* a) {
  clear_value();
  if (a) {
    set_has_a();
    _impl_.value_.a_ = a;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Input.a)
}
inline ::InputA* Input::_internal_mutable_a() {
  if (value_case() != kA) {
    clear_value();
    set_has_a();
    _impl_.value_.a_ = CreateMaybeMessage< ::InputA >(GetArenaForAllocation());
  }
  return _impl_.value_.a_;
}
inline ::InputA* Input::mutable_a() {
  ::InputA* _msg = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:Input.a)
  return _msg;
}

// .InputB b = 2;
inline bool Input::has_b() const {
  return value_case() == kB;
}
inline bool Input::_internal_has_b() const {
  return value_case() == kB;
}
inline void Input::set_has_b() {
  _impl_._oneof_case_[0] = kB;
}
inline void Input::clear_b() {
  if (value_case() == kB) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.b_;
    }
    clear_has_value();
  }
}
inline ::InputB* Input::release_b() {
  // @@protoc_insertion_point(field_release:Input.b)
  if (value_case() == kB) {
    clear_has_value();
    ::InputB* temp = _impl_.value_.b_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.b_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::InputB& Input::_internal_b() const {
  return value_case() == kB
      ? *_impl_.value_.b_
      : reinterpret_cast< ::InputB&>(::_InputB_default_instance_);
}
inline const ::InputB& Input::b() const {
  // @@protoc_insertion_point(field_get:Input.b)
  return _internal_b();
}
inline ::InputB* Input::unsafe_arena_release_b() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Input.b)
  if (value_case() == kB) {
    clear_has_value();
    ::InputB* temp = _impl_.value_.b_;
    _impl_.value_.b_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Input::unsafe_arena_set_allocated_b(::InputB* b) {
  clear_value();
  if (b) {
    set_has_b();
    _impl_.value_.b_ = b;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Input.b)
}
inline ::InputB* Input::_internal_mutable_b() {
  if (value_case() != kB) {
    clear_value();
    set_has_b();
    _impl_.value_.b_ = CreateMaybeMessage< ::InputB >(GetArenaForAllocation());
  }
  return _impl_.value_.b_;
}
inline ::InputB* Input::mutable_b() {
  ::InputB* _msg = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:Input.b)
  return _msg;
}

inline bool Input::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Input::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Input::ValueCase Input::value_case() const {
  return Input::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Output

// int32 testOutputField = 1;
inline void Output::clear_testoutputfield() {
  _impl_.testoutputfield_ = 0;
}
inline ::int32_t Output::testoutputfield() const {
  // @@protoc_insertion_point(field_get:Output.testOutputField)
  return _internal_testoutputfield();
}
inline void Output::set_testoutputfield(::int32_t value) {
  ;
  _internal_set_testoutputfield(value);
  // @@protoc_insertion_point(field_set:Output.testOutputField)
}
inline ::int32_t Output::_internal_testoutputfield() const {
  return _impl_.testoutputfield_;
}
inline void Output::_internal_set_testoutputfield(::int32_t value) {
  ;
  _impl_.testoutputfield_ = value;
}

// string secondField = 2;
inline void Output::clear_secondfield() {
  _impl_.secondfield_.ClearToEmpty();
}
inline const std::string& Output::secondfield() const {
  // @@protoc_insertion_point(field_get:Output.secondField)
  return _internal_secondfield();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Output::set_secondfield(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secondfield_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Output.secondField)
}
inline std::string* Output::mutable_secondfield() {
  std::string* _s = _internal_mutable_secondfield();
  // @@protoc_insertion_point(field_mutable:Output.secondField)
  return _s;
}
inline const std::string& Output::_internal_secondfield() const {
  return _impl_.secondfield_.Get();
}
inline void Output::_internal_set_secondfield(const std::string& value) {

  _impl_.secondfield_.Set(value, GetArenaForAllocation());
}
inline std::string* Output::_internal_mutable_secondfield() {

  return _impl_.secondfield_.Mutable(GetArenaForAllocation());
}
inline std::string* Output::release_secondfield() {
  // @@protoc_insertion_point(field_release:Output.secondField)
  return _impl_.secondfield_.Release();
}
inline void Output::set_allocated_secondfield(std::string* secondfield) {
  _impl_.secondfield_.SetAllocated(secondfield, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secondfield_.IsDefault()) {
    _impl_.secondfield_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Output.secondField)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_main_2eproto_2epb_2eh
