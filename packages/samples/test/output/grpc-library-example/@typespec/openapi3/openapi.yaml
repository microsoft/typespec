openapi: 3.0.0
info:
  title: Grpc Library sample
  version: 0000-00-00
tags:
  - name: LibraryService
paths:
  /v1/shelves:
    post:
      tags:
        - LibraryService
      operationId: LibraryService_createShelf
      description: Creates a shelf, and returns the new Shelf.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shelf'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
      requestBody:
        description: The shelf to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shelf'
    get:
      tags:
        - LibraryService
      operationId: LibraryService_listShelves
      description: |-
        Lists shelves. The order is unspecified but deterministic. Newly created
        shelves will not necessarily be added to the end of this list.
      parameters:
        - $ref: '#/components/parameters/ListRequestBase.page_size'
        - $ref: '#/components/parameters/ListRequestBase.page_token'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListShelvesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
  '/v1/shelves/shelf_name/books/{name}':
    get:
      tags:
        - LibraryService
      operationId: LibraryService_getBook
      description: Gets a book. Returns NOT_FOUND if the book does not exist.
      parameters:
        - $ref: '#/components/parameters/GetBookRequest'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
    delete:
      tags:
        - LibraryService
      operationId: LibraryService_deleteBook
      description: Deletes a book. Returns NOT_FOUND if the book does not exist.
      parameters:
        - $ref: '#/components/parameters/DeleteBookRequest'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
  '/v1/shelves/{name}':
    get:
      tags:
        - LibraryService
      operationId: LibraryService_getShelf
      description: Gets a shelf. Returns NOT_FOUND if the shelf does not exist.
      parameters:
        - $ref: '#/components/parameters/GetShelfRequest'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shelf'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
    delete:
      tags:
        - LibraryService
      operationId: LibraryService_deleteShelf
      description: Deletes a shelf. Returns NOT_FOUND if the shelf does not exist.
      parameters:
        - $ref: '#/components/parameters/DeleteShelfRequest'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
  '/v1/shelves/{name}/books':
    post:
      tags:
        - LibraryService
      operationId: LibraryService_createBook
      description: Creates a book, and returns the new Book.
      parameters:
        - $ref: '#/components/parameters/CreateBookRequest.name'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
      requestBody:
        description: The book to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
    get:
      tags:
        - LibraryService
      operationId: LibraryService_listBooks
      description: |-
        Lists books in a shelf. The order is unspecified but deterministic. Newly
        created books will not necessarily be added to the end of this list.
        Returns NOT_FOUND if the shelf does not exist.
      parameters:
        - $ref: '#/components/parameters/ListBooksRequest.name'
        - $ref: '#/components/parameters/ListRequestBase.page_size'
        - $ref: '#/components/parameters/ListRequestBase.page_token'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBooksResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
  '/v1/shelves/{name}:merge':
    post:
      tags:
        - LibraryService
      operationId: LibraryService_mergeShelves
      description: |-
        Merges two shelves by adding all books from the shelf named
        `other_shelf_name` to shelf `name`, and deletes
        `other_shelf_name`. Returns the updated shelf.
        The book ids of the moved books may not be the same as the original books.
        Returns NOT_FOUND if either shelf does not exist.
        This call is a no-op if the specified shelves are the same.
      parameters:
        - $ref: '#/components/parameters/MergeShelvesRequest.name'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shelf'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
      requestBody:
        description: The name of the shelf we're removing books from and deleting.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/shelf_name'
components:
  parameters:
    CreateBookRequest.name:
      name: name
      in: path
      required: true
      description: The name of the shelf in which the book is created.
      schema:
        type: string
        pattern: shelves/\w+
    DeleteBookRequest:
      name: name
      in: path
      required: true
      description: The name of the book to delete.
      schema:
        type: string
        pattern: shelves/\w+/books/\w+
    DeleteShelfRequest:
      name: name
      in: path
      required: true
      description: The name of the shelf to delete.
      schema:
        type: string
        pattern: shelves/\w+
    GetBookRequest:
      name: name
      in: path
      required: true
      description: The name of the book to retrieve.
      schema:
        type: string
        pattern: shelves/\w+/books/\w+
    GetShelfRequest:
      name: name
      in: path
      required: true
      description: The name of the shelf to retrieve.
      schema:
        type: string
        pattern: shelves/\w+
    ListBooksRequest.name:
      name: name
      in: path
      required: true
      description: The name of the shelf whose books we'd like to list.
      schema:
        type: string
        pattern: shelves/\w+
    ListRequestBase.page_size:
      name: page_size
      in: query
      required: false
      description: |-
        Requested page size. Server may return fewer shelves than requested.
        If unspecified, server will pick an appropriate default.
      schema:
        type: integer
        format: int32
    ListRequestBase.page_token:
      name: page_token
      in: query
      required: false
      description: |-
        A token identifying a page of results the server should return.
        Typically, this is the value of
        [ListShelvesResponse.next_page_token][google.example.library.v1.ListShelvesResponse.next_page_token]
        returned from the previous call to `ListShelves` method.
      schema:
        type: string
    MergeShelvesRequest.name:
      name: name
      in: path
      required: true
      description: The name of the shelf we're adding books to.
      schema:
        type: string
        pattern: shelves/\w+
  schemas:
    Book:
      type: object
      description: A single book in the library.
      required:
        - name
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/book_name'
          description: |-
            The resource name of the book.
            Book names have the form `shelves/{shelf_id}/books/{book_id}`.
            The name is ignored when creating a book.
        author:
          type: string
          description: The name of the book author.
        title:
          type: string
          description: The title of the book.
        read:
          type: boolean
          description: Value indicating whether the book has been read.
    CreateShelfRequest:
      type: object
      description: Request message for LibraryService.CreateShelf.
      required:
        - body
      properties:
        body:
          allOf:
            - $ref: '#/components/schemas/Shelf'
          description: The shelf to create.
    Empty:
      type: object
      description: No body returned
    ListBooksResponse:
      type: object
      description: Response message for LibraryService.ListBooks.
      required:
        - books
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
          description: The list of books.
        next_page_token:
          type: string
          description: |-
            A token to retrieve next page of results.
            Pass this value in the
            [ListShelvesRequest.page_token][google.example.library.v1.ListShelvesRequest.page_token]
            field in the subsequent call to `ListShelves` method to retrieve the next
            page of results.
    ListResponseBase:
      type: object
      properties:
        next_page_token:
          type: string
          description: |-
            A token to retrieve next page of results.
            Pass this value in the
            [ListShelvesRequest.page_token][google.example.library.v1.ListShelvesRequest.page_token]
            field in the subsequent call to `ListShelves` method to retrieve the next
            page of results.
    ListShelvesResponse:
      type: object
      description: Response message for LibraryService.ListShelves.
      required:
        - shelves
      properties:
        shelves:
          type: array
          items:
            $ref: '#/components/schemas/Shelf'
          description: The list of shelves.
        next_page_token:
          type: string
          description: |-
            A token to retrieve next page of results.
            Pass this value in the
            [ListShelvesRequest.page_token][google.example.library.v1.ListShelvesRequest.page_token]
            field in the subsequent call to `ListShelves` method to retrieve the next
            page of results.
    MoveBookRequest:
      type: object
      description: |-
        Describes what book to move (name) and what shelf we're moving it
        to (other_shelf_name).
      required:
        - name
        - other_shelf_name
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/book_name'
          description: The name of the book to move.
        other_shelf_name:
          allOf:
            - $ref: '#/components/schemas/shelf_name'
          description: The name of the destination shelf.
    ProtobufAny:
      type: object
      properties:
        typeUrl:
          type: string
        value:
          type: string
    RpcStatus:
      type: object
      description: An unexpected error response.
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/ProtobufAny'
    Shelf:
      type: object
      description: A Shelf contains a collection of books with a theme.
      required:
        - name
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/shelf_name'
          description: |-
            The resource name of the shelf.
            Shelf names have the form `shelves/{shelf_id}`.
            The name is ignored when creating a shelf.
        theme:
          type: string
          description: The theme of the shelf
    UpdateBookRequest:
      type: object
      description: Request message for LibraryService.UpdateBook.
      required:
        - name
        - book
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/book_name'
          description: The name of the book to update.
        book:
          allOf:
            - $ref: '#/components/schemas/Book'
          description: The book to update with. The name must match or be empty.
    book_name:
      type: string
      description: |-
        The name of a book.
        Book names have the form `shelves/{shelf_id}/books/{book_id}`
      pattern: shelves/\w+/books/\w+
    shelf_name:
      type: string
      description: |-
        The name of a shelf.
        Shelf names have the form `shelves/{shelf_id}`.
      pattern: shelves/\w+
