openapi: 3.0.0
info:
  title: Grpc Kiosk sample
  version: 0000-00-00
tags:
  - name: Display
paths:
  /v1/kiosks:
    post:
      tags:
        - Display
      operationId: Display_createKiosk
      description: Create a kiosk. This enrolls the kiosk for sign display.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kiosk'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kiosk'
    get:
      tags:
        - Display
      operationId: Display_listKiosks
      description: List active kiosks.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListKiosksResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
  /v1/kiosks/{id}:
    get:
      tags:
        - Display
      operationId: Display_getKiosk
      description: Get a kiosk.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kiosk'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
    delete:
      tags:
        - Display
      operationId: Display_deleteKiosk
      description: Delete a kiosk.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
  /v1/kiosks/{kiosk_id}/sign:
    get:
      tags:
        - Display
      operationId: Display_getSignIdForKioskId
      description: Get the sign that should be displayed on a kiosk.
      parameters:
        - name: kiosk_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSignIdResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
  /v1/signs:
    post:
      tags:
        - Display
      operationId: Display_createSign
      description: Create a sign. This enrolls the sign for sign display.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sign'
    get:
      tags:
        - Display
      operationId: Display_listSigns
      description: List active signs.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSignsResponse'
  /v1/signs/{id}:
    get:
      tags:
        - Display
      operationId: Display_getSign
      description: Get a sign.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
    delete:
      tags:
        - Display
      operationId: Display_deleteSign
      description: Delete a sign.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
  /v1/signs/{sign_id}:
    post:
      tags:
        - Display
      operationId: Display_setSignIdForKioskIds
      description: Set a sign for display on one or more kiosks.
      parameters:
        - $ref: '#/components/parameters/SetSignIdForKioskIdsRequest.sign_id'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RpcStatus'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
components:
  parameters:
    SetSignIdForKioskIdsRequest.sign_id:
      name: sign_id
      in: path
      required: true
      schema:
        type: integer
        format: int32
  schemas:
    GetSignIdForKioskIdRequest:
      type: object
      required:
        - kiosk_id
      properties:
        kiosk_id:
          type: integer
          format: int32
    GetSignIdResponse:
      type: object
      description: A successful response.
      properties:
        sign_id:
          type: integer
          format: int32
    Kiosk:
      type: object
      description: Describes a hardware device that can display signs.
      required:
        - name
        - size
        - location
      properties:
        id:
          type: integer
          format: int32
          description: unique id
        name:
          type: string
          description: name of device hardware
        size:
          allOf:
            - $ref: '#/components/schemas/ScreenSize'
          description: screen size
        location:
          allOf:
            - $ref: '#/components/schemas/LatLng'
          description: kiosk location
        create_time:
          $ref: '#/components/schemas/Timestamp'
    LatLng:
      type: object
      description: |-
        An object that represents a latitude/longitude pair. This is expressed as a
        pair of doubles to represent degrees latitude and degrees longitude. Unless
        specified otherwise, this must conform to the
        <a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf">WGS84
        standard</a>. Values must be within normalized ranges.
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
    ListKiosksResponse:
      type: object
      description: A successful response.
      properties:
        kiosks:
          type: array
          items:
            $ref: '#/components/schemas/Kiosk'
    ListSignsResponse:
      type: object
      description: A successful response.
      properties:
        signs:
          type: array
          items:
            $ref: '#/components/schemas/Sign'
    ProtobufAny:
      type: object
      properties:
        typeUrl:
          type: string
        value:
          type: string
    RpcStatus:
      type: object
      description: An unexpected error response.
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/ProtobufAny'
    ScreenSize:
      type: object
      description: Represents the size of a screen in pixels.
      required:
        - width
        - height
      properties:
        width:
          type: integer
          format: int32
        height:
          type: integer
          format: int32
    Sign:
      type: object
      description: |-
        Describes a digital sign.
        Signs can include text, images, or both.
      required:
        - name
        - text
        - image
      properties:
        id:
          type: integer
          format: int32
          description: unique id
        name:
          type: string
          description: name of sign
        text:
          type: string
          description: text to display
        image:
          type: string
          format: byte
          description: image to display
    Timestamp:
      type: object
      description: A timestamp
      required:
        - seconds
        - nanos
      properties:
        seconds:
          type: integer
          format: int64
        nanos:
          type: integer
          format: int32
