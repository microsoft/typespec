{
  "openapi": "3.1.0",
  "info": {
    "title": "TypeUnion",
    "description": "Describe scenarios for various combinations of unions.",
    "version": "0.0.0"
  },
  "tags": [],
  "paths": {
    "/type/union/enums-only": {
      "get": {
        "operationId": "EnumsOnly_get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prop": {
                      "$ref": "#/components/schemas/EnumsOnlyCases"
                    }
                  },
                  "required": ["prop"]
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "EnumsOnly_send",
        "parameters": [],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prop": {
                    "$ref": "#/components/schemas/EnumsOnlyCases"
                  }
                },
                "required": ["prop"]
              }
            }
          }
        }
      }
    },
    "/type/union/floats-only": {
      "get": {
        "operationId": "FloatsOnly_get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prop": {
                      "type": "number",
                      "enum": [1.1, 2.2, 3.3]
                    }
                  },
                  "required": ["prop"]
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "FloatsOnly_send",
        "parameters": [],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prop": {
                    "type": "number",
                    "enum": [1.1, 2.2, 3.3]
                  }
                },
                "required": ["prop"]
              }
            }
          }
        }
      }
    },
    "/type/union/ints-only": {
      "get": {
        "operationId": "IntsOnly_get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prop": {
                      "type": "number",
                      "enum": [1, 2, 3]
                    }
                  },
                  "required": ["prop"]
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "IntsOnly_send",
        "parameters": [],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prop": {
                    "type": "number",
                    "enum": [1, 2, 3]
                  }
                },
                "required": ["prop"]
              }
            }
          }
        }
      }
    },
    "/type/union/mixed-literals": {
      "get": {
        "operationId": "MixedLiterals_get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prop": {
                      "$ref": "#/components/schemas/MixedLiteralsCases"
                    }
                  },
                  "required": ["prop"]
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "MixedLiterals_send",
        "parameters": [],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prop": {
                    "$ref": "#/components/schemas/MixedLiteralsCases"
                  }
                },
                "required": ["prop"]
              }
            }
          }
        }
      }
    },
    "/type/union/mixed-types": {
      "get": {
        "operationId": "MixedTypes_get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prop": {
                      "$ref": "#/components/schemas/MixedTypesCases"
                    }
                  },
                  "required": ["prop"]
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "MixedTypes_send",
        "parameters": [],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prop": {
                    "$ref": "#/components/schemas/MixedTypesCases"
                  }
                },
                "required": ["prop"]
              }
            }
          }
        }
      }
    },
    "/type/union/models-only": {
      "get": {
        "operationId": "ModelsOnly_get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prop": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/Cat"
                        },
                        {
                          "$ref": "#/components/schemas/Dog"
                        }
                      ]
                    }
                  },
                  "required": ["prop"]
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "ModelsOnly_send",
        "parameters": [],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prop": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Cat"
                      },
                      {
                        "$ref": "#/components/schemas/Dog"
                      }
                    ]
                  }
                },
                "required": ["prop"]
              }
            }
          }
        }
      }
    },
    "/type/union/string-and-array": {
      "get": {
        "operationId": "StringAndArray_get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prop": {
                      "$ref": "#/components/schemas/StringAndArrayCases"
                    }
                  },
                  "required": ["prop"]
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "StringAndArray_send",
        "parameters": [],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prop": {
                    "$ref": "#/components/schemas/StringAndArrayCases"
                  }
                },
                "required": ["prop"]
              }
            }
          }
        }
      }
    },
    "/type/union/string-extensible": {
      "get": {
        "operationId": "StringExtensible_get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prop": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "string",
                          "enum": ["b", "c"]
                        }
                      ]
                    }
                  },
                  "required": ["prop"]
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "StringExtensible_send",
        "parameters": [],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prop": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "enum": ["b", "c"]
                      }
                    ]
                  }
                },
                "required": ["prop"]
              }
            }
          }
        }
      }
    },
    "/type/union/string-extensible-named": {
      "get": {
        "operationId": "StringExtensibleNamed_get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prop": {
                      "$ref": "#/components/schemas/StringExtensibleNamedUnion"
                    }
                  },
                  "required": ["prop"]
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "StringExtensibleNamed_send",
        "parameters": [],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prop": {
                    "$ref": "#/components/schemas/StringExtensibleNamedUnion"
                  }
                },
                "required": ["prop"]
              }
            }
          }
        }
      }
    },
    "/type/union/strings-only": {
      "get": {
        "operationId": "StringsOnly_get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prop": {
                      "type": "string",
                      "enum": ["a", "b", "c"]
                    }
                  },
                  "required": ["prop"]
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "StringsOnly_send",
        "parameters": [],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prop": {
                    "type": "string",
                    "enum": ["a", "b", "c"]
                  }
                },
                "required": ["prop"]
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Cat": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Dog": {
        "type": "object",
        "required": ["bark"],
        "properties": {
          "bark": {
            "type": "string"
          }
        }
      },
      "EnumsOnlyCases": {
        "type": "object",
        "required": ["lr", "ud"],
        "properties": {
          "lr": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LR"
              },
              {
                "$ref": "#/components/schemas/UD"
              }
            ],
            "description": "This should be receive/send the left variant"
          },
          "ud": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UD"
              },
              {
                "$ref": "#/components/schemas/UD"
              }
            ],
            "description": "This should be receive/send the up variant"
          }
        }
      },
      "LR": {
        "type": "string",
        "enum": ["left", "right"]
      },
      "MixedLiteralsCases": {
        "type": "object",
        "required": ["stringLiteral", "intLiteral", "floatLiteral", "booleanLiteral"],
        "properties": {
          "stringLiteral": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["a"]
              },
              {
                "type": "number",
                "enum": [2, 3.3]
              },
              {
                "type": "boolean",
                "enum": [true]
              }
            ],
            "description": "This should be receive/send the \"a\" variant"
          },
          "intLiteral": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["a"]
              },
              {
                "type": "number",
                "enum": [2, 3.3]
              },
              {
                "type": "boolean",
                "enum": [true]
              }
            ],
            "description": "This should be receive/send the 2 variant"
          },
          "floatLiteral": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["a"]
              },
              {
                "type": "number",
                "enum": [2, 3.3]
              },
              {
                "type": "boolean",
                "enum": [true]
              }
            ],
            "description": "This should be receive/send the 3.3 variant"
          },
          "booleanLiteral": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["a"]
              },
              {
                "type": "number",
                "enum": [2, 3.3]
              },
              {
                "type": "boolean",
                "enum": [true]
              }
            ],
            "description": "This should be receive/send the true variant"
          }
        }
      },
      "MixedTypesCases": {
        "type": "object",
        "required": ["model", "literal", "int", "boolean", "array"],
        "properties": {
          "model": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Cat"
              },
              {
                "type": "string",
                "enum": ["a"]
              },
              {
                "type": "integer",
                "format": "int32"
              },
              {
                "type": "boolean"
              }
            ],
            "description": "This should be receive/send the Cat variant"
          },
          "literal": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Cat"
              },
              {
                "type": "string",
                "enum": ["a"]
              },
              {
                "type": "integer",
                "format": "int32"
              },
              {
                "type": "boolean"
              }
            ],
            "description": "This should be receive/send the \"a\" variant"
          },
          "int": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Cat"
              },
              {
                "type": "string",
                "enum": ["a"]
              },
              {
                "type": "integer",
                "format": "int32"
              },
              {
                "type": "boolean"
              }
            ],
            "description": "This should be receive/send the int variant"
          },
          "boolean": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Cat"
              },
              {
                "type": "string",
                "enum": ["a"]
              },
              {
                "type": "integer",
                "format": "int32"
              },
              {
                "type": "boolean"
              }
            ],
            "description": "This should be receive/send the boolean variant"
          },
          "array": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Cat"
                },
                {
                  "type": "string",
                  "enum": ["a"]
                },
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "description": "This should be receive/send 4 element with Cat, \"a\", int, and boolean"
          }
        }
      },
      "StringAndArrayCases": {
        "type": "object",
        "required": ["string", "array"],
        "properties": {
          "string": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "This should be receive/send the string variant"
          },
          "array": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "This should be receive/send the array variant"
          }
        }
      },
      "StringExtensibleNamedUnion": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": ["b", "c"]
          }
        ]
      },
      "UD": {
        "type": "string",
        "enum": ["up", "down"]
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "TestServer endpoint",
      "variables": {}
    }
  ]
}
