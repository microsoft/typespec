// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using httpInfrastructure_LowLevel;

namespace httpInfrastructure_LowLevel.Tests
{
    public partial class HttpServerFailureClientTests : httpInfrastructure_LowLevelTestBase
    {
        public HttpServerFailureClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Head501_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            HttpServerFailureClient client = CreateHttpServerFailureClient(endpoint, credential);

            Response response = await client.Head501Async();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Head501_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            HttpServerFailureClient client = CreateHttpServerFailureClient(endpoint, credential);

            Response response = await client.Head501Async();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Get501_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            HttpServerFailureClient client = CreateHttpServerFailureClient(endpoint, credential);

            Response response = await client.Get501Async();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Get501_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            HttpServerFailureClient client = CreateHttpServerFailureClient(endpoint, credential);

            Response response = await client.Get501Async();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Post505_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            HttpServerFailureClient client = CreateHttpServerFailureClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.Post505Async(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Post505_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            HttpServerFailureClient client = CreateHttpServerFailureClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("true");
            Response response = await client.Post505Async(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Delete505_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            HttpServerFailureClient client = CreateHttpServerFailureClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.Delete505Async(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Delete505_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            HttpServerFailureClient client = CreateHttpServerFailureClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("true");
            Response response = await client.Delete505Async(content);
        }
    }
}
