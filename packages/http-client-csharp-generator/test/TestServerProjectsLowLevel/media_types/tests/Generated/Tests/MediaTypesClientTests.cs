// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using media_types_LowLevel;

namespace media_types_LowLevel.Tests
{
    public partial class MediaTypesClientTests : media_types_LowLevelTestBase
    {
        public MediaTypesClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AnalyzeBody_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MediaTypesClient client = CreateMediaTypesClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.AnalyzeBodyAsync(content, new ContentType("application/pdf"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AnalyzeBody_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MediaTypesClient client = CreateMediaTypesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.AnalyzeBodyAsync(content, new ContentType("application/pdf"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AnalyzeBodyNoAcceptHeader_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MediaTypesClient client = CreateMediaTypesClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.AnalyzeBodyNoAcceptHeaderAsync(content, new ContentType("application/pdf"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AnalyzeBodyNoAcceptHeader_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MediaTypesClient client = CreateMediaTypesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.AnalyzeBodyNoAcceptHeaderAsync(content, new ContentType("application/pdf"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ContentTypeWithEncoding_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MediaTypesClient client = CreateMediaTypesClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.ContentTypeWithEncodingAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ContentTypeWithEncoding_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MediaTypesClient client = CreateMediaTypesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("<input>");
            Response response = await client.ContentTypeWithEncodingAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task BinaryBodyWithTwoContentTypes_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MediaTypesClient client = CreateMediaTypesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.BinaryBodyWithTwoContentTypesAsync(content, new ContentType("application/json"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task BinaryBodyWithTwoContentTypes_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MediaTypesClient client = CreateMediaTypesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.BinaryBodyWithTwoContentTypesAsync(content, new ContentType("application/json"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task BinaryBodyWithThreeContentTypes_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MediaTypesClient client = CreateMediaTypesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.BinaryBodyWithThreeContentTypesAsync(content, new ContentType("application/json"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task BinaryBodyWithThreeContentTypes_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MediaTypesClient client = CreateMediaTypesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.BinaryBodyWithThreeContentTypesAsync(content, new ContentType("application/json"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task BodyThreeTypes_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MediaTypesClient client = CreateMediaTypesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.BodyThreeTypesAsync(content, new ContentType("application/octet-stream"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task BodyThreeTypes_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MediaTypesClient client = CreateMediaTypesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.BodyThreeTypesAsync(content, new ContentType("application/octet-stream"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PutTextAndJsonBody_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MediaTypesClient client = CreateMediaTypesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("<message>");
            Response response = await client.PutTextAndJsonBodyAsync(content, new ContentType("application/json"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PutTextAndJsonBody_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MediaTypesClient client = CreateMediaTypesClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("<message>");
            Response response = await client.PutTextAndJsonBodyAsync(content, new ContentType("application/json"));
        }
    }
}
