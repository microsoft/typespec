// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using body_string_LowLevel;

namespace body_string_LowLevel.Tests
{
    public partial class EnumClientTests : body_string_LowLevelTestBase
    {
        public EnumClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetNotExpandable_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EnumClient client = CreateEnumClient(endpoint, credential);

            Response response = await client.GetNotExpandableAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetNotExpandable_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EnumClient client = CreateEnumClient(endpoint, credential);

            Response response = await client.GetNotExpandableAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PutNotExpandable_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EnumClient client = CreateEnumClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("red color");
            Response response = await client.PutNotExpandableAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PutNotExpandable_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EnumClient client = CreateEnumClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("red color");
            Response response = await client.PutNotExpandableAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetReferenced_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EnumClient client = CreateEnumClient(endpoint, credential);

            Response response = await client.GetReferencedAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetReferenced_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EnumClient client = CreateEnumClient(endpoint, credential);

            Response response = await client.GetReferencedAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PutReferenced_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EnumClient client = CreateEnumClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("red color");
            Response response = await client.PutReferencedAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PutReferenced_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EnumClient client = CreateEnumClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("red color");
            Response response = await client.PutReferencedAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetReferencedConstant_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EnumClient client = CreateEnumClient(endpoint, credential);

            Response response = await client.GetReferencedConstantAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetReferencedConstant_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EnumClient client = CreateEnumClient(endpoint, credential);

            Response response = await client.GetReferencedConstantAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PutReferencedConstant_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EnumClient client = CreateEnumClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                ColorConstant = "green-color",
            });
            Response response = await client.PutReferencedConstantAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task PutReferencedConstant_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EnumClient client = CreateEnumClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                ColorConstant = "green-color",
                field1 = "<field1>",
            });
            Response response = await client.PutReferencedConstantAsync(content);
        }
    }
}
