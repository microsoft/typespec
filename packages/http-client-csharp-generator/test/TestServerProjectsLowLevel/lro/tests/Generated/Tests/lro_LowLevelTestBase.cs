// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure;
using Azure.Core.TestFramework;
using lro_LowLevel;

namespace lro_LowLevel.Tests
{
    public partial class lro_LowLevelTestBase : RecordedTestBase<lro_LowLevelTestEnvironment>
    {
        public lro_LowLevelTestBase(bool isAsync) : base(isAsync)
        {
        }

        protected LROsClient CreateLROsClient(Uri endpoint, AzureKeyCredential credential)
        {
            AutoRestLongRunningOperationTestServiceClientOptions options = InstrumentClientOptions(new AutoRestLongRunningOperationTestServiceClientOptions());
            LROsClient client = new LROsClient(endpoint, credential, options);
            return InstrumentClient(client);
        }

        protected LRORetrysClient CreateLRORetrysClient(Uri endpoint, AzureKeyCredential credential)
        {
            AutoRestLongRunningOperationTestServiceClientOptions options = InstrumentClientOptions(new AutoRestLongRunningOperationTestServiceClientOptions());
            LRORetrysClient client = new LRORetrysClient(endpoint, credential, options);
            return InstrumentClient(client);
        }

        protected LrosaDsClient CreateLrosaDsClient(Uri endpoint, AzureKeyCredential credential)
        {
            AutoRestLongRunningOperationTestServiceClientOptions options = InstrumentClientOptions(new AutoRestLongRunningOperationTestServiceClientOptions());
            LrosaDsClient client = new LrosaDsClient(endpoint, credential, options);
            return InstrumentClient(client);
        }

        protected LROsCustomHeaderClient CreateLROsCustomHeaderClient(Uri endpoint, AzureKeyCredential credential)
        {
            AutoRestLongRunningOperationTestServiceClientOptions options = InstrumentClientOptions(new AutoRestLongRunningOperationTestServiceClientOptions());
            LROsCustomHeaderClient client = new LROsCustomHeaderClient(endpoint, credential, options);
            return InstrumentClient(client);
        }
    }
}
