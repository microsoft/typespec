import "../common/models.tsp";

namespace OpenAI;
using TypeSpec.OpenAPI;

alias SharedImageProperties = {
  /** The number of images to generate. Must be between 1 and 10. */
  n?: ImagesN | null = 1;

  /** The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`. */
  size?: IMAGE_SIZES | null = "1024x1024";

  /** The format in which the generated images are returned. Must be one of `url` or `b64_json`. */
  response_format?: "url" | "b64_json" | null = "url";

  user?: User;
};

model CreateImageRequest {
  /** A text description of the desired image(s). The maximum length is 1000 characters. */
  prompt: string;

  ...SharedImageProperties;
}

model ImagesResponse {
  @encode("unixTimestamp", int32)
  created: utcDateTime;

  data: Image[];
}

alias IMAGE_SIZES = "256x256" | "512x512" | "1024x1024";

/** Represents the url or the content of an image generated by the OpenAI API. */
model Image {
  /** The URL of the generated image, if `response_format` is `url` (default). */
  url?: url;

  /** The base64-encoded JSON of the generated image, if `response_format` is `b64_json`. */
  @encode("base64", string)
  b64_json?: bytes;
}

model CreateImageEditRequest {
  /** A text description of the desired image(s). The maximum length is 1000 characters. */
  prompt: string;

  /**
   * The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not
   * provided, image must have transparency, which will be used as the mask.
   */
  image: bytes;

  /**
   *  An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where
   * `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions
   * as `image`.
   */
  mask?: bytes;

  ...SharedImageProperties;
}

model CreateImageVariationRequest {
  /**
   * The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB,
   * and square.
   */
  image: bytes;

  ...SharedImageProperties;
}

@minValue(1)
@maxValue(10)
scalar ImagesN extends safeint;
