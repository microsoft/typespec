// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Internal;
using System.ClientModel.Primitives;
using System.ClientModel.Primitives.Pipeline;
using System.Threading;
using System.Threading.Tasks;
using OpenAI.Models;

namespace OpenAI
{
    // Data plane generated sub-client.
    /// <summary> The FineTunes sub-client. </summary>
    public partial class FineTunes
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly KeyCredential _keyCredential;
        private const string AuthorizationApiKeyPrefix = "Bearer";
        private readonly MessagePipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal TelemetrySource ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual MessagePipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of FineTunes for mocking. </summary>
        protected FineTunes()
        {
        }

        /// <summary> Initializes a new instance of FineTunes. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        /// <param name="endpoint"> OpenAI Endpoint. </param>
        internal FineTunes(TelemetrySource clientDiagnostics, MessagePipeline pipeline, KeyCredential keyCredential, Uri endpoint)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _endpoint = endpoint;
        }

        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.
        ///
        /// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
        ///
        /// [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
        /// </summary>
        /// <param name="fineTune"> The <see cref="CreateFineTuneRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fineTune"/> is null. </exception>
        [Obsolete("deprecated")]
        public virtual async Task<Result<FineTune>> CreateAsync(CreateFineTuneRequest fineTune, CancellationToken cancellationToken = default)
        {
            if (fineTune == null)
            {
                throw new ArgumentNullException(nameof(fineTune));
            }

            RequestOptions context = FromCancellationToken(cancellationToken);
            using RequestBody content = fineTune.ToRequestBody();
            Result result = await CreateAsync(content, context).ConfigureAwait(false);
            return Result.FromValue(FineTune.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.
        ///
        /// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
        ///
        /// [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
        /// </summary>
        /// <param name="fineTune"> The <see cref="CreateFineTuneRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fineTune"/> is null. </exception>
        [Obsolete("deprecated")]
        public virtual Result<FineTune> Create(CreateFineTuneRequest fineTune, CancellationToken cancellationToken = default)
        {
            if (fineTune == null)
            {
                throw new ArgumentNullException(nameof(fineTune));
            }

            RequestOptions context = FromCancellationToken(cancellationToken);
            using RequestBody content = fineTune.ToRequestBody();
            Result result = Create(content, context);
            return Result.FromValue(FineTune.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Creates a job that fine-tunes a specified model from a given dataset.
        ///
        /// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
        ///
        /// [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateAsync(CreateFineTuneRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        [Obsolete("deprecated")]
        public virtual async Task<Result> CreateAsync(RequestBody content, RequestOptions context = null)
        {
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateSpan("FineTunes.Create");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateCreateRequest(content, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates a job that fine-tunes a specified model from a given dataset.
        ///
        /// Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
        ///
        /// [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Create(CreateFineTuneRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        [Obsolete("deprecated")]
        public virtual Result Create(RequestBody content, RequestOptions context = null)
        {
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateSpan("FineTunes.Create");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateCreateRequest(content, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List your organization's fine-tuning jobs. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [Obsolete("deprecated")]
        public virtual async Task<Result<ListFineTunesResponse>> GetFineTunesAsync(CancellationToken cancellationToken = default)
        {
            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = await GetFineTunesAsync(context).ConfigureAwait(false);
            return Result.FromValue(ListFineTunesResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> List your organization's fine-tuning jobs. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [Obsolete("deprecated")]
        public virtual Result<ListFineTunesResponse> GetFineTunes(CancellationToken cancellationToken = default)
        {
            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = GetFineTunes(context);
            return Result.FromValue(ListFineTunesResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] List your organization's fine-tuning jobs
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFineTunesAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        [Obsolete("deprecated")]
        public virtual async Task<Result> GetFineTunesAsync(RequestOptions context)
        {
            using var scope = ClientDiagnostics.CreateSpan("FineTunes.GetFineTunes");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetFineTunesRequest(context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] List your organization's fine-tuning jobs
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFineTunes(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        [Obsolete("deprecated")]
        public virtual Result GetFineTunes(RequestOptions context)
        {
            using var scope = ClientDiagnostics.CreateSpan("FineTunes.GetFineTunes");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetFineTunesRequest(context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets info about the fine-tune job.
        ///
        /// [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
        /// </summary>
        /// <param name="fineTuneId"> The ID of the fine-tune job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fineTuneId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="fineTuneId"/> is an empty string, and was expected to be non-empty. </exception>
        [Obsolete("deprecated")]
        public virtual async Task<Result<FineTune>> RetrieveAsync(string fineTuneId, CancellationToken cancellationToken = default)
        {
            if (fineTuneId == null)
            {
                throw new ArgumentNullException(nameof(fineTuneId));
            }
            if (fineTuneId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(fineTuneId));
            }

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = await RetrieveAsync(fineTuneId, context).ConfigureAwait(false);
            return Result.FromValue(FineTune.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// Gets info about the fine-tune job.
        ///
        /// [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
        /// </summary>
        /// <param name="fineTuneId"> The ID of the fine-tune job. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fineTuneId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="fineTuneId"/> is an empty string, and was expected to be non-empty. </exception>
        [Obsolete("deprecated")]
        public virtual Result<FineTune> Retrieve(string fineTuneId, CancellationToken cancellationToken = default)
        {
            if (fineTuneId == null)
            {
                throw new ArgumentNullException(nameof(fineTuneId));
            }
            if (fineTuneId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(fineTuneId));
            }

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = Retrieve(fineTuneId, context);
            return Result.FromValue(FineTune.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Gets info about the fine-tune job.
        ///
        /// [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="RetrieveAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="fineTuneId"> The ID of the fine-tune job. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fineTuneId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="fineTuneId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        [Obsolete("deprecated")]
        public virtual async Task<Result> RetrieveAsync(string fineTuneId, RequestOptions context)
        {
            if (fineTuneId == null)
            {
                throw new ArgumentNullException(nameof(fineTuneId));
            }
            if (fineTuneId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(fineTuneId));
            }

            using var scope = ClientDiagnostics.CreateSpan("FineTunes.Retrieve");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateRetrieveRequest(fineTuneId, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets info about the fine-tune job.
        ///
        /// [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Retrieve(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="fineTuneId"> The ID of the fine-tune job. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fineTuneId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="fineTuneId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        [Obsolete("deprecated")]
        public virtual Result Retrieve(string fineTuneId, RequestOptions context)
        {
            if (fineTuneId == null)
            {
                throw new ArgumentNullException(nameof(fineTuneId));
            }
            if (fineTuneId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(fineTuneId));
            }

            using var scope = ClientDiagnostics.CreateSpan("FineTunes.Retrieve");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateRetrieveRequest(fineTuneId, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get fine-grained status updates for a fine-tune job. </summary>
        /// <param name="fineTuneId"> The ID of the fine-tune job to get events for. </param>
        /// <param name="stream">
        /// Whether to stream events for the fine-tune job. If set to true, events will be sent as
        /// data-only
        /// [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
        /// as they become available. The stream will terminate with a `data: [DONE]` message when the
        /// job is finished (succeeded, cancelled, or failed).
        ///
        /// If set to false, only events generated so far will be returned.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fineTuneId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="fineTuneId"/> is an empty string, and was expected to be non-empty. </exception>
        [Obsolete("deprecated")]
        public virtual async Task<Result<ListFineTuneEventsResponse>> GetEventsAsync(string fineTuneId, bool? stream = null, CancellationToken cancellationToken = default)
        {
            if (fineTuneId == null)
            {
                throw new ArgumentNullException(nameof(fineTuneId));
            }
            if (fineTuneId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(fineTuneId));
            }

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = await GetEventsAsync(fineTuneId, stream, context).ConfigureAwait(false);
            return Result.FromValue(ListFineTuneEventsResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Get fine-grained status updates for a fine-tune job. </summary>
        /// <param name="fineTuneId"> The ID of the fine-tune job to get events for. </param>
        /// <param name="stream">
        /// Whether to stream events for the fine-tune job. If set to true, events will be sent as
        /// data-only
        /// [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
        /// as they become available. The stream will terminate with a `data: [DONE]` message when the
        /// job is finished (succeeded, cancelled, or failed).
        ///
        /// If set to false, only events generated so far will be returned.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fineTuneId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="fineTuneId"/> is an empty string, and was expected to be non-empty. </exception>
        [Obsolete("deprecated")]
        public virtual Result<ListFineTuneEventsResponse> GetEvents(string fineTuneId, bool? stream = null, CancellationToken cancellationToken = default)
        {
            if (fineTuneId == null)
            {
                throw new ArgumentNullException(nameof(fineTuneId));
            }
            if (fineTuneId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(fineTuneId));
            }

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = GetEvents(fineTuneId, stream, context);
            return Result.FromValue(ListFineTuneEventsResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Get fine-grained status updates for a fine-tune job.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetEventsAsync(string,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="fineTuneId"> The ID of the fine-tune job to get events for. </param>
        /// <param name="stream">
        /// Whether to stream events for the fine-tune job. If set to true, events will be sent as
        /// data-only
        /// [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
        /// as they become available. The stream will terminate with a `data: [DONE]` message when the
        /// job is finished (succeeded, cancelled, or failed).
        ///
        /// If set to false, only events generated so far will be returned.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fineTuneId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="fineTuneId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        [Obsolete("deprecated")]
        public virtual async Task<Result> GetEventsAsync(string fineTuneId, bool? stream, RequestOptions context)
        {
            if (fineTuneId == null)
            {
                throw new ArgumentNullException(nameof(fineTuneId));
            }
            if (fineTuneId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(fineTuneId));
            }

            using var scope = ClientDiagnostics.CreateSpan("FineTunes.GetEvents");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetEventsRequest(fineTuneId, stream, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get fine-grained status updates for a fine-tune job.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetEvents(string,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="fineTuneId"> The ID of the fine-tune job to get events for. </param>
        /// <param name="stream">
        /// Whether to stream events for the fine-tune job. If set to true, events will be sent as
        /// data-only
        /// [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
        /// as they become available. The stream will terminate with a `data: [DONE]` message when the
        /// job is finished (succeeded, cancelled, or failed).
        ///
        /// If set to false, only events generated so far will be returned.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fineTuneId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="fineTuneId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        [Obsolete("deprecated")]
        public virtual Result GetEvents(string fineTuneId, bool? stream, RequestOptions context)
        {
            if (fineTuneId == null)
            {
                throw new ArgumentNullException(nameof(fineTuneId));
            }
            if (fineTuneId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(fineTuneId));
            }

            using var scope = ClientDiagnostics.CreateSpan("FineTunes.GetEvents");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateGetEventsRequest(fineTuneId, stream, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Immediately cancel a fine-tune job. </summary>
        /// <param name="fineTuneId"> The ID of the fine-tune job to cancel. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fineTuneId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="fineTuneId"/> is an empty string, and was expected to be non-empty. </exception>
        [Obsolete("deprecated")]
        public virtual async Task<Result<FineTune>> CancelAsync(string fineTuneId, CancellationToken cancellationToken = default)
        {
            if (fineTuneId == null)
            {
                throw new ArgumentNullException(nameof(fineTuneId));
            }
            if (fineTuneId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(fineTuneId));
            }

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = await CancelAsync(fineTuneId, context).ConfigureAwait(false);
            return Result.FromValue(FineTune.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Immediately cancel a fine-tune job. </summary>
        /// <param name="fineTuneId"> The ID of the fine-tune job to cancel. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fineTuneId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="fineTuneId"/> is an empty string, and was expected to be non-empty. </exception>
        [Obsolete("deprecated")]
        public virtual Result<FineTune> Cancel(string fineTuneId, CancellationToken cancellationToken = default)
        {
            if (fineTuneId == null)
            {
                throw new ArgumentNullException(nameof(fineTuneId));
            }
            if (fineTuneId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(fineTuneId));
            }

            RequestOptions context = FromCancellationToken(cancellationToken);
            Result result = Cancel(fineTuneId, context);
            return Result.FromValue(FineTune.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Immediately cancel a fine-tune job.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CancelAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="fineTuneId"> The ID of the fine-tune job to cancel. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fineTuneId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="fineTuneId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        [Obsolete("deprecated")]
        public virtual async Task<Result> CancelAsync(string fineTuneId, RequestOptions context)
        {
            if (fineTuneId == null)
            {
                throw new ArgumentNullException(nameof(fineTuneId));
            }
            if (fineTuneId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(fineTuneId));
            }

            using var scope = ClientDiagnostics.CreateSpan("FineTunes.Cancel");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateCancelRequest(fineTuneId, context);
                return Result.FromResponse(await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Immediately cancel a fine-tune job.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Cancel(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="fineTuneId"> The ID of the fine-tune job to cancel. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fineTuneId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="fineTuneId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="MessageFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        [Obsolete("deprecated")]
        public virtual Result Cancel(string fineTuneId, RequestOptions context)
        {
            if (fineTuneId == null)
            {
                throw new ArgumentNullException(nameof(fineTuneId));
            }
            if (fineTuneId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(fineTuneId));
            }

            using var scope = ClientDiagnostics.CreateSpan("FineTunes.Cancel");
            scope.Start();
            try
            {
                using PipelineMessage message = CreateCancelRequest(fineTuneId, context);
                return Result.FromResponse(_pipeline.ProcessMessage(message, context));
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal PipelineMessage CreateCreateRequest(RequestBody content, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("POST");
            var uri = new RequestUri();
            uri.Reset(_endpoint);
            uri.AppendPath("/fine-tunes", false);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            request.SetHeaderValue("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal PipelineMessage CreateGetFineTunesRequest(RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.Reset(_endpoint);
            uri.AppendPath("/fine-tunes", false);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        internal PipelineMessage CreateRetrieveRequest(string fineTuneId, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.Reset(_endpoint);
            uri.AppendPath("/fine-tunes/", false);
            uri.AppendPath(fineTuneId, true);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        internal PipelineMessage CreateGetEventsRequest(string fineTuneId, bool? stream, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("GET");
            var uri = new RequestUri();
            uri.Reset(_endpoint);
            uri.AppendPath("/fine-tunes/", false);
            uri.AppendPath(fineTuneId, true);
            uri.AppendPath("/events", false);
            if (stream != null)
            {
                uri.AppendQuery("stream", stream.Value, true);
            }
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        internal PipelineMessage CreateCancelRequest(string fineTuneId, RequestOptions context)
        {
            var message = _pipeline.CreateMessage(context, ResponseErrorClassifier200);
            var request = message.Request;
            request.SetMethod("POST");
            var uri = new RequestUri();
            uri.Reset(_endpoint);
            uri.AppendPath("/fine-tunes/", false);
            uri.AppendPath(fineTuneId, true);
            uri.AppendPath("/cancel", false);
            request.Uri = uri.ToUri();
            request.SetHeaderValue("Accept", "application/json");
            return message;
        }

        private static RequestOptions DefaultRequestContext = new RequestOptions();
        internal static RequestOptions FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestOptions() { CancellationToken = cancellationToken };
        }

        private static ResponseErrorClassifier _responseErrorClassifier200;
        private static ResponseErrorClassifier ResponseErrorClassifier200 => _responseErrorClassifier200 ??= new StatusResponseClassifier(stackalloc ushort[] { 200 });
    }
}
