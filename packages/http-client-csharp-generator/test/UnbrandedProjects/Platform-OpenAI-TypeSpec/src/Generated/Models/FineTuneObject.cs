// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace OpenAI.Models
{
    /// <summary> The FineTune_object. </summary>
    public readonly partial struct FineTuneObject : IEquatable<FineTuneObject>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FineTuneObject"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FineTuneObject(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FineTuneValue = "fine-tune";

        /// <summary> fine-tune. </summary>
        public static FineTuneObject FineTune { get; } = new FineTuneObject(FineTuneValue);
        /// <summary> Determines if two <see cref="FineTuneObject"/> values are the same. </summary>
        public static bool operator ==(FineTuneObject left, FineTuneObject right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FineTuneObject"/> values are not the same. </summary>
        public static bool operator !=(FineTuneObject left, FineTuneObject right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FineTuneObject"/>. </summary>
        public static implicit operator FineTuneObject(string value) => new FineTuneObject(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FineTuneObject other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FineTuneObject other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
