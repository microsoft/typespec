// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace httpInfrastructure
{
    internal partial class HttpRetryRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of HttpRetryRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public HttpRetryRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("http://localhost:3000");
        }

        internal HttpMessage CreateHead408Request()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/http/retry/408", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Return 408 status code, then 200 after retry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> Head408Async(CancellationToken cancellationToken = default)
        {
            using var message = CreateHead408Request();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Return 408 status code, then 200 after retry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response Head408(CancellationToken cancellationToken = default)
        {
            using var message = CreateHead408Request();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePut500Request(bool? booleanValue)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/http/retry/500", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (booleanValue != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteBooleanValue(booleanValue.Value);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Return 500 status code, then 200 after retry. </summary>
        /// <param name="booleanValue"> Simple boolean value true. The default value is True. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> Put500Async(bool? booleanValue = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePut500Request(booleanValue);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Return 500 status code, then 200 after retry. </summary>
        /// <param name="booleanValue"> Simple boolean value true. The default value is True. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response Put500(bool? booleanValue = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePut500Request(booleanValue);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePatch500Request(bool? booleanValue)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/http/retry/500", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (booleanValue != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteBooleanValue(booleanValue.Value);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Return 500 status code, then 200 after retry. </summary>
        /// <param name="booleanValue"> Simple boolean value true. The default value is True. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> Patch500Async(bool? booleanValue = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePatch500Request(booleanValue);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Return 500 status code, then 200 after retry. </summary>
        /// <param name="booleanValue"> Simple boolean value true. The default value is True. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response Patch500(bool? booleanValue = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePatch500Request(booleanValue);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGet502Request()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/http/retry/502", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Return 502 status code, then 200 after retry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> Get502Async(CancellationToken cancellationToken = default)
        {
            using var message = CreateGet502Request();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Return 502 status code, then 200 after retry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response Get502(CancellationToken cancellationToken = default)
        {
            using var message = CreateGet502Request();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOptions502Request()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Options;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/http/retry/502", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Return 502 status code, then 200 after retry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<bool>> Options502Async(CancellationToken cancellationToken = default)
        {
            using var message = CreateOptions502Request();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        bool value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = document.RootElement.GetBoolean();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Return 502 status code, then 200 after retry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<bool> Options502(CancellationToken cancellationToken = default)
        {
            using var message = CreateOptions502Request();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        bool value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = document.RootElement.GetBoolean();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePost503Request(bool? booleanValue)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/http/retry/503", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (booleanValue != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteBooleanValue(booleanValue.Value);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Return 503 status code, then 200 after retry. </summary>
        /// <param name="booleanValue"> Simple boolean value true. The default value is True. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> Post503Async(bool? booleanValue = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePost503Request(booleanValue);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Return 503 status code, then 200 after retry. </summary>
        /// <param name="booleanValue"> Simple boolean value true. The default value is True. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response Post503(bool? booleanValue = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePost503Request(booleanValue);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDelete503Request(bool? booleanValue)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/http/retry/503", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (booleanValue != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteBooleanValue(booleanValue.Value);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Return 503 status code, then 200 after retry. </summary>
        /// <param name="booleanValue"> Simple boolean value true. The default value is True. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> Delete503Async(bool? booleanValue = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateDelete503Request(booleanValue);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Return 503 status code, then 200 after retry. </summary>
        /// <param name="booleanValue"> Simple boolean value true. The default value is True. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response Delete503(bool? booleanValue = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateDelete503Request(booleanValue);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePut504Request(bool? booleanValue)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/http/retry/504", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (booleanValue != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteBooleanValue(booleanValue.Value);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Return 504 status code, then 200 after retry. </summary>
        /// <param name="booleanValue"> Simple boolean value true. The default value is True. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> Put504Async(bool? booleanValue = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePut504Request(booleanValue);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Return 504 status code, then 200 after retry. </summary>
        /// <param name="booleanValue"> Simple boolean value true. The default value is True. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response Put504(bool? booleanValue = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePut504Request(booleanValue);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePatch504Request(bool? booleanValue)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/http/retry/504", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (booleanValue != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteBooleanValue(booleanValue.Value);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Return 504 status code, then 200 after retry. </summary>
        /// <param name="booleanValue"> Simple boolean value true. The default value is True. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> Patch504Async(bool? booleanValue = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePatch504Request(booleanValue);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Return 504 status code, then 200 after retry. </summary>
        /// <param name="booleanValue"> Simple boolean value true. The default value is True. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response Patch504(bool? booleanValue = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePatch504Request(booleanValue);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
