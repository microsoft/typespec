// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace xml_service.Models
{
    public partial class BlobPrefix : IXmlSerializable, IPersistableModel<BlobPrefix>
    {
        private void WriteInternal(XmlWriter writer, string nameHint, ModelReaderWriterOptions options)
        {
            writer.WriteStartElement(nameHint ?? "BlobPrefix");
            writer.WriteStartElement("Name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => WriteInternal(writer, nameHint, new ModelReaderWriterOptions("W"));

        internal static BlobPrefix DeserializeBlobPrefix(XElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            string name = default;
            if (element.Element("Name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            return new BlobPrefix(name, serializedAdditionalRawData: null);
        }

        BinaryData IPersistableModel<BlobPrefix>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BlobPrefix>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    {
                        using MemoryStream stream = new MemoryStream();
                        using XmlWriter writer = XmlWriter.Create(stream);
                        WriteInternal(writer, null, options);
                        writer.Flush();
                        return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
                    }
                default:
                    throw new FormatException($"The model {nameof(BlobPrefix)} does not support '{options.Format}' format.");
            }
        }

        BlobPrefix IPersistableModel<BlobPrefix>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BlobPrefix>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    return DeserializeBlobPrefix(XElement.Load(data.ToStream()), options);
                default:
                    throw new FormatException($"The model {nameof(BlobPrefix)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<BlobPrefix>.GetFormatFromOptions(ModelReaderWriterOptions options) => "X";
    }
}
