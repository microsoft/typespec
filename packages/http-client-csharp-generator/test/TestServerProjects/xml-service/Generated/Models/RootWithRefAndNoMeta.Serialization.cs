// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using xml_service;

namespace xml_service.Models
{
    public partial class RootWithRefAndNoMeta : IXmlSerializable, IPersistableModel<RootWithRefAndNoMeta>
    {
        private void WriteInternal(XmlWriter writer, string nameHint, ModelReaderWriterOptions options)
        {
            writer.WriteStartElement(nameHint ?? "RootWithRefAndNoMeta");
            if (Optional.IsDefined(RefToModel))
            {
                writer.WriteObjectValue(RefToModel, "RefToModel");
            }
            if (Optional.IsDefined(Something))
            {
                writer.WriteStartElement("Something");
                writer.WriteValue(Something);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => WriteInternal(writer, nameHint, new ModelReaderWriterOptions("W"));

        internal static RootWithRefAndNoMeta DeserializeRootWithRefAndNoMeta(XElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            ComplexTypeNoMeta refToModel = default;
            string something = default;
            if (element.Element("RefToModel") is XElement refToModelElement)
            {
                refToModel = ComplexTypeNoMeta.DeserializeComplexTypeNoMeta(refToModelElement);
            }
            if (element.Element("Something") is XElement somethingElement)
            {
                something = (string)somethingElement;
            }
            return new RootWithRefAndNoMeta(refToModel, something, serializedAdditionalRawData: null);
        }

        BinaryData IPersistableModel<RootWithRefAndNoMeta>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RootWithRefAndNoMeta>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    {
                        using MemoryStream stream = new MemoryStream();
                        using XmlWriter writer = XmlWriter.Create(stream);
                        WriteInternal(writer, null, options);
                        writer.Flush();
                        return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
                    }
                default:
                    throw new FormatException($"The model {nameof(RootWithRefAndNoMeta)} does not support '{options.Format}' format.");
            }
        }

        RootWithRefAndNoMeta IPersistableModel<RootWithRefAndNoMeta>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RootWithRefAndNoMeta>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    return DeserializeRootWithRefAndNoMeta(XElement.Load(data.ToStream()), options);
                default:
                    throw new FormatException($"The model {nameof(RootWithRefAndNoMeta)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<RootWithRefAndNoMeta>.GetFormatFromOptions(ModelReaderWriterOptions options) => "X";
    }
}
