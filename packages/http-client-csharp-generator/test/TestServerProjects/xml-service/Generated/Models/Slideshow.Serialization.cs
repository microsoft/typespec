// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using xml_service;

namespace xml_service.Models
{
    public partial class Slideshow : IXmlSerializable, IPersistableModel<Slideshow>
    {
        private void WriteInternal(XmlWriter writer, string nameHint, ModelReaderWriterOptions options)
        {
            writer.WriteStartElement(nameHint ?? "slideshow");
            if (Optional.IsDefined(Title))
            {
                writer.WriteStartAttribute("title");
                writer.WriteValue(Title);
                writer.WriteEndAttribute();
            }
            if (Optional.IsDefined(Date))
            {
                writer.WriteStartAttribute("date");
                writer.WriteValue(Date);
                writer.WriteEndAttribute();
            }
            if (Optional.IsDefined(Author))
            {
                writer.WriteStartAttribute("author");
                writer.WriteValue(Author);
                writer.WriteEndAttribute();
            }
            if (Optional.IsCollectionDefined(Slides))
            {
                foreach (var item in Slides)
                {
                    writer.WriteObjectValue(item, "slide");
                }
            }
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => WriteInternal(writer, nameHint, new ModelReaderWriterOptions("W"));

        internal static Slideshow DeserializeSlideshow(XElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            string title = default;
            string date = default;
            string author = default;
            IList<Slide> slides = default;
            if (element.Attribute("title") is XAttribute titleAttribute)
            {
                title = (string)titleAttribute;
            }
            if (element.Attribute("date") is XAttribute dateAttribute)
            {
                date = (string)dateAttribute;
            }
            if (element.Attribute("author") is XAttribute authorAttribute)
            {
                author = (string)authorAttribute;
            }
            var array = new List<Slide>();
            foreach (var e in element.Elements("slide"))
            {
                array.Add(Slide.DeserializeSlide(e));
            }
            slides = array;
            return new Slideshow(title, date, author, slides, serializedAdditionalRawData: null);
        }

        BinaryData IPersistableModel<Slideshow>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Slideshow>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    {
                        using MemoryStream stream = new MemoryStream();
                        using XmlWriter writer = XmlWriter.Create(stream);
                        WriteInternal(writer, null, options);
                        writer.Flush();
                        return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
                    }
                default:
                    throw new FormatException($"The model {nameof(Slideshow)} does not support '{options.Format}' format.");
            }
        }

        Slideshow IPersistableModel<Slideshow>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Slideshow>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    return DeserializeSlideshow(XElement.Load(data.ToStream()), options);
                default:
                    throw new FormatException($"The model {nameof(Slideshow)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<Slideshow>.GetFormatFromOptions(ModelReaderWriterOptions options) => "X";
    }
}
