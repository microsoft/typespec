!CodeModel 
info: !Info 
  description: Test Infrastructure for AutoRest
  title: AutoRest Complex Test Service
schemas: !Schemas 
  booleans:
    - !BooleanSchema &ref_16
      type: boolean
      language: !Languages 
        default:
          name: Boolean
          description: ''
      protocol: !Protocols {}
  numbers:
    - !NumberSchema &ref_3
      type: integer
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      precision: 32
      language: !Languages 
        default:
          name: BasicId
          description: Basic Id
      protocol: !Protocols {}
    - !NumberSchema &ref_6
      type: integer
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      precision: 32
      language: !Languages 
        default:
          name: ErrorStatus
          description: ''
      protocol: !Protocols {}
    - !NumberSchema &ref_8
      type: integer
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      precision: 32
      language: !Languages 
        default:
          name: IntWrapperField1
          description: ''
      protocol: !Protocols {}
    - !NumberSchema &ref_9
      type: integer
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      precision: 32
      language: !Languages 
        default:
          name: IntWrapperField2
          description: ''
      protocol: !Protocols {}
    - !NumberSchema &ref_10
      type: integer
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      precision: 64
      language: !Languages 
        default:
          name: LongWrapperField1
          description: ''
      protocol: !Protocols {}
    - !NumberSchema &ref_11
      type: integer
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      precision: 64
      language: !Languages 
        default:
          name: LongWrapperField2
          description: ''
      protocol: !Protocols {}
    - !NumberSchema &ref_12
      type: number
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      precision: 32
      language: !Languages 
        default:
          name: FloatWrapperField1
          description: ''
      protocol: !Protocols {}
    - !NumberSchema &ref_13
      type: number
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      precision: 32
      language: !Languages 
        default:
          name: FloatWrapperField2
          description: ''
      protocol: !Protocols {}
    - !NumberSchema &ref_14
      type: number
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      precision: 64
      language: !Languages 
        default:
          name: DoubleWrapperField1
          description: ''
      protocol: !Protocols {}
    - !NumberSchema &ref_15
      type: number
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      precision: 64
      language: !Languages 
        default:
          name: DoubleWrapperField56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose
          description: ''
      protocol: !Protocols {}
    - !NumberSchema &ref_35
      type: integer
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      precision: 32
      language: !Languages 
        default:
          name: PetId
          description: ''
      protocol: !Protocols {}
    - !NumberSchema &ref_57
      type: number
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      precision: 32
      language: !Languages 
        default:
          name: FishLength
          description: ''
      protocol: !Protocols {}
    - !NumberSchema &ref_65
      type: integer
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      precision: 32
      language: !Languages 
        default:
          name: ReadonlyObjSize
          description: ''
      protocol: !Protocols {}
    - !NumberSchema &ref_54
      type: integer
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      precision: 32
      language: !Languages 
        default:
          name: SharkAge
          description: ''
      protocol: !Protocols {}
    - !NumberSchema &ref_48
      type: integer
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      precision: 32
      language: !Languages 
        default:
          name: GoblinsharkJawsize
          description: ''
      protocol: !Protocols {}
  strings:
    - !StringSchema &ref_0
      type: string
      language: !Languages 
        default:
          name: String
          description: simple string
      protocol: !Protocols {}
    - !StringSchema &ref_4
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: BasicName
          description: Name property with a very long description that does not fit on a single line and a line break.
      protocol: !Protocols {}
    - !StringSchema &ref_7
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: ErrorMessage
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_17
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: StringWrapperField
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_18
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: StringWrapperEmpty
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_19
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: StringWrapperNull
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_28
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: ArrayWrapperArrayItem
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_1
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: String
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_38
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: SiameseBreed
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_37
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: CatColor
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_32
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: DogFood
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_36
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: PetName
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_44
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: FishFishtype
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_56
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: FishSpecies
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_61
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: DotFishType
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_63
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: DotFishSpecies
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_59
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: DotSalmonLocation
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_45
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: SalmonLocation
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_64
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: ReadonlyObjId
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_71
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: MyBaseTypePropB1
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_72
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: MyBaseHelperTypePropBH1
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_42
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: SmartSalmonCollegeDegree
          description: ''
      protocol: !Protocols {}
    - !StringSchema &ref_67
      type: string
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: MyDerivedTypePropD1
          description: ''
      protocol: !Protocols {}
  choices:
    - !ChoiceSchema &ref_5
      choices:
        - !ChoiceValue 
          value: cyan
          language:
            default:
              name: Cyan
              description: ''
        - !ChoiceValue 
          value: Magenta
          language:
            default:
              name: Magenta
              description: ''
        - !ChoiceValue 
          value: YELLOW
          language:
            default:
              name: Yellow
              description: ''
        - !ChoiceValue 
          value: blacK
          language:
            default:
              name: BlacK
              description: ''
      type: choice
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      choiceType: *ref_0
      language: !Languages 
        default:
          name: CMYKColors
          description: ''
      protocol: !Protocols {}
    - !ChoiceSchema &ref_69
      choices:
        - !ChoiceValue 
          value: Kind1
          language:
            default:
              name: Kind1
              description: ''
      type: choice
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      choiceType: *ref_0
      language: !Languages 
        default:
          name: MyKind
          description: ''
      protocol: !Protocols {}
    - !ChoiceSchema &ref_49
      choices:
        - !ChoiceValue 
          value: pink
          language:
            default:
              name: Pink
              description: ''
        - !ChoiceValue 
          value: gray
          language:
            default:
              name: Gray
              description: ''
        - !ChoiceValue 
          value: brown
          language:
            default:
              name: Brown
              description: ''
        - !ChoiceValue 
          value: RED
          language:
            default:
              name: UpperRed
              description: Uppercase RED
        - !ChoiceValue 
          value: red
          language:
            default:
              name: LowerRed
              description: Lowercase RED
      type: choice
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      choiceType: *ref_0
      defaultValue: gray
      language: !Languages 
        default:
          name: GoblinSharkColor
          description: Colors possible
      protocol: !Protocols {}
  constants:
    - !ConstantSchema &ref_80
      type: constant
      value: !ConstantValue 
        value: application/json
      valueType: *ref_0
      language: !Languages 
        default:
          name: Accept
          description: 'Accept: application/json'
      protocol: !Protocols {}
    - !ConstantSchema &ref_78
      type: constant
      value: !ConstantValue 
        value: '2016-02-29'
      valueType: *ref_0
      language: !Languages 
        default:
          name: ApiVersion20160229
          description: Api Version (2016-02-29)
      protocol: !Protocols {}
    - !ConstantSchema &ref_84
      type: constant
      value: !ConstantValue 
        value: application/json
      valueType: *ref_0
      language: !Languages 
        default:
          name: ApplicationJson
          description: Content Type 'application/json'
      protocol: !Protocols {}
  dictionaries:
    - !DictionarySchema &ref_29
      type: dictionary
      elementType: *ref_1
      language: !Languages 
        default:
          name: DictionaryWrapperDefaultProgram
          description: Dictionary of <string>
      protocol: !Protocols {}
    - !DictionarySchema &ref_40
      type: dictionary
      elementType: !AnySchema &ref_2
        type: any
        language: !Languages 
          default:
            name: any
            description: Anything
        protocol: !Protocols {}
      language: !Languages 
        default:
          name: SmartSalmon
          description: Dictionary of <any>
      protocol: !Protocols {}
  any:
    - *ref_2
  byteArrays:
    - !ByteArraySchema &ref_27
      type: byte-array
      format: byte
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: ByteWrapperField
          description: ''
      protocol: !Protocols {}
    - !ByteArraySchema &ref_47
      type: byte-array
      format: byte
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: SawsharkPicture
          description: ''
      protocol: !Protocols {}
  dateTimes:
    - !DateTimeSchema &ref_22
      type: date-time
      format: date-time
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: DatetimeWrapperField
          description: ''
      protocol: !Protocols {}
    - !DateTimeSchema &ref_23
      type: date-time
      format: date-time
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: DatetimeWrapperNow
          description: ''
      protocol: !Protocols {}
    - !DateTimeSchema &ref_24
      type: date-time
      format: date-time-rfc1123
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: Datetimerfc1123WrapperField
          description: ''
      protocol: !Protocols {}
    - !DateTimeSchema &ref_25
      type: date-time
      format: date-time-rfc1123
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: Datetimerfc1123WrapperNow
          description: ''
      protocol: !Protocols {}
    - !DateTimeSchema &ref_55
      type: date-time
      format: date-time
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: SharkBirthday
          description: ''
      protocol: !Protocols {}
  dates:
    - !DateSchema &ref_20
      type: date
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: DateWrapperField
          description: ''
      protocol: !Protocols {}
    - !DateSchema &ref_21
      type: date
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: DateWrapperLeap
          description: ''
      protocol: !Protocols {}
  durations:
    - !DurationSchema &ref_26
      type: duration
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      language: !Languages 
        default:
          name: DurationWrapperField
          description: ''
      protocol: !Protocols {}
  objects:
    - !ObjectSchema &ref_81
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: *ref_3
          nullable: true
          serializedName: id
          language: !Languages 
            default:
              name: id
              description: Basic Id
          protocol: !Protocols {}
        - !Property 
          schema: *ref_4
          serializedName: name
          language: !Languages 
            default:
              name: name
              description: Name property with a very long description that does not fit on a single line and a line break.
          protocol: !Protocols {}
        - !Property 
          schema: *ref_5
          serializedName: color
          language: !Languages 
            default:
              name: color
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: Basic
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_82
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: *ref_6
          serializedName: status
          language: !Languages 
            default:
              name: status
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: *ref_7
          serializedName: message
          language: !Languages 
            default:
              name: message
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - exception
      language: !Languages 
        default:
          name: Error
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_87
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: *ref_8
          serializedName: field1
          language: !Languages 
            default:
              name: field1
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: *ref_9
          serializedName: field2
          language: !Languages 
            default:
              name: field2
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: IntWrapper
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_90
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: *ref_10
          serializedName: field1
          language: !Languages 
            default:
              name: field1
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: *ref_11
          serializedName: field2
          language: !Languages 
            default:
              name: field2
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: LongWrapper
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_93
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: *ref_12
          serializedName: field1
          language: !Languages 
            default:
              name: field1
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: *ref_13
          serializedName: field2
          language: !Languages 
            default:
              name: field2
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: FloatWrapper
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_96
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: *ref_14
          serializedName: field1
          language: !Languages 
            default:
              name: field1
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: *ref_15
          serializedName: field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose
          language: !Languages 
            default:
              name: field56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: DoubleWrapper
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_99
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: *ref_16
          serializedName: field_true
          language: !Languages 
            default:
              name: fieldTrue
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: *ref_16
          serializedName: field_false
          language: !Languages 
            default:
              name: fieldFalse
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: BooleanWrapper
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_102
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: *ref_17
          serializedName: field
          language: !Languages 
            default:
              name: field
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: *ref_18
          serializedName: empty
          language: !Languages 
            default:
              name: empty
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: *ref_19
          serializedName: 'null'
          language: !Languages 
            default:
              name: 'null'
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: StringWrapper
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_105
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: *ref_20
          serializedName: field
          language: !Languages 
            default:
              name: field
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: *ref_21
          serializedName: leap
          language: !Languages 
            default:
              name: leap
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: DateWrapper
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_108
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: *ref_22
          serializedName: field
          language: !Languages 
            default:
              name: field
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: *ref_23
          serializedName: now
          language: !Languages 
            default:
              name: now
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: DatetimeWrapper
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_111
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: *ref_24
          serializedName: field
          language: !Languages 
            default:
              name: field
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: *ref_25
          serializedName: now
          language: !Languages 
            default:
              name: now
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: Datetimerfc1123Wrapper
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_114
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: *ref_26
          serializedName: field
          language: !Languages 
            default:
              name: field
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: DurationWrapper
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_117
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: *ref_27
          serializedName: field
          language: !Languages 
            default:
              name: field
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: ByteWrapper
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_120
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: !ArraySchema &ref_73
            type: array
            apiVersions:
              - !ApiVersion 
                version: '2016-02-29'
            elementType: *ref_28
            language: !Languages 
              default:
                name: ArrayWrapperArray
                description: Array of ArrayWrapperArrayItem
            protocol: !Protocols {}
          serializedName: array
          language: !Languages 
            default:
              name: array
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: ArrayWrapper
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_125
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: *ref_29
          nullable: true
          serializedName: defaultProgram
          language: !Languages 
            default:
              name: defaultProgram
              description: Dictionary of <string>
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: DictionaryWrapper
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_30
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      parents: !Relations 
        all:
          - !ObjectSchema &ref_33
            type: object
            apiVersions:
              - !ApiVersion 
                version: '2016-02-29'
            children: !Relations 
              all:
                - *ref_30
              immediate:
                - *ref_30
            parents: !Relations 
              all:
                - !ObjectSchema &ref_31
                  type: object
                  apiVersions:
                    - !ApiVersion 
                      version: '2016-02-29'
                  children: !Relations 
                    all:
                      - !ObjectSchema &ref_34
                        type: object
                        apiVersions:
                          - !ApiVersion 
                            version: '2016-02-29'
                        parents: !Relations 
                          all:
                            - *ref_31
                          immediate:
                            - *ref_31
                        properties:
                          - !Property 
                            schema: *ref_32
                            serializedName: food
                            language: !Languages 
                              default:
                                name: food
                                description: ''
                            protocol: !Protocols {}
                        serializationFormats:
                          - json
                        usage:
                          - output
                          - input
                        language: !Languages 
                          default:
                            name: Dog
                            description: ''
                            namespace: ''
                        protocol: !Protocols {}
                      - *ref_33
                      - *ref_30
                    immediate:
                      - *ref_34
                      - *ref_33
                  properties:
                    - !Property 
                      schema: *ref_35
                      serializedName: id
                      language: !Languages 
                        default:
                          name: id
                          description: ''
                      protocol: !Protocols {}
                    - !Property 
                      schema: *ref_36
                      serializedName: name
                      language: !Languages 
                        default:
                          name: name
                          description: ''
                      protocol: !Protocols {}
                  serializationFormats:
                    - json
                  usage:
                    - output
                    - input
                  language: !Languages 
                    default:
                      name: Pet
                      description: ''
                      namespace: ''
                  protocol: !Protocols {}
              immediate:
                - *ref_31
            properties:
              - !Property 
                schema: *ref_37
                serializedName: color
                language: !Languages 
                  default:
                    name: color
                    description: ''
                protocol: !Protocols {}
              - !Property 
                schema: !ArraySchema &ref_74
                  type: array
                  apiVersions:
                    - !ApiVersion 
                      version: '2016-02-29'
                  elementType: *ref_34
                  language: !Languages 
                    default:
                      name: CatHates
                      description: Array of dog
                  protocol: !Protocols {}
                serializedName: hates
                language: !Languages 
                  default:
                    name: hates
                    description: ''
                protocol: !Protocols {}
            serializationFormats:
              - json
            usage:
              - output
              - input
            language: !Languages 
              default:
                name: Cat
                description: ''
                namespace: ''
            protocol: !Protocols {}
          - *ref_31
        immediate:
          - *ref_33
      properties:
        - !Property 
          schema: *ref_38
          serializedName: breed
          language: !Languages 
            default:
              name: breed
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: Siamese
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - *ref_33
    - *ref_34
    - *ref_31
    - !ObjectSchema &ref_41
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      children: !Relations 
        all:
          - !ObjectSchema &ref_39
            type: object
            apiVersions:
              - !ApiVersion 
                version: '2016-02-29'
            children: !Relations 
              all:
                - !ObjectSchema &ref_43
                  type: object
                  apiVersions:
                    - !ApiVersion 
                      version: '2016-02-29'
                  discriminatorValue: smart_salmon
                  parents: !Relations 
                    all:
                      - *ref_39
                      - *ref_40
                      - *ref_41
                    immediate:
                      - *ref_39
                      - *ref_40
                  properties:
                    - !Property 
                      schema: *ref_42
                      serializedName: college_degree
                      language: !Languages 
                        default:
                          name: collegeDegree
                          description: ''
                      protocol: !Protocols {}
                  serializationFormats:
                    - json
                  usage:
                    - output
                    - input
                  language: !Languages 
                    default:
                      name: SmartSalmon
                      description: ''
                      namespace: ''
                  protocol: !Protocols {}
              immediate:
                - *ref_43
            discriminator: !Discriminator 
              all:
                smart_salmon: *ref_43
              immediate:
                smart_salmon: *ref_43
              property: !Property &ref_53
                schema: *ref_44
                isDiscriminator: true
                required: true
                serializedName: fishtype
                language: !Languages 
                  default:
                    name: fishtype
                    description: ''
                protocol: !Protocols {}
            discriminatorValue: salmon
            parents: !Relations 
              all:
                - *ref_41
              immediate:
                - *ref_41
            properties:
              - !Property 
                schema: *ref_45
                serializedName: location
                language: !Languages 
                  default:
                    name: location
                    description: ''
                protocol: !Protocols {}
              - !Property 
                schema: *ref_16
                serializedName: iswild
                language: !Languages 
                  default:
                    name: iswild
                    description: ''
                protocol: !Protocols {}
            serializationFormats:
              - json
            usage:
              - output
              - input
            language: !Languages 
              default:
                name: Salmon
                description: ''
                namespace: ''
            protocol: !Protocols {}
          - *ref_43
          - !ObjectSchema &ref_46
            type: object
            apiVersions:
              - !ApiVersion 
                version: '2016-02-29'
            children: !Relations 
              all:
                - !ObjectSchema &ref_50
                  type: object
                  apiVersions:
                    - !ApiVersion 
                      version: '2016-02-29'
                  discriminatorValue: sawshark
                  parents: !Relations 
                    all:
                      - *ref_46
                      - *ref_41
                    immediate:
                      - *ref_46
                  properties:
                    - !Property 
                      schema: *ref_47
                      serializedName: picture
                      language: !Languages 
                        default:
                          name: picture
                          description: ''
                      protocol: !Protocols {}
                  serializationFormats:
                    - json
                  usage:
                    - output
                    - input
                  language: !Languages 
                    default:
                      name: Sawshark
                      description: ''
                      namespace: ''
                  protocol: !Protocols {}
                - !ObjectSchema &ref_51
                  type: object
                  apiVersions:
                    - !ApiVersion 
                      version: '2016-02-29'
                  discriminatorValue: goblin
                  parents: !Relations 
                    all:
                      - *ref_46
                      - *ref_41
                    immediate:
                      - *ref_46
                  properties:
                    - !Property 
                      schema: *ref_48
                      serializedName: jawsize
                      language: !Languages 
                        default:
                          name: jawsize
                          description: ''
                      protocol: !Protocols {}
                    - !Property 
                      schema: *ref_49
                      serializedName: color
                      language: !Languages 
                        default:
                          name: color
                          description: Colors possible
                      protocol: !Protocols {}
                  serializationFormats:
                    - json
                  usage:
                    - output
                    - input
                  extensions:
                    x-ms-discriminator-value: goblin
                  language: !Languages 
                    default:
                      name: Goblinshark
                      description: ''
                      namespace: ''
                  protocol: !Protocols {}
                - !ObjectSchema &ref_52
                  type: object
                  apiVersions:
                    - !ApiVersion 
                      version: '2016-02-29'
                  discriminatorValue: cookiecuttershark
                  parents: !Relations 
                    all:
                      - *ref_46
                      - *ref_41
                    immediate:
                      - *ref_46
                  serializationFormats:
                    - json
                  usage:
                    - output
                    - input
                  language: !Languages 
                    default:
                      name: Cookiecuttershark
                      description: ''
                      namespace: ''
                  protocol: !Protocols {}
              immediate:
                - *ref_50
                - *ref_51
                - *ref_52
            discriminator: !Discriminator 
              all:
                cookiecuttershark: *ref_52
                goblin: *ref_51
                sawshark: *ref_50
              immediate:
                cookiecuttershark: *ref_52
                goblin: *ref_51
                sawshark: *ref_50
              property: *ref_53
            discriminatorValue: shark
            parents: !Relations 
              all:
                - *ref_41
              immediate:
                - *ref_41
            properties:
              - !Property 
                schema: *ref_54
                required: false
                serializedName: age
                language: !Languages 
                  default:
                    name: age
                    description: ''
                protocol: !Protocols {}
              - !Property 
                schema: *ref_55
                required: true
                serializedName: birthday
                language: !Languages 
                  default:
                    name: birthday
                    description: ''
                protocol: !Protocols {}
            serializationFormats:
              - json
            usage:
              - output
              - input
            language: !Languages 
              default:
                name: Shark
                description: ''
                namespace: ''
            protocol: !Protocols {}
          - *ref_50
          - *ref_51
          - *ref_52
        immediate:
          - *ref_39
          - *ref_46
      discriminator: !Discriminator 
        all:
          cookiecuttershark: *ref_52
          goblin: *ref_51
          salmon: *ref_39
          sawshark: *ref_50
          shark: *ref_46
          smart_salmon: *ref_43
        immediate:
          salmon: *ref_39
          shark: *ref_46
        property: *ref_53
      properties:
        - *ref_53
        - !Property 
          schema: *ref_56
          required: false
          serializedName: species
          language: !Languages 
            default:
              name: species
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: *ref_57
          required: true
          serializedName: length
          language: !Languages 
            default:
              name: length
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: !ArraySchema &ref_75
            type: array
            apiVersions:
              - !ApiVersion 
                version: '2016-02-29'
            elementType: *ref_41
            language: !Languages 
              default:
                name: FishSiblings
                description: Array of Fish
            protocol: !Protocols {}
          required: false
          serializedName: siblings
          language: !Languages 
            default:
              name: siblings
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: Fish
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_58
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      children: !Relations 
        all:
          - !ObjectSchema &ref_60
            type: object
            apiVersions:
              - !ApiVersion 
                version: '2016-02-29'
            discriminatorValue: DotSalmon
            parents: !Relations 
              all:
                - *ref_58
              immediate:
                - *ref_58
            properties:
              - !Property 
                schema: *ref_59
                serializedName: location
                language: !Languages 
                  default:
                    name: location
                    description: ''
                protocol: !Protocols {}
              - !Property 
                schema: *ref_16
                serializedName: iswild
                language: !Languages 
                  default:
                    name: iswild
                    description: ''
                protocol: !Protocols {}
            serializationFormats:
              - json
            usage:
              - output
            language: !Languages 
              default:
                name: DotSalmon
                description: ''
                namespace: ''
            protocol: !Protocols {}
        immediate:
          - *ref_60
      discriminator: !Discriminator 
        all:
          DotSalmon: *ref_60
        immediate:
          DotSalmon: *ref_60
        property: !Property &ref_62
          schema: *ref_61
          isDiscriminator: true
          required: true
          serializedName: fish.type
          language: !Languages 
            default:
              name: fishType
              description: ''
          protocol: !Protocols {}
      properties:
        - *ref_62
        - !Property 
          schema: *ref_63
          required: false
          serializedName: species
          language: !Languages 
            default:
              name: species
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
      language: !Languages 
        default:
          name: DotFish
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_134
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: *ref_60
          serializedName: sampleSalmon
          language: !Languages 
            default:
              name: sampleSalmon
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: !ArraySchema &ref_76
            type: array
            apiVersions:
              - !ApiVersion 
                version: '2016-02-29'
            elementType: *ref_60
            language: !Languages 
              default:
                name: DotFishMarketSalmons
                description: Array of DotSalmon
            protocol: !Protocols {}
          serializedName: salmons
          language: !Languages 
            default:
              name: salmons
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: *ref_58
          serializedName: sampleFish
          language: !Languages 
            default:
              name: sampleFish
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: !ArraySchema &ref_77
            type: array
            apiVersions:
              - !ApiVersion 
                version: '2016-02-29'
            elementType: *ref_58
            language: !Languages 
              default:
                name: DotFishMarketFishes
                description: Array of DotFish
            protocol: !Protocols {}
          serializedName: fishes
          language: !Languages 
            default:
              name: fishes
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
      language: !Languages 
        default:
          name: DotFishMarket
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - *ref_60
    - *ref_39
    - !ObjectSchema &ref_143
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      properties:
        - !Property 
          schema: *ref_64
          readOnly: true
          serializedName: id
          language: !Languages 
            default:
              name: id
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: *ref_65
          serializedName: size
          language: !Languages 
            default:
              name: size
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !Languages 
        default:
          name: ReadonlyObj
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - !ObjectSchema &ref_66
      type: object
      apiVersions:
        - !ApiVersion 
          version: '2016-02-29'
      children: !Relations 
        all:
          - !ObjectSchema &ref_68
            type: object
            apiVersions:
              - !ApiVersion 
                version: '2016-02-29'
            discriminatorValue: Kind1
            parents: !Relations 
              all:
                - *ref_66
              immediate:
                - *ref_66
            properties:
              - !Property 
                schema: *ref_67
                serializedName: propD1
                language: !Languages 
                  default:
                    name: propD1
                    description: ''
                protocol: !Protocols {}
            serializationFormats:
              - json
            usage:
              - output
            extensions:
              x-ms-discriminator-value: Kind1
            language: !Languages 
              default:
                name: MyDerivedType
                description: ''
                namespace: ''
            protocol: !Protocols {}
        immediate:
          - *ref_68
      discriminator: !Discriminator 
        all:
          Kind1: *ref_68
        immediate:
          Kind1: *ref_68
        property: !Property &ref_70
          schema: *ref_69
          isDiscriminator: true
          required: true
          serializedName: kind
          language: !Languages 
            default:
              name: kind
              description: ''
          protocol: !Protocols {}
      properties:
        - *ref_70
        - !Property 
          schema: *ref_71
          required: false
          serializedName: propB1
          language: !Languages 
            default:
              name: propB1
              description: ''
          protocol: !Protocols {}
        - !Property 
          schema: *ref_72
          flattenedNames:
            - helper
            - propBH1
          required: false
          serializedName: propBH1
          language: !Languages 
            default:
              name: propBH1
              description: ''
          protocol: !Protocols {}
      serializationFormats:
        - json
      usage:
        - output
      language: !Languages 
        default:
          name: MyBaseType
          description: ''
          namespace: ''
      protocol: !Protocols {}
    - *ref_43
    - *ref_46
    - *ref_50
    - *ref_51
    - *ref_52
    - *ref_68
  arrays:
    - *ref_73
    - *ref_74
    - *ref_75
    - *ref_76
    - *ref_77
globalParameters:
  - !Parameter &ref_79
    schema: *ref_0
    clientDefaultValue: http://localhost:3000
    implementation: Client
    origin: modelerfour:synthesized/host
    required: true
    extensions:
      x-ms-skip-url-encoding: true
    language: !Languages 
      default:
        name: $host
        description: server parameter
        serializedName: $host
    protocol: !Protocols 
      http: !HttpParameter 
        in: uri
  - !Parameter &ref_83
    schema: *ref_78
    implementation: Client
    origin: modelerfour:synthesized/api-version
    required: true
    language: !Languages 
      default:
        name: apiVersion
        description: Api Version
        serializedName: api-version
    protocol: !Protocols 
      http: !HttpParameter 
        in: query
operationGroups:
  - !OperationGroup 
    $key: basic
    operations:
      - !Operation 
        operationId: basic_getValid
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/basic/valid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_81
            language: !Languages 
              default:
                name: ''
                description: 'Get complex type {id: 2, name: ''abc'', color: ''YELLOW''}'
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetValid
            description: 'Get complex type {id: 2, name: ''abc'', color: ''YELLOW''}'
        protocol: !Protocols {}
      - !Operation 
        operationId: basic_putValid
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
          - *ref_83
        requestMediaTypes:
          application/json: !Request &ref_86
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_85
                schema: *ref_81
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: 'Please put {id: 2, name: ''abc'', color: ''Magenta''}'
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_85
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/basic/valid
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_86
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            basic_putValid:
              parameters:
                complexBody:
                  name: abc
                  color: Magenta
                  id: 2
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutValid
            description: 'Please put {id: 2, name: ''abc'', color: ''Magenta''}'
        protocol: !Protocols {}
      - !Operation 
        operationId: basic_getInvalid
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/basic/invalid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_81
            language: !Languages 
              default:
                name: ''
                description: Get complex types with basic property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetInvalid
            description: Get a basic complex type that is invalid for the local strong type
        protocol: !Protocols {}
      - !Operation 
        operationId: basic_getEmpty
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/basic/empty
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_81
            language: !Languages 
              default:
                name: ''
                description: Get complex types with basic property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetEmpty
            description: Get a basic complex type that is empty
        protocol: !Protocols {}
      - !Operation 
        operationId: basic_getNull
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/basic/null
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_81
            language: !Languages 
              default:
                name: ''
                description: Get complex types with basic property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetNull
            description: Get a basic complex type whose properties are null
        protocol: !Protocols {}
      - !Operation 
        operationId: basic_getNotProvided
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/basic/notprovided
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_81
            language: !Languages 
              default:
                name: ''
                description: Get complex types with basic property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetNotProvided
            description: Get a basic complex type while the server doesn't provide a response payload
        protocol: !Protocols {}
    language: !Languages 
      default:
        name: Basic
        description: ''
    protocol: !Protocols {}
  - !OperationGroup 
    $key: primitive
    operations:
      - !Operation 
        operationId: primitive_getInt
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/primitive/integer
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_87
            language: !Languages 
              default:
                name: ''
                description: Get complex types with primitive property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetInt
            description: Get complex types with integer properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_putInt
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_89
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_88
                schema: *ref_87
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: Please put -1 and 2
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_88
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/primitive/integer
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_89
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            primitive_putInt:
              parameters:
                complexBody:
                  field1: 2
                  field2: -1
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutInt
            description: Put complex types with integer properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_getLong
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/primitive/long
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_90
            language: !Languages 
              default:
                name: ''
                description: Get complex types with primitive property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetLong
            description: Get complex types with long properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_putLong
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_92
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_91
                schema: *ref_90
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: Please put 1099511627775 and -999511627788
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_91
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/primitive/long
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_92
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            primitive_putLong:
              parameters:
                complexBody:
                  field1: 1099511627775
                  field2: -999511627788
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutLong
            description: Put complex types with long properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_getFloat
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/primitive/float
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_93
            language: !Languages 
              default:
                name: ''
                description: Get complex types with primitive property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetFloat
            description: Get complex types with float properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_putFloat
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_95
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_94
                schema: *ref_93
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: Please put 1.05 and -0.003
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_94
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/primitive/float
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_95
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            primitive_putFloat:
              parameters:
                complexBody:
                  field1: 1.05
                  field2: -0.003
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutFloat
            description: Put complex types with float properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_getDouble
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/primitive/double
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_96
            language: !Languages 
              default:
                name: ''
                description: Get complex types with primitive property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetDouble
            description: Get complex types with double properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_putDouble
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_98
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_97
                schema: *ref_96
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_97
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/primitive/double
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_98
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            primitive_putDouble:
              parameters:
                complexBody:
                  field1: 3.e-100
                  field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose: -5.e-57
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutDouble
            description: Put complex types with double properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_getBool
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/primitive/bool
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_99
            language: !Languages 
              default:
                name: ''
                description: Get complex types with primitive property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetBool
            description: Get complex types with bool properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_putBool
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_101
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_100
                schema: *ref_99
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: Please put true and false
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_100
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/primitive/bool
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_101
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            primitive_putBool:
              parameters:
                complexBody:
                  field_false: false
                  field_true: true
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutBool
            description: Put complex types with bool properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_getString
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/primitive/string
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_102
            language: !Languages 
              default:
                name: ''
                description: Get complex types with primitive property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetString
            description: Get complex types with string properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_putString
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_104
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_103
                schema: *ref_102
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: Please put 'goodrequest', '', and null
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_103
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/primitive/string
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_104
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            primitive_putString:
              parameters:
                complexBody:
                  empty: ''
                  field: goodrequest
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutString
            description: Put complex types with string properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_getDate
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/primitive/date
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_105
            language: !Languages 
              default:
                name: ''
                description: Get complex types with primitive property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetDate
            description: Get complex types with date properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_putDate
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_107
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_106
                schema: *ref_105
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: Please put '0001-01-01' and '2016-02-29'
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_106
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/primitive/date
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_107
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            primitive_putDate:
              parameters:
                complexBody:
                  field: '0001-01-01'
                  leap: '2016-02-29'
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutDate
            description: Put complex types with date properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_getDateTime
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/primitive/datetime
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_108
            language: !Languages 
              default:
                name: ''
                description: Get complex types with primitive property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetDateTime
            description: Get complex types with datetime properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_putDateTime
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_110
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_109
                schema: *ref_108
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_109
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/primitive/datetime
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_110
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            primitive_putDateTime:
              parameters:
                complexBody:
                  field: '0001-01-01T12:00:00-04:00'
                  now: '2015-05-18T11:38:00-08:00'
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutDateTime
            description: Put complex types with datetime properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_getDateTimeRfc1123
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/primitive/datetimerfc1123
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_111
            language: !Languages 
              default:
                name: ''
                description: Get complex types with primitive property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetDateTimeRfc1123
            description: Get complex types with datetimeRfc1123 properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_putDateTimeRfc1123
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_113
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_112
                schema: *ref_111
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_112
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/primitive/datetimerfc1123
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_113
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            primitive_putDateTimeRfc1123:
              parameters:
                complexBody:
                  field: Mon, 01 Jan 0001 12:00:00 GMT
                  now: Mon, 18 May 2015 11:38:00 GMT
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutDateTimeRfc1123
            description: Put complex types with datetimeRfc1123 properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_getDuration
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/primitive/duration
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_114
            language: !Languages 
              default:
                name: ''
                description: Get complex types with primitive property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetDuration
            description: Get complex types with duration properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_putDuration
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_116
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_115
                schema: *ref_114
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: Please put 'P123DT22H14M12.011S'
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_115
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/primitive/duration
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_116
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            primitive_putDuration:
              parameters:
                complexBody:
                  field: P123DT22H14M12.011S
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutDuration
            description: Put complex types with duration properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_getByte
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/primitive/byte
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_117
            language: !Languages 
              default:
                name: ''
                description: Get complex types with primitive property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetByte
            description: Get complex types with byte properties
        protocol: !Protocols {}
      - !Operation 
        operationId: primitive_putByte
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_119
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_118
                schema: *ref_117
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_118
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/primitive/byte
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_119
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            primitive_putByte:
              parameters:
                complexBody:
                  field: hex(FF FE FD FC 00 FA F9 F8 F7 F6)
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutByte
            description: Put complex types with byte properties
        protocol: !Protocols {}
    language: !Languages 
      default:
        name: Primitive
        description: ''
    protocol: !Protocols {}
  - !OperationGroup 
    $key: array
    operations:
      - !Operation 
        operationId: array_getValid
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/array/valid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_120
            language: !Languages 
              default:
                name: ''
                description: Complex object with array property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetValid
            description: Get complex types with array property
        protocol: !Protocols {}
      - !Operation 
        operationId: array_putValid
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_122
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_121
                schema: *ref_120
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: 'Please put an array with 4 items: "1, 2, 3, 4", "", null, "&S#$(*Y", "The quick brown fox jumps over the lazy dog"'
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_121
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/array/valid
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_122
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            array_putValid:
              parameters:
                complexBody:
                  array:
                    - 1, 2, 3, 4
                    - ''
                    - null
                    - '&S#$(*Y'
                    - The quick brown fox jumps over the lazy dog
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutValid
            description: Put complex types with array property
        protocol: !Protocols {}
      - !Operation 
        operationId: array_getEmpty
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/array/empty
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_120
            language: !Languages 
              default:
                name: ''
                description: Complex object with array property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetEmpty
            description: Get complex types with array property which is empty
        protocol: !Protocols {}
      - !Operation 
        operationId: array_putEmpty
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_124
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_123
                schema: *ref_120
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: Please put an empty array
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_123
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/array/empty
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_124
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            array_putEmpty:
              parameters:
                complexBody:
                  array: []
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutEmpty
            description: Put complex types with array property which is empty
        protocol: !Protocols {}
      - !Operation 
        operationId: array_getNotProvided
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/array/notprovided
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_120
            language: !Languages 
              default:
                name: ''
                description: Complex object with array property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetNotProvided
            description: Get complex types with array property while server doesn't provide a response payload
        protocol: !Protocols {}
    language: !Languages 
      default:
        name: Array
        description: ''
    protocol: !Protocols {}
  - !OperationGroup 
    $key: dictionary
    operations:
      - !Operation 
        operationId: dictionary_getValid
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/dictionary/typed/valid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_125
            language: !Languages 
              default:
                name: ''
                description: Complex object with dictionary property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetValid
            description: Get complex types with dictionary property
        protocol: !Protocols {}
      - !Operation 
        operationId: dictionary_putValid
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_127
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_126
                schema: *ref_125
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: 'Please put a dictionary with 5 key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"", "":null'
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_126
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/dictionary/typed/valid
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_127
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            dictionary_putValid:
              parameters:
                complexBody:
                  defaultProgram:
                    '': null
                    bmp: mspaint
                    exe: ''
                    txt: notepad
                    xls: excel
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutValid
            description: Put complex types with dictionary property
        protocol: !Protocols {}
      - !Operation 
        operationId: dictionary_getEmpty
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/dictionary/typed/empty
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_125
            language: !Languages 
              default:
                name: ''
                description: Complex object with dictionary property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetEmpty
            description: Get complex types with dictionary property which is empty
        protocol: !Protocols {}
      - !Operation 
        operationId: dictionary_putEmpty
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_129
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_128
                schema: *ref_125
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: Please put an empty dictionary
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_128
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/dictionary/typed/empty
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_129
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            dictionary_putEmpty:
              parameters:
                complexBody:
                  defaultProgram: {}
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutEmpty
            description: Put complex types with dictionary property which is empty
        protocol: !Protocols {}
      - !Operation 
        operationId: dictionary_getNull
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/dictionary/typed/null
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_125
            language: !Languages 
              default:
                name: ''
                description: Complex object with dictionary property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetNull
            description: Get complex types with dictionary property which is null
        protocol: !Protocols {}
      - !Operation 
        operationId: dictionary_getNotProvided
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/dictionary/typed/notprovided
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_125
            language: !Languages 
              default:
                name: ''
                description: Complex object with dictionary property
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetNotProvided
            description: Get complex types with dictionary property while server doesn't provide a response payload
        protocol: !Protocols {}
    language: !Languages 
      default:
        name: Dictionary
        description: ''
    protocol: !Protocols {}
  - !OperationGroup 
    $key: inheritance
    operations:
      - !Operation 
        operationId: inheritance_getValid
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/inheritance/valid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_30
            language: !Languages 
              default:
                name: ''
                description: Complex object that extends cat and pet
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetValid
            description: Get complex types that extend others
        protocol: !Protocols {}
      - !Operation 
        operationId: inheritance_putValid
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_131
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_130
                schema: *ref_30
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: Please put a siamese with id=2, name="Siameee", color=green, breed=persion, which hates 2 dogs, the 1st one named "Potato" with id=1 and food="tomato", and the 2nd one named "Tomato" with id=-1 and food="french fries".
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_130
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/inheritance/valid
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_131
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            inheritance_putValid:
              parameters:
                complexBody:
                  name: Siameee
                  breed: persion
                  color: green
                  hates:
                    - name: Potato
                      food: tomato
                      id: 1
                    - name: Tomato
                      food: french fries
                      id: -1
                  id: 2
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutValid
            description: Put complex types that extend others
        protocol: !Protocols {}
    language: !Languages 
      default:
        name: Inheritance
        description: ''
    protocol: !Protocols {}
  - !OperationGroup 
    $key: polymorphism
    operations:
      - !Operation 
        operationId: polymorphism_getValid
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/polymorphism/valid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_41
            language: !Languages 
              default:
                name: ''
                description: |-
                  Returns an object like this: {
                          'fishtype':'Salmon',
                          'location':'alaska',
                          'iswild':true,
                          'species':'king',
                          'length':1.0,
                          'siblings':[
                            {
                              'fishtype':'Shark',
                              'age':6,
                              'birthday': '2012-01-05T01:00:00Z',
                              'length':20.0,
                              'species':'predator',
                            },
                            {
                              'fishtype':'Sawshark',
                              'age':105,
                              'birthday': '1900-01-05T01:00:00Z',
                              'length':10.0,
                              'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
                              'species':'dangerous',
                            },
                            {
                              'fishtype': 'goblin',
                              'age': 1,
                              'birthday': '2015-08-08T00:00:00Z',
                              'length': 30.0,
                              'species': 'scary',
                              'jawsize': 5
                            }
                          ]
                        };
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetValid
            description: Get complex types that are polymorphic
        protocol: !Protocols {}
      - !Operation 
        operationId: polymorphism_putValid
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_133
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_132
                schema: *ref_41
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: |-
                      Please put a salmon that looks like this:
                      {
                              'fishtype':'Salmon',
                              'location':'alaska',
                              'iswild':true,
                              'species':'king',
                              'length':1.0,
                              'siblings':[
                                {
                                  'fishtype':'Shark',
                                  'age':6,
                                  'birthday': '2012-01-05T01:00:00Z',
                                  'length':20.0,
                                  'species':'predator',
                                },
                                {
                                  'fishtype':'Sawshark',
                                  'age':105,
                                  'birthday': '1900-01-05T01:00:00Z',
                                  'length':10.0,
                                  'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
                                  'species':'dangerous',
                                },
                                {
                                  'fishtype': 'goblin',
                                  'age': 1,
                                  'birthday': '2015-08-08T00:00:00Z',
                                  'length': 30.0,
                                  'species': 'scary',
                                  'jawsize': 5
                                }
                              ]
                            };
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_132
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/polymorphism/valid
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_133
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            polymorphism_putValid:
              parameters:
                complexBody:
                  fishtype: salmon
                  iswild: true
                  length: 1
                  location: alaska
                  siblings:
                    - age: 6
                      birthday: '2012-01-05T01:00:00Z'
                      fishtype: shark
                      length: 20
                      species: predator
                    - age: 105
                      birthday: '1900-01-05T01:00:00Z'
                      fishtype: sawshark
                      length: 10
                      picture: //////4=
                      species: dangerous
                    - age: 1
                      birthday: '2015-08-08T00:00:00Z'
                      color: pinkish-gray
                      fishtype: goblin
                      jawsize: 5
                      length: 30
                      species: scary
                  species: king
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutValid
            description: Put complex types that are polymorphic
        protocol: !Protocols {}
      - !Operation 
        operationId: polymorphism_getDotSyntax
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/polymorphism/dotsyntax
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_58
            language: !Languages 
              default:
                name: ''
                description: Returns an object like where JSON key of discriminator contains a dot
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetDotSyntax
            description: Get complex types that are polymorphic, JSON key contains a dot
        protocol: !Protocols {}
      - !Operation 
        operationId: polymorphism_getComposedWithDiscriminator
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/polymorphism/composedWithDiscriminator
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_134
            language: !Languages 
              default:
                name: ''
                description: Returns an object that composes a scalar polymorphic object and array of polymorphic objects with discriminator specified
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetComposedWithDiscriminator
            description: Get complex object composing a polymorphic scalar property and array property with polymorphic element type, with discriminator specified. Deserialization must NOT fail and use the discriminator type specified on the wire.
        protocol: !Protocols {}
      - !Operation 
        operationId: polymorphism_getComposedWithoutDiscriminator
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/polymorphism/composedWithoutDiscriminator
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_134
            language: !Languages 
              default:
                name: ''
                description: Returns an object that composes a scalar polymorphic object and array of polymorphic objects without discriminator specified
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetComposedWithoutDiscriminator
            description: Get complex object composing a polymorphic scalar property and array property with polymorphic element type, without discriminator specified on wire. Deserialization must NOT fail and use the explicit type of the property.
        protocol: !Protocols {}
      - !Operation 
        operationId: polymorphism_getComplicated
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/polymorphism/complicated
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_39
            language: !Languages 
              default:
                name: ''
                description: OK
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetComplicated
            description: Get complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties
        protocol: !Protocols {}
      - !Operation 
        operationId: polymorphism_putComplicated
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_136
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_135
                schema: *ref_39
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: ''
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_135
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/polymorphism/complicated
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_136
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            polymorphism_putComplicated:
              parameters:
                complexBody:
                  additionalProperty1: 1
                  additionalProperty2: false
                  additionalProperty3: hello
                  additionalProperty4:
                    a: 1
                    b: 2
                  additionalProperty5:
                    - 1
                    - 3
                  fishtype: smart_salmon
                  iswild: true
                  length: 1
                  location: alaska
                  siblings:
                    - age: 6
                      birthday: '2012-01-05T01:00:00Z'
                      fishtype: shark
                      length: 20
                      species: predator
                    - age: 105
                      birthday: '1900-01-05T01:00:00Z'
                      fishtype: sawshark
                      length: 10
                      picture: //////4=
                      species: dangerous
                    - age: 1
                      birthday: '2015-08-08T00:00:00.000Z'
                      color: pinkish-gray
                      fishtype: goblin
                      jawsize: 5
                      length: 30
                      species: scary
                  species: king
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutComplicated
            description: Put complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties
        protocol: !Protocols {}
      - !Operation 
        operationId: polymorphism_putMissingDiscriminator
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_138
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_137
                schema: *ref_39
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: ''
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_137
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/polymorphism/missingdiscriminator
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_138
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_39
            language: !Languages 
              default:
                name: ''
                description: Returns a salmon
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            polymorphism_putMissingDiscriminator:
              parameters:
                complexBody:
                  fishtype: salmon
                  iswild: true
                  length: 1
                  location: alaska
                  siblings:
                    - age: 6
                      birthday: '2012-01-05T01:00:00Z'
                      fishtype: shark
                      length: 20
                      species: predator
                    - age: 105
                      birthday: '1900-01-05T01:00:00Z'
                      fishtype: sawshark
                      length: 10
                      picture: //////4=
                      species: dangerous
                    - age: 1
                      birthday: '2012-01-05T01:00:00Z'
                      color: pinkish-gray
                      fishtype: goblin
                      jawsize: 5
                      length: 30
                      species: scary
                  species: king
              responses:
                '200': {}
        language: !Languages 
          default:
            name: PutMissingDiscriminator
            description: Put complex types that are polymorphic, omitting the discriminator
        protocol: !Protocols {}
      - !Operation 
        operationId: polymorphism_putValidMissingRequired
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_140
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_139
                schema: *ref_41
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: |-
                      Please attempt put a sawshark that looks like this, the client should not allow this data to be sent:
                      {
                          "fishtype": "sawshark",
                          "species": "snaggle toothed",
                          "length": 18.5,
                          "age": 2,
                          "birthday": "2013-06-01T01:00:00Z",
                          "location": "alaska",
                          "picture": base64(FF FF FF FF FE),
                          "siblings": [
                              {
                                  "fishtype": "shark",
                                  "species": "predator",
                                  "birthday": "2012-01-05T01:00:00Z",
                                  "length": 20,
                                  "age": 6
                              },
                              {
                                  "fishtype": "sawshark",
                                  "species": "dangerous",
                                  "picture": base64(FF FF FF FF FE),
                                  "length": 10,
                                  "age": 105
                              }
                          ]
                      }
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_139
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/polymorphism/missingrequired/invalid
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_140
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: PutValidMissingRequired
            description: Put complex types that are polymorphic, attempting to omit required 'birthday' field - the request should not be allowed from the client
        protocol: !Protocols {}
    language: !Languages 
      default:
        name: Polymorphism
        description: ''
    protocol: !Protocols {}
  - !OperationGroup 
    $key: polymorphicrecursive
    operations:
      - !Operation 
        operationId: polymorphicrecursive_getValid
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/polymorphicrecursive/valid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_41
            language: !Languages 
              default:
                name: ''
                description: |-
                  Complex object that extends cat and pet, returns a Salmon like this:
                  {
                          'fishtype':'Salmon',
                          'location':'alaska',
                          'iswild':true,
                          'species':'king',
                          'length':1,
                          'siblings':[
                            {
                              'fishtype':'Shark',
                              'age':6,
                              'birthday': '2012-01-05T01:00:00Z',
                              'species':'predator',
                              'length':20,
                              'siblings':[
                                  {
                                      'fishtype':'Salmon',
                                      'location':'atlantic',
                                      'iswild':true,
                                      'species':'coho',
                                      'length':2,
                                      'siblings':[
                                        {
                                          'fishtype':'Shark',
                                          'age':6,
                                          'birthday': '2012-01-05T01:00:00Z',
                                          'species':'predator',
                                          'length':20
                                        },
                                        {
                                          'fishtype':'Sawshark',
                                          'age':105,
                                          'birthday': '1900-01-05T01:00:00Z',
                                          'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
                                          'species':'dangerous',
                                          'length':10
                                        }
                                      ]
                                  },
                                  {
                                      'fishtype':'Sawshark',
                                      'age':105,
                                      'birthday': '1900-01-05T01:00:00Z',
                                      'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
                                      'species':'dangerous',
                                      'length':10,
                                      'siblings':[]
                                  }
                              ]
                            },
                            {
                              'fishtype':'Sawshark',
                              'age':105,
                              'birthday': '1900-01-05T01:00:00Z',
                              'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
                              'species':'dangerous',
                              'length':10,'siblings':[]
                            }
                          ]
                      };
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetValid
            description: Get complex types that are polymorphic and have recursive references
        protocol: !Protocols {}
      - !Operation 
        operationId: polymorphicrecursive_putValid
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_142
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_141
                schema: *ref_41
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: |-
                      Please put a salmon that looks like this:
                      {
                          "fishtype": "salmon",
                          "species": "king",
                          "length": 1,
                          "age": 1,
                          "location": "alaska",
                          "iswild": true,
                          "siblings": [
                              {
                                  "fishtype": "shark",
                                  "species": "predator",
                                  "length": 20,
                                  "age": 6,
                                  "siblings": [
                                      {
                                          "fishtype": "salmon",
                                          "species": "coho",
                                          "length": 2,
                                          "age": 2,
                                          "location": "atlantic",
                                          "iswild": true,
                                          "siblings": [
                                              {
                                                  "fishtype": "shark",
                                                  "species": "predator",
                                                  "length": 20,
                                                  "age": 6
                                              },
                                              {
                                                  "fishtype": "sawshark",
                                                  "species": "dangerous",
                                                  "length": 10,
                                                  "age": 105
                                              }
                                          ]
                                      },
                                      {
                                          "fishtype": "sawshark",
                                          "species": "dangerous",
                                          "length": 10,
                                          "age": 105
                                      }
                                  ]
                              },
                              {
                                  "fishtype": "sawshark",
                                  "species": "dangerous",
                                  "length": 10,
                                  "age": 105
                              }
                          ]
                      }
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_141
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/polymorphicrecursive/valid
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_142
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: PutValid
            description: Put complex types that are polymorphic and have recursive references
        protocol: !Protocols {}
    language: !Languages 
      default:
        name: Polymorphicrecursive
        description: ''
    protocol: !Protocols {}
  - !OperationGroup 
    $key: readonlyproperty
    operations:
      - !Operation 
        operationId: readonlyproperty_getValid
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/readonlyproperty/valid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_143
            language: !Languages 
              default:
                name: ''
                description: OK
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !Languages 
          default:
            name: GetValid
            description: Get complex types that have readonly properties
        protocol: !Protocols {}
      - !Operation 
        operationId: readonlyproperty_putValid
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requestMediaTypes:
          application/json: !Request &ref_145
            parameters:
              - !Parameter 
                schema: *ref_84
                implementation: Method
                origin: modelerfour:synthesized/content-type
                required: true
                language: !Languages 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
              - !Parameter &ref_144
                schema: *ref_143
                implementation: Method
                required: true
                language: !Languages 
                  default:
                    name: complexBody
                    description: ''
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: body
                    style: json
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters:
              - *ref_144
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpWithBodyRequest 
                path: /complex/readonlyproperty/valid
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        requests:
          - *ref_145
        signatureParameters: []
        responses:
          - !Response 
            language: !Languages 
              default:
                name: ''
                description: Empty Response
            protocol: !Protocols 
              http: !HttpResponse 
                statusCodes:
                  - '200'
        exceptions:
          - !SchemaResponse 
            schema: *ref_82
            language: !Languages 
              default:
                name: ''
                description: Unexpected error
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        extensions:
          x-ms-examples:
            readonlyproperty_putValid:
              $ref: ./examples/readonlyproperty_putValid.json
        language: !Languages 
          default:
            name: PutValid
            description: Put complex types that have readonly properties
        protocol: !Protocols {}
    language: !Languages 
      default:
        name: Readonlyproperty
        description: ''
    protocol: !Protocols {}
  - !OperationGroup 
    $key: flattencomplex
    operations:
      - !Operation 
        operationId: flattencomplex_getValid
        apiVersions:
          - !ApiVersion 
            version: '2016-02-29'
        parameters:
          - *ref_79
        requests:
          - !Request 
            parameters:
              - !Parameter 
                schema: *ref_80
                implementation: Method
                origin: modelerfour:synthesized/accept
                required: true
                language: !Languages 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !Protocols 
                  http: !HttpParameter 
                    in: header
            signatureParameters: []
            language: !Languages 
              default:
                name: ''
                description: ''
            protocol: !Protocols 
              http: !HttpRequest 
                path: /complex/flatten/valid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !SchemaResponse 
            schema: *ref_66
            language: !Languages 
              default:
                name: ''
                description: OK
            protocol: !Protocols 
              http: !HttpResponse 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        language: !Languages 
          default:
            name: GetValid
            description: ''
        protocol: !Protocols {}
    language: !Languages 
      default:
        name: Flattencomplex
        description: ''
    protocol: !Protocols {}
security: !Security 
  authenticationRequired: false
  schemes: []
language: !Languages 
  default:
    name: AutoRestComplexTestService
    description: ''
protocol: !Protocols 
  http: !HttpModel {}
