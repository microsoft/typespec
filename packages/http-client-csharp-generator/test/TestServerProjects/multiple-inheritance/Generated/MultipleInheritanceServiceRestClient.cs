// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using multiple_inheritance.Models;

namespace multiple_inheritance
{
    internal partial class MultipleInheritanceServiceRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of MultipleInheritanceServiceRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public MultipleInheritanceServiceRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("http://localhost:3000");
        }

        internal HttpMessage CreateGetHorseRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/multipleInheritance/horse", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a horse with name 'Fred' and isAShowHorse true. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<Horse>> GetHorseAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetHorseRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Horse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Horse.DeserializeHorse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a horse with name 'Fred' and isAShowHorse true. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Horse> GetHorse(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetHorseRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Horse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Horse.DeserializeHorse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutHorseRequest(Horse horse)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/multipleInheritance/horse", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(horse);
            request.Content = content;
            return message;
        }

        /// <summary> Put a horse with name 'General' and isAShowHorse false. </summary>
        /// <param name="horse"> Put a horse with name 'General' and isAShowHorse false. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="horse"/> is null. </exception>
        public async Task<Response<string>> PutHorseAsync(Horse horse, CancellationToken cancellationToken = default)
        {
            if (horse == null)
            {
                throw new ArgumentNullException(nameof(horse));
            }

            using var message = CreatePutHorseRequest(horse);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        string value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = document.RootElement.GetString();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Put a horse with name 'General' and isAShowHorse false. </summary>
        /// <param name="horse"> Put a horse with name 'General' and isAShowHorse false. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="horse"/> is null. </exception>
        public Response<string> PutHorse(Horse horse, CancellationToken cancellationToken = default)
        {
            if (horse == null)
            {
                throw new ArgumentNullException(nameof(horse));
            }

            using var message = CreatePutHorseRequest(horse);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        string value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = document.RootElement.GetString();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPetRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/multipleInheritance/pet", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a pet with name 'Peanut'. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<Pet>> GetPetAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPetRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Pet value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Pet.DeserializePet(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a pet with name 'Peanut'. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Pet> GetPet(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPetRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Pet value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Pet.DeserializePet(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutPetRequest(Pet pet)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/multipleInheritance/pet", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(pet);
            request.Content = content;
            return message;
        }

        /// <summary> Put a pet with name 'Butter'. </summary>
        /// <param name="pet"> Put a pet with name 'Butter'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pet"/> is null. </exception>
        public async Task<Response<string>> PutPetAsync(Pet pet, CancellationToken cancellationToken = default)
        {
            if (pet == null)
            {
                throw new ArgumentNullException(nameof(pet));
            }

            using var message = CreatePutPetRequest(pet);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        string value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = document.RootElement.GetString();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Put a pet with name 'Butter'. </summary>
        /// <param name="pet"> Put a pet with name 'Butter'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pet"/> is null. </exception>
        public Response<string> PutPet(Pet pet, CancellationToken cancellationToken = default)
        {
            if (pet == null)
            {
                throw new ArgumentNullException(nameof(pet));
            }

            using var message = CreatePutPetRequest(pet);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        string value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = document.RootElement.GetString();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetFelineRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/multipleInheritance/feline", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a feline where meows and hisses are true. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<Feline>> GetFelineAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetFelineRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Feline value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Feline.DeserializeFeline(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a feline where meows and hisses are true. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Feline> GetFeline(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetFelineRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Feline value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Feline.DeserializeFeline(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutFelineRequest(Feline feline)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/multipleInheritance/feline", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(feline);
            request.Content = content;
            return message;
        }

        /// <summary> Put a feline who hisses and doesn't meow. </summary>
        /// <param name="feline"> Put a feline who hisses and doesn't meow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="feline"/> is null. </exception>
        public async Task<Response<string>> PutFelineAsync(Feline feline, CancellationToken cancellationToken = default)
        {
            if (feline == null)
            {
                throw new ArgumentNullException(nameof(feline));
            }

            using var message = CreatePutFelineRequest(feline);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        string value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = document.RootElement.GetString();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Put a feline who hisses and doesn't meow. </summary>
        /// <param name="feline"> Put a feline who hisses and doesn't meow. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="feline"/> is null. </exception>
        public Response<string> PutFeline(Feline feline, CancellationToken cancellationToken = default)
        {
            if (feline == null)
            {
                throw new ArgumentNullException(nameof(feline));
            }

            using var message = CreatePutFelineRequest(feline);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        string value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = document.RootElement.GetString();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCatRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/multipleInheritance/cat", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a cat with name 'Whiskers' where likesMilk, meows, and hisses is true. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<Cat>> GetCatAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetCatRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Cat value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Cat.DeserializeCat(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a cat with name 'Whiskers' where likesMilk, meows, and hisses is true. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Cat> GetCat(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetCatRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Cat value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Cat.DeserializeCat(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutCatRequest(Cat cat)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/multipleInheritance/cat", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(cat);
            request.Content = content;
            return message;
        }

        /// <summary> Put a cat with name 'Boots' where likesMilk and hisses is false, meows is true. </summary>
        /// <param name="cat"> Put a cat with name 'Boots' where likesMilk and hisses is false, meows is true. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cat"/> is null. </exception>
        public async Task<Response<string>> PutCatAsync(Cat cat, CancellationToken cancellationToken = default)
        {
            if (cat == null)
            {
                throw new ArgumentNullException(nameof(cat));
            }

            using var message = CreatePutCatRequest(cat);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        string value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = document.RootElement.GetString();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Put a cat with name 'Boots' where likesMilk and hisses is false, meows is true. </summary>
        /// <param name="cat"> Put a cat with name 'Boots' where likesMilk and hisses is false, meows is true. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cat"/> is null. </exception>
        public Response<string> PutCat(Cat cat, CancellationToken cancellationToken = default)
        {
            if (cat == null)
            {
                throw new ArgumentNullException(nameof(cat));
            }

            using var message = CreatePutCatRequest(cat);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        string value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = document.RootElement.GetString();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetKittenRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/multipleInheritance/kitten", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get a kitten with name 'Gatito' where likesMilk and meows is true, and hisses and eatsMiceYet is false. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<Kitten>> GetKittenAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetKittenRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Kitten value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Kitten.DeserializeKitten(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a kitten with name 'Gatito' where likesMilk and meows is true, and hisses and eatsMiceYet is false. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Kitten> GetKitten(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetKittenRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Kitten value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Kitten.DeserializeKitten(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutKittenRequest(Kitten kitten)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/multipleInheritance/kitten", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(kitten);
            request.Content = content;
            return message;
        }

        /// <summary> Put a kitten with name 'Kitty' where likesMilk and hisses is false, meows and eatsMiceYet is true. </summary>
        /// <param name="kitten"> Put a kitten with name 'Kitty' where likesMilk and hisses is false, meows and eatsMiceYet is true. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="kitten"/> is null. </exception>
        public async Task<Response<string>> PutKittenAsync(Kitten kitten, CancellationToken cancellationToken = default)
        {
            if (kitten == null)
            {
                throw new ArgumentNullException(nameof(kitten));
            }

            using var message = CreatePutKittenRequest(kitten);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        string value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = document.RootElement.GetString();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Put a kitten with name 'Kitty' where likesMilk and hisses is false, meows and eatsMiceYet is true. </summary>
        /// <param name="kitten"> Put a kitten with name 'Kitty' where likesMilk and hisses is false, meows and eatsMiceYet is true. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="kitten"/> is null. </exception>
        public Response<string> PutKitten(Kitten kitten, CancellationToken cancellationToken = default)
        {
            if (kitten == null)
            {
                throw new ArgumentNullException(nameof(kitten));
            }

            using var message = CreatePutKittenRequest(kitten);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        string value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = document.RootElement.GetString();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
