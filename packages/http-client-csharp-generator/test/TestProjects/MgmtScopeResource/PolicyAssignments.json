{
    "swagger": "2.0",
    "info": {
      "title": "PolicyClient",
      "version": "2020-09-01",
      "description": "To manage and control access to your resources, you can define customized policies and assign them at a scope."
    },
    "host": "management.azure.com",
    "schemes": [
      "https"
    ],
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "security": [
      {
        "azure_auth": [
          "user_impersonation"
        ]
      }
    ],
    "securityDefinitions": {
      "azure_auth": {
        "type": "oauth2",
        "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
        "flow": "implicit",
        "description": "Azure Active Directory OAuth2 Flow",
        "scopes": {
          "user_impersonation": "impersonate your user account"
        }
      }
    },
    "paths": {
      "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}": {
        "delete": {
          "tags": [
            "FakePolicyAssignments"
          ],
          "operationId": "FakePolicyAssignments_Delete",
          "summary": "Deletes a policy assignment.",
          "description": "This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy assignment is the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.",
          "parameters": [
            {
              "name": "scope",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'",
              "x-ms-skip-url-encoding": true
            },
            {
              "name": "policyAssignmentName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The name of the policy assignment to delete."
            },
            {
              "$ref": "#/parameters/ApiVersionParameter"
            }
          ],
          "responses": {
            "200": {
              "description": "OK - Returns information about the deleted assignment.",
              "schema": {
                "$ref": "#/definitions/FakePolicyAssignment"
              }
            },
            "204": {
              "description": "No Content - the policy assignment doesn't exist."
            },
            "default": {
              "description": "Error response describing why the operation failed.",
              "schema": {
                "$ref": "#/definitions/CloudError"
              }
            }
          }
        },
        "put": {
          "tags": [
            "FakePolicyAssignments"
          ],
          "operationId": "FakePolicyAssignments_Create",
          "summary": "Creates or updates a policy assignment.",
          "description": " This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group.",
          "parameters": [
            {
              "name": "scope",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'",
              "x-ms-skip-url-encoding": true
            },
            {
              "name": "policyAssignmentName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The name of the policy assignment."
            },
            {
              "name": "parameters",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/FakePolicyAssignment"
              },
              "description": "Parameters for the policy assignment."
            },
            {
              "$ref": "#/parameters/ApiVersionParameter"
            }
          ],
          "responses": {
            "201": {
              "description": "Created - Returns information about the new policy assignment.",
              "schema": {
                "$ref": "#/definitions/FakePolicyAssignment"
              }
            },
            "default": {
              "description": "Error response describing why the operation failed.",
              "schema": {
                "$ref": "#/definitions/CloudError"
              }
            }
          }
        },
        "get": {
          "tags": [
            "FakePolicyAssignments"
          ],
          "operationId": "FakePolicyAssignments_Get",
          "summary": "Retrieves a policy assignment.",
          "description": "This operation retrieves a single policy assignment, given its name and the scope it was created at.",
          "parameters": [
            {
              "name": "scope",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'",
              "x-ms-skip-url-encoding": true
            },
            {
              "name": "policyAssignmentName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The name of the policy assignment to get."
            },
            {
              "$ref": "#/parameters/ApiVersionParameter"
            }
          ],
          "responses": {
            "200": {
              "description": "OK - Returns information about the policy assignment.",
              "schema": {
                "$ref": "#/definitions/FakePolicyAssignment"
              }
            },
            "default": {
              "description": "Error response describing why the operation failed.",
              "schema": {
                "$ref": "#/definitions/CloudError"
              }
            }
          }
        }
      },
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments": {
        "get": {
          "tags": [
            "FakePolicyAssignments"
          ],
          "operationId": "FakePolicyAssignments_ListForResourceGroup",
          "summary": "Retrieves all policy assignments that apply to a resource group.",
          "description": "This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource group.",
          "parameters": [
            {
              "name": "resourceGroupName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The name of the resource group that contains policy assignments.",
              "pattern": "^[-\\w\\._\\(\\)]+$",
              "minLength": 1,
              "maxLength": 90
            },
            {
              "$ref": "#/parameters/FakePolicyAssignmentsFilterParameter"
            },
            {
              "$ref": "#/parameters/TopParameter"
            },
            {
              "$ref": "#/parameters/ApiVersionParameter"
            },
            {
              "$ref": "#/parameters/SubscriptionIdParameter"
            }
          ],
          "responses": {
            "200": {
              "description": "OK - Returns an array of policy assignments.",
              "schema": {
                "$ref": "#/definitions/FakePolicyAssignmentListResult"
              }
            },
            "default": {
              "description": "Error response describing why the operation failed.",
              "schema": {
                "$ref": "#/definitions/CloudError"
              }
            }
          },
          "x-ms-pageable": {
            "nextLinkName": "nextLink"
          }
        }
      },
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/policyAssignments": {
        "get": {
          "tags": [
            "FakePolicyAssignments"
          ],
          "operationId": "FakePolicyAssignments_ListForResource",
          "summary": "Retrieves all policy assignments that apply to a resource.",
          "description": "This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the resource level. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} == 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} == 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '', {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').",
          "deprecated": false,
          "parameters": [
            {
              "name": "resourceGroupName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The name of the resource group containing the resource.",
              "pattern": "^[-\\w\\._\\(\\)]+$",
              "minLength": 1,
              "maxLength": 90
            },
            {
              "name": "resourceProviderNamespace",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The namespace of the resource provider. For example, the namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)"
            },
            {
              "name": "parentResourcePath",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The parent resource path. Use empty string if there is none.",
              "x-ms-skip-url-encoding": true
            },
            {
              "name": "resourceType",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The resource type name. For example the type name of a web app is 'sites' (from Microsoft.Web/sites).",
              "x-ms-skip-url-encoding": true
            },
            {
              "name": "resourceName",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The name of the resource."
            },
            {
              "$ref": "#/parameters/FakePolicyAssignmentsFilterParameter"
            },
            {
              "$ref": "#/parameters/TopParameter"
            },
            {
              "$ref": "#/parameters/ApiVersionParameter"
            },
            {
              "$ref": "#/parameters/SubscriptionIdParameter"
            }
          ],
          "responses": {
            "200": {
              "description": "OK - Returns an array of policy assignments.",
              "schema": {
                "$ref": "#/definitions/FakePolicyAssignmentListResult"
              }
            },
            "default": {
              "description": "Error response describing why the operation failed.",
              "schema": {
                "$ref": "#/definitions/CloudError"
              }
            }
          },
          "x-ms-pageable": {
            "nextLinkName": "nextLink"
          },
          "x-ms-odata": "#/definitions/PolicyAssignment"
        }
      },
      "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyAssignments": {
        "get": {
          "tags": [
            "FakePolicyAssignments"
          ],
          "operationId": "FakePolicyAssignments_ListForManagementGroup",
          "summary": "Retrieves all policy assignments that apply to a management group.",
          "description": "This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management group or the management group's ancestors. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the management group. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the management group.",
          "parameters": [
            {
              "$ref": "#/parameters/ManagementGroupIdParameter"
            },
            {
              "$ref": "#/parameters/FakePolicyAssignmentsFilterParameter"
            },
            {
              "$ref": "#/parameters/TopParameter"
            },
            {
              "$ref": "#/parameters/ApiVersionParameter"
            }
          ],
          "responses": {
            "200": {
              "description": "OK - Returns an array of policy assignments.",
              "schema": {
                "$ref": "#/definitions/FakePolicyAssignmentListResult"
              }
            },
            "default": {
              "description": "Error response describing why the operation failed.",
              "schema": {
                "$ref": "#/definitions/CloudError"
              }
            }
          },
          "x-ms-pageable": {
            "nextLinkName": "nextLink"
          }
        }
      },
      "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments": {
        "get": {
          "tags": [
            "FakePolicyAssignments"
          ],
          "operationId": "FakePolicyAssignments_List",
          "summary": "Retrieves all policy assignments that apply to a subscription.",
          "description": "This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the subscription. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}.",
          "parameters": [
            {
              "$ref": "#/parameters/FakePolicyAssignmentsFilterParameter"
            },
            {
              "$ref": "#/parameters/TopParameter"
            },
            {
              "$ref": "#/parameters/ApiVersionParameter"
            },
            {
              "$ref": "#/parameters/SubscriptionIdParameter"
            }
          ],
          "responses": {
            "200": {
              "description": "OK - Returns an array of policy assignments.",
              "schema": {
                "$ref": "#/definitions/FakePolicyAssignmentListResult"
              }
            },
            "default": {
              "description": "Error response describing why the operation failed.",
              "schema": {
                "$ref": "#/definitions/CloudError"
              }
            }
          },
          "x-ms-pageable": {
            "nextLinkName": "nextLink"
          },
          "x-ms-odata": "#/definitions/FakePolicyAssignment"
        }
      },
      "/{policyAssignmentId}": {
        "delete": {
          "tags": [
            "FakePolicyAssignments"
          ],
          "operationId": "FakePolicyAssignments_DeleteById",
          "summary": "Deletes a policy assignment.",
          "description": "This operation deletes the policy with the given ID. Policy assignment IDs have this format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid formats for {scope} are: '/providers/Microsoft.Management/managementGroups/{managementGroup}' (management group), '/subscriptions/{subscriptionId}' (subscription), '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' (resource group), or '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}' (resource).",
          "parameters": [
            {
              "name": "policyAssignmentId",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The ID of the policy assignment to delete. Use the format '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.",
              "x-ms-skip-url-encoding": true
            },
            {
              "$ref": "#/parameters/ApiVersionParameter"
            }
          ],
          "responses": {
            "200": {
              "description": "OK - Returns information about the policy assignment.",
              "schema": {
                "$ref": "#/definitions/FakePolicyAssignment"
              }
            },
            "204": {
              "description": "No Content - the policy assignment doesn't exist."
            },
            "default": {
              "description": "Error response describing why the operation failed.",
              "schema": {
                "$ref": "#/definitions/CloudError"
              }
            }
          }
        },
        "put": {
          "tags": [
            "FakePolicyAssignments"
          ],
          "operationId": "FakePolicyAssignments_CreateById",
          "summary": "Creates or updates a policy assignment.",
          "description": "This operation creates or updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that scope. For example, when you assign a policy to a resource group that policy applies to all resources in the group. Policy assignment IDs have this format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.",
          "parameters": [
            {
              "name": "policyAssignmentId",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The ID of the policy assignment to create. Use the format '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.",
              "x-ms-skip-url-encoding": true
            },
            {
              "name": "parameters",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/FakePolicyAssignment"
              },
              "description": "Parameters for policy assignment."
            },
            {
              "$ref": "#/parameters/ApiVersionParameter"
            }
          ],
          "responses": {
            "201": {
              "description": "Created - Returns information about the policy assignment.",
              "schema": {
                "$ref": "#/definitions/FakePolicyAssignment"
              }
            },
            "default": {
              "description": "Error response describing why the operation failed.",
              "schema": {
                "$ref": "#/definitions/CloudError"
              }
            }
          }
        },
        "get": {
          "tags": [
            "FakePolicyAssignments"
          ],
          "operationId": "FakePolicyAssignments_GetById",
          "summary": "Retrieves the policy assignment with the given ID.",
          "description": "The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.",
          "parameters": [
            {
              "name": "policyAssignmentId",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "The ID of the policy assignment to get. Use the format '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.",
              "x-ms-skip-url-encoding": true
            },
            {
              "$ref": "#/parameters/ApiVersionParameter"
            }
          ],
          "responses": {
            "200": {
              "description": "OK - Returns information about the policy assignment.",
              "schema": {
                "$ref": "#/definitions/FakePolicyAssignment"
              }
            },
            "default": {
              "description": "Error response describing why the operation failed.",
              "schema": {
                "$ref": "#/definitions/CloudError"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "CloudError": {
        "x-ms-external": true,
        "properties": {
          "errorResponse": {
            "$ref": "#/definitions/ErrorResponse"
          }
        },
        "description": "An error response from a policy operation."
      },
      "ErrorResponse": {
        "description": "Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message.",
        "type": "object",
        "properties": {
            "error": {
                "type": "string",
                "description": "The details of the error."
            }
        }
      },
      "FakePolicyAssignmentProperties": {
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the policy assignment."
          },
          "policyDefinitionId": {
            "type": "string",
            "description": "The ID of the policy definition or policy set definition being assigned."
          },
          "scope": {
            "type": "string",
            "description": "The scope for the policy assignment.",
            "readOnly": true
          },
          "notScopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The policy's excluded scopes."
          },
          "parameters": {
            "description": "The parameter values for the assigned policy rule. The keys are the parameter names.",
            "$ref": "#/definitions/ParameterValues"
          },
          "description": {
            "type": "string",
            "description": "This message will be part of response in case of policy violation."
          },
          "metadata": {
            "type": "object",
            "description": "The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs."
          },
          "enforcementMode": {
            "type": "string",
            "description": "The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.",
            "enum": [
              "Default",
              "DoNotEnforce"
            ],
            "x-ms-enum": {
              "name": "enforcementMode",
              "modelAsString": true,
              "values": [
                {
                  "value": "Default",
                  "description": "The policy effect is enforced during resource creation or update."
                },
                {
                  "value": "DoNotEnforce",
                  "description": "The policy effect is not enforced during resource creation or update."
                }
              ]
            },
            "default": "Default"
          },
          "nonComplianceMessages": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/NonComplianceMessage"
            },
            "description": "The messages that describe why a resource is non-compliant with the policy."
          }
        },
        "description": "The policy assignment properties."
      },
      "NonComplianceMessage": {
        "properties": {
          "message": {
            "type": "string",
            "description": "A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results."
          },
          "policyDefinitionReferenceId": {
            "type": "string",
            "description": "The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment."
          }
        },
        "required": [
          "message"
        ],
        "description": "A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results."
      },
      "ParameterValues": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/definitions/ParameterValuesValue"
        },
        "description": "The parameter values for the policy rule. The keys are the parameter names."
      },
      "ParameterValuesValue": {
        "properties": {
          "value": {
            "description": "The value of the parameter.",
            "type": "object"
          }
        },
        "description": "The value of a parameter."
      },
      "FakePolicyAssignment": {
        "properties": {
          "properties": {
            "x-ms-client-flatten": true,
            "$ref": "#/definitions/FakePolicyAssignmentProperties",
            "description": "Properties for the policy assignment."
          },
          "id": {
            "type": "string",
            "description": "The ID of the policy assignment.",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The type of the policy assignment.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the policy assignment.",
            "readOnly": true
          },
          "location": {
            "type": "string",
            "description": "The location of the policy assignment. Only required when utilizing managed identity."
          },
          "identity": {
            "$ref": "#/definitions/Identity",
            "description": "The managed identity associated with the policy assignment."
          }
        },
        "description": "The policy assignment.",
        "x-ms-azure-resource": true
      },
      "FakePolicyAssignmentListResult": {
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FakePolicyAssignment"
            },
            "description": "An array of policy assignments."
          },
          "nextLink": {
            "type": "string",
            "description": "The URL to use for getting the next set of results."
          }
        },
        "description": "List of policy assignments."
      },
      "Identity": {
        "properties": {
          "principalId": {
            "readOnly": true,
            "type": "string",
            "description": "The principal ID of the resource identity."
          },
          "tenantId": {
            "readOnly": true,
            "type": "string",
            "description": "The tenant ID of the resource identity."
          },
          "type": {
            "type": "string",
            "description": "The identity type. This is the only required field when adding a system assigned identity to a resource.",
            "enum": [
              "SystemAssigned",
              "None"
            ],
            "x-ms-enum": {
              "name": "ResourceIdentityType",
              "modelAsString": false,
              "values": [
                {
                  "value": "SystemAssigned",
                  "description": "Indicates that a system assigned identity is associated with the resource."
                },
                {
                  "value": "None",
                  "description": "Indicates that no identity is associated with the resource or that the existing identity should be removed."
                }
              ]
            }
          }
        },
        "description": "Identity for the resource."
      }
    },
    "parameters": {
      "SubscriptionIdParameter": {
        "name": "subscriptionId",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "The ID of the target subscription."
      },
      "ApiVersionParameter": {
        "name": "api-version",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "The API version to use for the operation."
      },
      "ManagementGroupIdParameter": {
        "name": "managementGroupId",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "The ID of the management group.",
        "x-ms-parameter-location": "method"
      },
      "FakePolicyAssignmentsFilterParameter": {
        "name": "$filter",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}.",
        "x-ms-skip-url-encoding": true,
        "x-ms-parameter-location": "method"
      },
      "TopParameter": {
        "name": "$top",
        "in": "query",
        "required": false,
        "type": "integer",
        "format": "int32",
        "minimum": 1,
        "maximum": 1000,
        "description": "Maximum number of records to return. When the $top filter is not provided, it will return 500 records.",
        "x-ms-parameter-location": "method"
      }
    }
  }
