// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace ModelReaderWriterValidationTypeSpec.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ModelReaderWriterValidationTypeSpecModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.ModelWithPersistableOnly"/>. </summary>
        /// <param name="name"> The name. </param>
        /// <param name="fields"> The fields property. </param>
        /// <param name="nullProperty"> The nullable property. </param>
        /// <param name="keyValuePairs"> The key value pairs property. </param>
        /// <param name="xProperty"> The x property. </param>
        /// <returns> A new <see cref="Models.ModelWithPersistableOnly"/> instance for mocking. </returns>
        public static ModelWithPersistableOnly ModelWithPersistableOnly(string name = null, IEnumerable<string> fields = null, int? nullProperty = null, IDictionary<string, string> keyValuePairs = null, int xProperty = default)
        {
            fields ??= new List<string>();
            keyValuePairs ??= new Dictionary<string, string>();

            return new ModelWithPersistableOnly(
                name,
                fields?.ToList(),
                nullProperty,
                keyValuePairs,
                xProperty,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TrackedResourceData"/>. </summary>
        /// <param name="id"> The id property. </param>
        /// <param name="name"> The name property. </param>
        /// <param name="resourceType"> The resource type. </param>
        /// <param name="location"> The location property. </param>
        /// <param name="tags"> The tags property. </param>
        /// <returns> A new <see cref="Models.TrackedResourceData"/> instance for mocking. </returns>
        public static TrackedResourceData TrackedResourceData(string id = null, string name = null, string resourceType = null, string location = null, IReadOnlyDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new TrackedResourceData(
                id,
                name,
                resourceType,
                location,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AvailabilitySetData"/>. </summary>
        /// <param name="id"> The id property. </param>
        /// <param name="name"> The name property. </param>
        /// <param name="resourceType"> The resource type. </param>
        /// <param name="location"> The location property. </param>
        /// <param name="tags"> The tags property. </param>
        /// <param name="sku"> The sku. </param>
        /// <param name="properties"> The properties property. </param>
        /// <returns> A new <see cref="Models.AvailabilitySetData"/> instance for mocking. </returns>
        public static AvailabilitySetData AvailabilitySetData(string id = null, string name = null, string resourceType = null, string location = null, IReadOnlyDictionary<string, string> tags = null, ComputeSku sku = null, AvailabilitySetProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new AvailabilitySetData(
                id,
                name,
                resourceType,
                location,
                tags,
                serializedAdditionalRawData: null,
                sku,
                properties);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceProviderData"/>. </summary>
        /// <param name="id"> The provider ID. </param>
        /// <param name="namespace"> The namespace of the resource provider. </param>
        /// <param name="registrationState"> The registration state of the resource provider. </param>
        /// <param name="registrationPolicy"> The registration policy of the resource provider. </param>
        /// <param name="resourceTypes"> The collection of provider resource types. </param>
        /// <param name="providerAuthorizationConsentState"> The provider authorization consent state. </param>
        /// <returns> A new <see cref="Models.ResourceProviderData"/> instance for mocking. </returns>
        public static ResourceProviderData ResourceProviderData(string id = null, string @namespace = null, string registrationState = null, string registrationPolicy = null, IEnumerable<ProviderResourceType> resourceTypes = null, ProviderAuthorizationConsentState? providerAuthorizationConsentState = null)
        {
            resourceTypes ??= new List<ProviderResourceType>();

            return new ResourceProviderData(
                id,
                @namespace,
                registrationState,
                registrationPolicy,
                resourceTypes?.ToList(),
                providerAuthorizationConsentState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProviderResourceType"/>. </summary>
        /// <param name="resourceType"> The resource type. </param>
        /// <param name="locations"> The collection of locations where this resource type can be created. </param>
        /// <param name="locationMappings"> The location mappings that are supported by this resource type. </param>
        /// <param name="aliases"> The aliases that are supported by this resource type. </param>
        /// <param name="apiVersions"> The API version. </param>
        /// <param name="defaultApiVersion"> The default API version. </param>
        /// <param name="zoneMappings"> Gets the zone mappings. </param>
        /// <param name="apiProfiles"> The API profiles for the resource provider. </param>
        /// <param name="capabilities"> The additional capabilities offered by this resource type. </param>
        /// <param name="properties"> The properties. </param>
        /// <returns> A new <see cref="Models.ProviderResourceType"/> instance for mocking. </returns>
        public static ProviderResourceType ProviderResourceType(string resourceType = null, IEnumerable<string> locations = null, IEnumerable<ProviderExtendedLocation> locationMappings = null, IEnumerable<ResourceTypeAlias> aliases = null, IEnumerable<string> apiVersions = null, string defaultApiVersion = null, IEnumerable<ZoneMapping> zoneMappings = null, IEnumerable<ApiProfile> apiProfiles = null, string capabilities = null, IReadOnlyDictionary<string, string> properties = null)
        {
            locations ??= new List<string>();
            locationMappings ??= new List<ProviderExtendedLocation>();
            aliases ??= new List<ResourceTypeAlias>();
            apiVersions ??= new List<string>();
            zoneMappings ??= new List<ZoneMapping>();
            apiProfiles ??= new List<ApiProfile>();
            properties ??= new Dictionary<string, string>();

            return new ProviderResourceType(
                resourceType,
                locations?.ToList(),
                locationMappings?.ToList(),
                aliases?.ToList(),
                apiVersions?.ToList(),
                defaultApiVersion,
                zoneMappings?.ToList(),
                apiProfiles?.ToList(),
                capabilities,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProviderExtendedLocation"/>. </summary>
        /// <param name="location"> The azure location. </param>
        /// <param name="providerExtendedLocationType"> The extended location type. </param>
        /// <param name="extendedLocations"> The extended locations for the azure location. </param>
        /// <returns> A new <see cref="Models.ProviderExtendedLocation"/> instance for mocking. </returns>
        public static ProviderExtendedLocation ProviderExtendedLocation(string location = null, string providerExtendedLocationType = null, IEnumerable<string> extendedLocations = null)
        {
            extendedLocations ??= new List<string>();

            return new ProviderExtendedLocation(location, providerExtendedLocationType, extendedLocations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceTypeAlias"/>. </summary>
        /// <param name="name"> The alias name. </param>
        /// <param name="paths"> The paths for an alias. </param>
        /// <param name="aliasType"> The type of the alias. </param>
        /// <param name="defaultPath"> The default path for an alias. </param>
        /// <param name="defaultPattern"> The default pattern for an alias. </param>
        /// <param name="defaultMetadata"> The default alias path metadata. Applies to the default path and to any alias path that doesn't have metadata. </param>
        /// <returns> A new <see cref="Models.ResourceTypeAlias"/> instance for mocking. </returns>
        public static ResourceTypeAlias ResourceTypeAlias(string name = null, IEnumerable<ResourceTypeAliasPath> paths = null, ResourceTypeAliasType? aliasType = null, string defaultPath = null, ResourceTypeAliasPattern defaultPattern = null, ResourceTypeAliasPathMetadata defaultMetadata = null)
        {
            paths ??= new List<ResourceTypeAliasPath>();

            return new ResourceTypeAlias(
                name,
                paths?.ToList(),
                aliasType,
                defaultPath,
                defaultPattern,
                defaultMetadata,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceTypeAliasPath"/>. </summary>
        /// <param name="path"> The path of an alias. </param>
        /// <param name="apiVersions"> The API versions. </param>
        /// <param name="pattern"> The pattern for an alias path. </param>
        /// <param name="metadata"> The metadata of the alias path. If missing, fall back to the default metadata of the alias. </param>
        /// <returns> A new <see cref="Models.ResourceTypeAliasPath"/> instance for mocking. </returns>
        public static ResourceTypeAliasPath ResourceTypeAliasPath(string path = null, IEnumerable<string> apiVersions = null, ResourceTypeAliasPattern pattern = null, ResourceTypeAliasPathMetadata metadata = null)
        {
            apiVersions ??= new List<string>();

            return new ResourceTypeAliasPath(path, apiVersions?.ToList(), pattern, metadata, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceTypeAliasPattern"/>. </summary>
        /// <param name="phrase"> The alias pattern phrase. </param>
        /// <param name="variable"> The alias pattern variable. </param>
        /// <param name="patternType"> The type of alias pattern. </param>
        /// <returns> A new <see cref="Models.ResourceTypeAliasPattern"/> instance for mocking. </returns>
        public static ResourceTypeAliasPattern ResourceTypeAliasPattern(string phrase = null, string variable = null, ResourceTypeAliasPatternType? patternType = null)
        {
            return new ResourceTypeAliasPattern(phrase, variable, patternType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceTypeAliasPathMetadata"/>. </summary>
        /// <param name="tokenType"> The type of the token that the alias path is referring to. </param>
        /// <param name="attributes"> The attributes of the token that the alias path is referring to. </param>
        /// <returns> A new <see cref="Models.ResourceTypeAliasPathMetadata"/> instance for mocking. </returns>
        public static ResourceTypeAliasPathMetadata ResourceTypeAliasPathMetadata(ResourceTypeAliasPathTokenType? tokenType = null, ResourceTypeAliasPathAttributes? attributes = null)
        {
            return new ResourceTypeAliasPathMetadata(tokenType, attributes, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ZoneMapping"/>. </summary>
        /// <param name="location"> The location of the zone mapping. </param>
        /// <param name="zones"> The zones. </param>
        /// <returns> A new <see cref="Models.ZoneMapping"/> instance for mocking. </returns>
        public static ZoneMapping ZoneMapping(string location = null, IEnumerable<string> zones = null)
        {
            zones ??= new List<string>();

            return new ZoneMapping(location, zones?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ApiProfile"/>. </summary>
        /// <param name="profileVersion"> The profile version. </param>
        /// <param name="apiVersion"> The API version. </param>
        /// <returns> A new <see cref="Models.ApiProfile"/> instance for mocking. </returns>
        public static ApiProfile ApiProfile(string profileVersion = null, string apiVersion = null)
        {
            return new ApiProfile(profileVersion, apiVersion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ModelX"/>. </summary>
        /// <param name="name"> The name property. </param>
        /// <param name="fields"> Optional list. </param>
        /// <param name="nullProperty"> Nullable integer. </param>
        /// <param name="keyValuePairs"> Optional dictionary. </param>
        /// <param name="xProperty"> The XProperty property. </param>
        /// <returns> A new <see cref="Models.ModelX"/> instance for mocking. </returns>
        public static ModelX ModelX(string name = null, IEnumerable<string> fields = null, int? nullProperty = null, IDictionary<string, string> keyValuePairs = null, int xProperty = default)
        {
            fields ??= new List<string>();
            keyValuePairs ??= new Dictionary<string, string>();

            return new ModelX(
                "X",
                name,
                serializedAdditionalRawData: null,
                fields?.ToList(),
                nullProperty,
                keyValuePairs,
                xProperty);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ModelY"/>. </summary>
        /// <param name="name"> The name property. </param>
        /// <param name="yProperty"> The YProperty property. </param>
        /// <returns> A new <see cref="Models.ModelY"/> instance for mocking. </returns>
        public static ModelY ModelY(string name = null, string yProperty = null)
        {
            return new ModelY("Y", name, serializedAdditionalRawData: null, yProperty);
        }
    }
}
