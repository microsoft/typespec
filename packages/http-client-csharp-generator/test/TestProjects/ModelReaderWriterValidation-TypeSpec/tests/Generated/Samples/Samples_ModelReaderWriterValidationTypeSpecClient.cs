// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using ModelReaderWriterValidationTypeSpec;
using ModelReaderWriterValidationTypeSpec.Models;
using NUnit.Framework;

namespace ModelReaderWriterValidationTypeSpec.Samples
{
    public partial class Samples_ModelReaderWriterValidationTypeSpecClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op1_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                id = 1234,
            });
            Response response = client.Op1(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op1_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                id = 1234,
            });
            Response response = await client.Op1Async(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op1_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            ModelAsStruct body = new ModelAsStruct(1234);
            Response<ModelAsStruct> response = client.Op1(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op1_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            ModelAsStruct body = new ModelAsStruct(1234);
            Response<ModelAsStruct> response = await client.Op1Async(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op1_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                id = 1234,
            });
            Response response = client.Op1(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op1_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                id = 1234,
            });
            Response response = await client.Op1Async(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op1_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            ModelAsStruct body = new ModelAsStruct(1234);
            Response<ModelAsStruct> response = client.Op1(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op1_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            ModelAsStruct body = new ModelAsStruct(1234);
            Response<ModelAsStruct> response = await client.Op1Async(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op2_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Op2(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("xProperty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op2_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.Op2Async(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("xProperty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op2_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            ModelWithPersistableOnly body = new ModelWithPersistableOnly();
            Response<ModelWithPersistableOnly> response = client.Op2(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op2_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            ModelWithPersistableOnly body = new ModelWithPersistableOnly();
            Response<ModelWithPersistableOnly> response = await client.Op2Async(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op2_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                fields = new object[]
            {
"<fields>"
            },
                nullProperty = 1234,
                keyValuePairs = new
                {
                    key = "<keyValuePairs>",
                },
            });
            Response response = client.Op2(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("fields")[0].ToString());
            Console.WriteLine(result.GetProperty("nullProperty").ToString());
            Console.WriteLine(result.GetProperty("keyValuePairs").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("xProperty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op2_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                fields = new object[]
            {
"<fields>"
            },
                nullProperty = 1234,
                keyValuePairs = new
                {
                    key = "<keyValuePairs>",
                },
            });
            Response response = await client.Op2Async(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("fields")[0].ToString());
            Console.WriteLine(result.GetProperty("nullProperty").ToString());
            Console.WriteLine(result.GetProperty("keyValuePairs").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("xProperty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op2_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            ModelWithPersistableOnly body = new ModelWithPersistableOnly
            {
                Name = "<name>",
                Fields = { "<fields>" },
                NullProperty = 1234,
                KeyValuePairs =
{
["key"] = "<keyValuePairs>"
},
            };
            Response<ModelWithPersistableOnly> response = client.Op2(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op2_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            ModelWithPersistableOnly body = new ModelWithPersistableOnly
            {
                Name = "<name>",
                Fields = { "<fields>" },
                NullProperty = 1234,
                KeyValuePairs =
{
["key"] = "<keyValuePairs>"
},
            };
            Response<ModelWithPersistableOnly> response = await client.Op2Async(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op3_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "X",
            });
            Response response = client.Op3(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op3_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "X",
            });
            Response response = await client.Op3Async(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op3_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            BaseModel body = new ModelX();
            Response<BaseModel> response = client.Op3(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op3_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            BaseModel body = new ModelX();
            Response<BaseModel> response = await client.Op3Async(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op3_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                fields = new object[]
            {
"<fields>"
            },
                nullProperty = 1234,
                keyValuePairs = new
                {
                    key = "<keyValuePairs>",
                },
                kind = "X",
                name = "<name>",
            });
            Response response = client.Op3(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op3_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                fields = new object[]
            {
"<fields>"
            },
                nullProperty = 1234,
                keyValuePairs = new
                {
                    key = "<keyValuePairs>",
                },
                kind = "X",
                name = "<name>",
            });
            Response response = await client.Op3Async(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op3_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            BaseModel body = new ModelX
            {
                Fields = { "<fields>" },
                NullProperty = 1234,
                KeyValuePairs =
{
["key"] = "<keyValuePairs>"
},
                Name = "<name>",
            };
            Response<BaseModel> response = client.Op3(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op3_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            BaseModel body = new ModelX
            {
                Fields = { "<fields>" },
                NullProperty = 1234,
                KeyValuePairs =
{
["key"] = "<keyValuePairs>"
},
                Name = "<name>",
            };
            Response<BaseModel> response = await client.Op3Async(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op4_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
            });
            Response response = client.Op4(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op4_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
            });
            Response response = await client.Op4Async(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op4_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            AvailabilitySetData body = new AvailabilitySetData("<location>");
            Response<AvailabilitySetData> response = client.Op4(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op4_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            AvailabilitySetData body = new AvailabilitySetData("<location>");
            Response<AvailabilitySetData> response = await client.Op4Async(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op4_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                sku = new
                {
                    name = "<name>",
                    tier = "<tier>",
                    capacity = 1234L,
                },
                properties = new
                {
                    virtualMachines = new object[]
            {
new
{
id = "<id>",
}
            },
                    platformFaultDomainCount = 1234,
                    platformUpdateDomainCount = 1234,
                },
                location = "<location>",
                tags = new
                {
                    key = "<tags>",
                },
            });
            Response response = client.Op4(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sku").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sku").GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("sku").GetProperty("capacity").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("platformFaultDomainCount").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("platformUpdateDomainCount").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op4_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                sku = new
                {
                    name = "<name>",
                    tier = "<tier>",
                    capacity = 1234L,
                },
                properties = new
                {
                    virtualMachines = new object[]
            {
new
{
id = "<id>",
}
            },
                    platformFaultDomainCount = 1234,
                    platformUpdateDomainCount = 1234,
                },
                location = "<location>",
                tags = new
                {
                    key = "<tags>",
                },
            });
            Response response = await client.Op4Async(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sku").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sku").GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("sku").GetProperty("capacity").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("virtualMachines")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("platformFaultDomainCount").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("platformUpdateDomainCount").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op4_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            AvailabilitySetData body = new AvailabilitySetData("<location>")
            {
                Sku = new ComputeSku
                {
                    Name = "<name>",
                    Tier = "<tier>",
                    Capacity = 1234L,
                },
                Properties = new AvailabilitySetProperties
                {
                    VirtualMachines = {new WritableSubResource
{
Id = new ResourceIdentifier("<id>"),
}},
                    PlatformFaultDomainCount = 1234,
                    PlatformUpdateDomainCount = 1234,
                },
            };
            Response<AvailabilitySetData> response = client.Op4(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op4_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            AvailabilitySetData body = new AvailabilitySetData("<location>")
            {
                Sku = new ComputeSku
                {
                    Name = "<name>",
                    Tier = "<tier>",
                    Capacity = 1234L,
                },
                Properties = new AvailabilitySetProperties
                {
                    VirtualMachines = {new WritableSubResource
{
Id = new ResourceIdentifier("<id>"),
}},
                    PlatformFaultDomainCount = 1234,
                    PlatformUpdateDomainCount = 1234,
                },
            };
            Response<AvailabilitySetData> response = await client.Op4Async(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op5_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            Response response = client.Op5(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op5_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            Response response = await client.Op5Async(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op5_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            Response<ResourceProviderData> response = client.Op5();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op5_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            Response<ResourceProviderData> response = await client.Op5Async();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op5_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            Response response = client.Op5(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("registrationState").ToString());
            Console.WriteLine(result.GetProperty("registrationPolicy").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("resourceType").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("locations")[0].ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("locationMappings")[0].GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("locationMappings")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("locationMappings")[0].GetProperty("extendedLocations")[0].ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("paths")[0].GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("paths")[0].GetProperty("apiVersions")[0].ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("paths")[0].GetProperty("pattern").GetProperty("phrase").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("paths")[0].GetProperty("pattern").GetProperty("variable").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("paths")[0].GetProperty("pattern").GetProperty("patternType").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("paths")[0].GetProperty("metadata").GetProperty("tokenType").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("paths")[0].GetProperty("metadata").GetProperty("attributes").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("aliasType").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("defaultPath").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("defaultPattern").GetProperty("phrase").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("defaultPattern").GetProperty("variable").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("defaultPattern").GetProperty("patternType").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("defaultMetadata").GetProperty("tokenType").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("defaultMetadata").GetProperty("attributes").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("apiVersions")[0].ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("defaultApiVersion").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("zoneMappings")[0].GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("zoneMappings")[0].GetProperty("zones")[0].ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("apiProfiles")[0].GetProperty("profileVersion").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("apiProfiles")[0].GetProperty("apiVersion").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("capabilities").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("providerAuthorizationConsentState").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op5_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            Response response = await client.Op5Async(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("registrationState").ToString());
            Console.WriteLine(result.GetProperty("registrationPolicy").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("resourceType").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("locations")[0].ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("locationMappings")[0].GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("locationMappings")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("locationMappings")[0].GetProperty("extendedLocations")[0].ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("paths")[0].GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("paths")[0].GetProperty("apiVersions")[0].ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("paths")[0].GetProperty("pattern").GetProperty("phrase").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("paths")[0].GetProperty("pattern").GetProperty("variable").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("paths")[0].GetProperty("pattern").GetProperty("patternType").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("paths")[0].GetProperty("metadata").GetProperty("tokenType").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("paths")[0].GetProperty("metadata").GetProperty("attributes").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("aliasType").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("defaultPath").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("defaultPattern").GetProperty("phrase").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("defaultPattern").GetProperty("variable").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("defaultPattern").GetProperty("patternType").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("defaultMetadata").GetProperty("tokenType").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("aliases")[0].GetProperty("defaultMetadata").GetProperty("attributes").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("apiVersions")[0].ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("defaultApiVersion").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("zoneMappings")[0].GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("zoneMappings")[0].GetProperty("zones")[0].ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("apiProfiles")[0].GetProperty("profileVersion").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("apiProfiles")[0].GetProperty("apiVersion").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("capabilities").ToString());
            Console.WriteLine(result.GetProperty("resourceTypes")[0].GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("providerAuthorizationConsentState").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelReaderWriterValidationTypeSpec_Op5_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            Response<ResourceProviderData> response = client.Op5();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelReaderWriterValidationTypeSpec_Op5_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelReaderWriterValidationTypeSpecClient client = new ModelReaderWriterValidationTypeSpecClient(endpoint);

            Response<ResourceProviderData> response = await client.Op5Async();
        }
    }
}
