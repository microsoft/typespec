// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using Parameters_LowLevel;

namespace Parameters_LowLevel.Tests
{
    public partial class ParametersLowlevelClientTests : Parameters_LowLevelTestBase
    {
        public ParametersLowlevelClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NoRequestBodyResponseBody_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            Response response = await client.NoRequestBodyResponseBodyAsync(1234, default, null, null, null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NoRequestBodyResponseBody_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            Response response = await client.NoRequestBodyResponseBodyAsync(1234, default, 1234, "start", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequestBodyResponseBody_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.RequestBodyResponseBodyAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequestBodyResponseBody_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                Code = "<Code>",
                Status = "<Status>",
            });
            Response response = await client.RequestBodyResponseBodyAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteNoRequestBodyResponseBody_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            Response response = await client.DeleteNoRequestBodyResponseBodyAsync("<resourceName>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteNoRequestBodyResponseBody_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            Response response = await client.DeleteNoRequestBodyResponseBodyAsync("<resourceName>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NoRequestBodyNoResponseBody_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            Response response = await client.NoRequestBodyNoResponseBodyAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NoRequestBodyNoResponseBody_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            Response response = await client.NoRequestBodyNoResponseBodyAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequestBodyNoResponseBody_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.RequestBodyNoResponseBodyAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequestBodyNoResponseBody_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("<stringBody>");
            Response response = await client.RequestBodyNoResponseBodyAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task OptionalPathParameters_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            Response response = await client.OptionalPathParametersAsync(1234, "start", 1234);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task OptionalPathParameters_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            Response response = await client.OptionalPathParametersAsync(1234, "start", 1234);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task OptionalPathParametersWithMixedSequence_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            Response response = await client.OptionalPathParametersWithMixedSequenceAsync(1234, "start", default);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task OptionalPathParametersWithMixedSequence_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            Response response = await client.OptionalPathParametersWithMixedSequenceAsync(1234, "start", default);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task OptionalPathBodyParametersWithMixedSequence_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.OptionalPathBodyParametersWithMixedSequenceAsync(default, "<name>", 1234, default, content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task OptionalPathBodyParametersWithMixedSequence_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                Code = "<Code>",
                Status = "<Status>",
            });
            Response response = await client.OptionalPathBodyParametersWithMixedSequenceAsync(default, "<name>", 1234, default, content, top: 1234);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RepeatableAction_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.RepeatableActionAsync(default, "<name>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RepeatableAction_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                Code = "<Code>",
                Status = "<Status>",
            });
            Response response = await client.RepeatableActionAsync(default, "<name>", content);
        }
    }
}
