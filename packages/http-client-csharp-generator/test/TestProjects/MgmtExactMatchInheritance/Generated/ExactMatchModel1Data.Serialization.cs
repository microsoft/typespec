// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Expressions.DataFactory;
using Azure.ResourceManager.Models;
using MgmtExactMatchInheritance.Models;

namespace MgmtExactMatchInheritance
{
    public partial class ExactMatchModel1Data : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(New))
            {
                writer.WritePropertyName("new"u8);
                writer.WriteStringValue(New);
            }
            if (Optional.IsCollectionDefined(SupportingUris))
            {
                writer.WritePropertyName("supportingUris"u8);
                writer.WriteStartArray();
                foreach (var item in SupportingUris)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item.AbsoluteUri);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Type1))
            {
                writer.WritePropertyName("type1"u8);
                writer.WriteStringValue(Type1.Value.ToString());
            }
            if (Optional.IsDefined(Type2))
            {
                writer.WritePropertyName("type2"u8);
                writer.WriteStringValue(Type2.Value.ToString());
            }
            if (Optional.IsDefined(Type3))
            {
                writer.WritePropertyName("type3"u8);
                writer.WriteStringValue(Type3.ToString());
            }
            if (Optional.IsDefined(Type4))
            {
                writer.WritePropertyName("type4"u8);
                writer.WriteObjectValue(Type4);
            }
            if (Optional.IsDefined(Type5))
            {
                writer.WritePropertyName("type5"u8);
                JsonSerializer.Serialize(writer, Type5);
            }
            if (Optional.IsDefined(Type6))
            {
                writer.WritePropertyName("type6"u8);
                JsonSerializer.Serialize(writer, Type6);
            }
            if (Optional.IsDefined(Type7))
            {
                writer.WritePropertyName("type7"u8);
                JsonSerializer.Serialize(writer, Type7);
            }
            if (Optional.IsDefined(Type8))
            {
                writer.WritePropertyName("type8"u8);
                JsonSerializer.Serialize(writer, Type8);
            }
            if (Optional.IsDefined(Type9))
            {
                writer.WritePropertyName("type9"u8);
                JsonSerializer.Serialize(writer, Type9);
            }
            if (Optional.IsDefined(Type10))
            {
                writer.WritePropertyName("type10"u8);
                JsonSerializer.Serialize(writer, Type10);
            }
            if (Optional.IsDefined(Type11))
            {
                writer.WritePropertyName("type11"u8);
                JsonSerializer.Serialize(writer, Type11);
            }
            if (Optional.IsDefined(Type12))
            {
                writer.WritePropertyName("type12"u8);
                JsonSerializer.Serialize(writer, Type12);
            }
            if (Optional.IsDefined(Type13))
            {
                writer.WritePropertyName("type13"u8);
                JsonSerializer.Serialize(writer, Type13);
            }
            if (Optional.IsDefined(Type14))
            {
                writer.WritePropertyName("type14"u8);
                JsonSerializer.Serialize(writer, Type14);
            }
            if (Optional.IsDefined(Type15))
            {
                writer.WritePropertyName("type15"u8);
                JsonSerializer.Serialize(writer, Type15);
            }
            if (Optional.IsDefined(Type16))
            {
                writer.WritePropertyName("type16"u8);
                JsonSerializer.Serialize(writer, Type16);
            }
            if (Optional.IsDefined(Type17))
            {
                writer.WritePropertyName("type17"u8);
                JsonSerializer.Serialize(writer, Type17);
            }
            if (Optional.IsDefined(Type18))
            {
                writer.WritePropertyName("type18"u8);
                JsonSerializer.Serialize(writer, Type18);
            }
            if (Optional.IsDefined(Type19))
            {
                writer.WritePropertyName("type19"u8);
                JsonSerializer.Serialize(writer, Type19);
            }
            if (Optional.IsDefined(Type20))
            {
                writer.WritePropertyName("type20"u8);
                JsonSerializer.Serialize(writer, Type20);
            }
            writer.WriteEndObject();
        }

        internal static ExactMatchModel1Data DeserializeExactMatchModel1Data(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string @new = default;
            IList<Uri> supportingUris = default;
            Type1? type1 = default;
            Type2? type2 = default;
            IPAddress type3 = default;
            object type4 = default;
            DataFactoryElement<string> type5 = default;
            DataFactoryElement<double> type6 = default;
            DataFactoryElement<bool> type7 = default;
            DataFactoryElement<int> type8 = default;
            DataFactoryElement<BinaryData> type9 = default;
            DataFactoryElement<IList<SeparateClass>> type10 = default;
            DataFactoryElement<IList<string>> type11 = default;
            DataFactoryElement<IDictionary<string, string>> type12 = default;
            DataFactoryElement<IList<SeparateClass>> type13 = default;
            DataFactoryElement<DateTimeOffset> type14 = default;
            DataFactoryElement<TimeSpan> type15 = default;
            DataFactoryElement<Uri> type16 = default;
            DataFactoryLinkedServiceReference type17 = default;
            DataFactorySecretString type18 = default;
            DataFactoryKeyVaultSecretReference type19 = default;
            DataFactoryElement<IDictionary<string, BinaryData>> type20 = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("new"u8))
                {
                    @new = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("supportingUris"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Uri> array = new List<Uri>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(new Uri(item.GetString()));
                        }
                    }
                    supportingUris = array;
                    continue;
                }
                if (property.NameEquals("type1"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type1 = new Type1(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type2"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type2 = new Type2(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type3"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null || property.Value.ValueKind == JsonValueKind.String && property.Value.GetString().Length == 0)
                    {
                        continue;
                    }
                    type3 = IPAddress.Parse(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type4"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type4 = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("type5"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type5 = JsonSerializer.Deserialize<DataFactoryElement<string>>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("type6"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type6 = JsonSerializer.Deserialize<DataFactoryElement<double>>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("type7"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type7 = JsonSerializer.Deserialize<DataFactoryElement<bool>>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("type8"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type8 = JsonSerializer.Deserialize<DataFactoryElement<int>>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("type9"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type9 = JsonSerializer.Deserialize<DataFactoryElement<BinaryData>>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("type10"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type10 = JsonSerializer.Deserialize<DataFactoryElement<IList<SeparateClass>>>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("type11"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type11 = JsonSerializer.Deserialize<DataFactoryElement<IList<string>>>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("type12"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type12 = JsonSerializer.Deserialize<DataFactoryElement<IDictionary<string, string>>>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("type13"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type13 = JsonSerializer.Deserialize<DataFactoryElement<IList<SeparateClass>>>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("type14"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type14 = JsonSerializer.Deserialize<DataFactoryElement<DateTimeOffset>>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("type15"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type15 = JsonSerializer.Deserialize<DataFactoryElement<TimeSpan>>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("type16"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type16 = JsonSerializer.Deserialize<DataFactoryElement<Uri>>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("type17"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type17 = JsonSerializer.Deserialize<DataFactoryLinkedServiceReference>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("type18"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type18 = JsonSerializer.Deserialize<DataFactorySecretString>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("type19"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type19 = JsonSerializer.Deserialize<DataFactoryKeyVaultSecretReference>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("type20"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type20 = JsonSerializer.Deserialize<DataFactoryElement<IDictionary<string, BinaryData>>>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
            }
            return new ExactMatchModel1Data(
                id,
                name,
                type,
                systemData,
                @new,
                supportingUris ?? new ChangeTrackingList<Uri>(),
                type1,
                type2,
                type3,
                type4,
                type5,
                type6,
                type7,
                type8,
                type9,
                type10,
                type11,
                type12,
                type13,
                type14,
                type15,
                type16,
                type17,
                type18,
                type19,
                type20);
        }
    }
}
