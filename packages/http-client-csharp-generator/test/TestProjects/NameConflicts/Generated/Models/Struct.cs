// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace NameConflicts.Models
{
    /// <summary> The Struct. </summary>
    public partial class Struct : Class
    {
        /// <summary> Initializes a new instance of <see cref="Struct"/>. </summary>
        public Struct()
        {
        }

        /// <summary> Initializes a new instance of <see cref="Struct"/>. </summary>
        /// <param name="abstract"></param>
        /// <param name="add"></param>
        /// <param name="alias"></param>
        /// <param name="as"></param>
        /// <param name="ascending"></param>
        /// <param name="async"></param>
        /// <param name="await"></param>
        /// <param name="base"></param>
        /// <param name="bool"></param>
        /// <param name="break"></param>
        /// <param name="by"></param>
        /// <param name="byte"></param>
        /// <param name="catch"></param>
        /// <param name="char"></param>
        /// <param name="checked"></param>
        /// <param name="const"></param>
        /// <param name="continue"></param>
        /// <param name="classValue"></param>
        /// <param name="decimal"></param>
        /// <param name="default"></param>
        /// <param name="delegate"></param>
        /// <param name="descending"></param>
        /// <param name="do"></param>
        /// <param name="double"></param>
        /// <param name="dynamic"></param>
        /// <param name="else"></param>
        /// <param name="enum"></param>
        /// <param name="event"></param>
        /// <param name="explicit"></param>
        /// <param name="extern"></param>
        /// <param name="false"></param>
        /// <param name="finally"></param>
        /// <param name="fixed"></param>
        /// <param name="float"></param>
        /// <param name="for"></param>
        /// <param name="foreach"></param>
        /// <param name="from"></param>
        /// <param name="get"></param>
        /// <param name="global"></param>
        /// <param name="goto"></param>
        /// <param name="group"></param>
        /// <param name="if"></param>
        /// <param name="implicit"></param>
        /// <param name="in"></param>
        /// <param name="int"></param>
        /// <param name="interface"></param>
        /// <param name="internal"></param>
        /// <param name="into"></param>
        /// <param name="is"></param>
        /// <param name="join"></param>
        /// <param name="let"></param>
        /// <param name="lock"></param>
        /// <param name="long"></param>
        /// <param name="nameof"></param>
        /// <param name="namespace"></param>
        /// <param name="new"></param>
        /// <param name="nullProperty"></param>
        /// <param name="object"></param>
        /// <param name="on"></param>
        /// <param name="operator"></param>
        /// <param name="orderby"></param>
        /// <param name="out"></param>
        /// <param name="override"></param>
        /// <param name="params"></param>
        /// <param name="partial"></param>
        /// <param name="private"></param>
        /// <param name="protected"></param>
        /// <param name="public"></param>
        /// <param name="readonly"></param>
        /// <param name="ref"></param>
        /// <param name="remove"></param>
        /// <param name="return"></param>
        /// <param name="sbyte"></param>
        /// <param name="sealed"></param>
        /// <param name="select"></param>
        /// <param name="set"></param>
        /// <param name="short"></param>
        /// <param name="sizeof"></param>
        /// <param name="stackalloc"></param>
        /// <param name="static"></param>
        /// <param name="string"></param>
        /// <param name="struct"></param>
        /// <param name="switch"></param>
        /// <param name="this"></param>
        /// <param name="throw"></param>
        /// <param name="true"></param>
        /// <param name="try"></param>
        /// <param name="typeof"></param>
        /// <param name="uint"></param>
        /// <param name="ulong"></param>
        /// <param name="unchecked"></param>
        /// <param name="unmanaged"></param>
        /// <param name="unsafe"></param>
        /// <param name="ushort"></param>
        /// <param name="using"></param>
        /// <param name="value"></param>
        /// <param name="var"></param>
        /// <param name="virtual"></param>
        /// <param name="void"></param>
        /// <param name="volatile"></param>
        /// <param name="when"></param>
        /// <param name="where"></param>
        /// <param name="while"></param>
        /// <param name="yield"></param>
        /// <param name="system"></param>
        /// <param name="toStringValue"></param>
        /// <param name="equalsValue"></param>
        /// <param name="getHashCodeValue"></param>
        /// <param name="one"></param>
        internal Struct(string @abstract, string @add, string @alias, string @as, string @ascending, string @async, string @await, string @base, string @bool, string @break, string @by, string @byte, string @catch, string @char, string @checked, string @const, string @continue, string classValue, string @decimal, string @default, string @delegate, string @descending, string @do, string @double, string @dynamic, string @else, string @enum, string @event, string @explicit, string @extern, string @false, string @finally, string @fixed, string @float, string @for, string @foreach, string @from, string @get, string @global, string @goto, string group, string @if, string @implicit, string @in, string @int, string @interface, string @internal, string @into, string @is, string @join, string @let, string @lock, string @long, string @nameof, string @namespace, string @new, string nullProperty, string @object, string @on, string @operator, string orderby, string @out, string @override, string @params, string @partial, string @private, string @protected, string @public, string @readonly, string @ref, string @remove, string @return, string @sbyte, string @sealed, string select, string @set, string @short, string @sizeof, string @stackalloc, string @static, string @string, string @struct, string @switch, string @this, string @throw, string @true, string @try, string @typeof, string @uint, string @ulong, string @unchecked, string @unmanaged, string @unsafe, string @ushort, string @using, string value, string @var, string @virtual, string @void, string @volatile, string @when, string @where, string @while, string @yield, SystemEnum? system, string toStringValue, string equalsValue, string getHashCodeValue, string one) : base(@abstract, @add, @alias, @as, @ascending, @async, @await, @base, @bool, @break, @by, @byte, @catch, @char, @checked, @const, @continue, classValue, @decimal, @default, @delegate, @descending, @do, @double, @dynamic, @else, @enum, @event, @explicit, @extern, @false, @finally, @fixed, @float, @for, @foreach, @from, @get, @global, @goto, group, @if, @implicit, @in, @int, @interface, @internal, @into, @is, @join, @let, @lock, @long, @nameof, @namespace, @new, nullProperty, @object, @on, @operator, orderby, @out, @override, @params, @partial, @private, @protected, @public, @readonly, @ref, @remove, @return, @sbyte, @sealed, select, @set, @short, @sizeof, @stackalloc, @static, @string, @struct, @switch, @this, @throw, @true, @try, @typeof, @uint, @ulong, @unchecked, @unmanaged, @unsafe, @ushort, @using, value, @var, @virtual, @void, @volatile, @when, @where, @while, @yield, system, toStringValue, equalsValue, getHashCodeValue)
        {
            One = one;
        }

        /// <summary> Gets or sets the one. </summary>
        public string One { get; set; }
    }
}
