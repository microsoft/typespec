// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using ConvenienceInCadl;
using ConvenienceInCadl.Models;
using NUnit.Framework;

namespace ConvenienceInCadl.Samples
{
    public partial class Samples_ConvenienceInCadlClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_UpdateConvenience_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.UpdateConvenience(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_UpdateConvenience_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.UpdateConvenienceAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_UpdateConvenience_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.UpdateConvenience();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_UpdateConvenience_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.UpdateConvenienceAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_UpdateConvenience_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.UpdateConvenience(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_UpdateConvenience_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.UpdateConvenienceAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_UpdateConvenience_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.UpdateConvenience();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_UpdateConvenience_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.UpdateConvenienceAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalBeforeRequired_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ConvenienceOptionalBeforeRequired(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalBeforeRequired_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ConvenienceOptionalBeforeRequiredAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalBeforeRequired_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = client.ConvenienceOptionalBeforeRequired(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalBeforeRequired_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = await client.ConvenienceOptionalBeforeRequiredAsync(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalBeforeRequired_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ConvenienceOptionalBeforeRequired(content, optional: 1234);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalBeforeRequired_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ConvenienceOptionalBeforeRequiredAsync(content, optional: 1234);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalBeforeRequired_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = client.ConvenienceOptionalBeforeRequired(required, optional: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalBeforeRequired_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = await client.ConvenienceOptionalBeforeRequiredAsync(required, optional: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_NoConvenience_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.NoConvenience(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_NoConvenience_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.NoConvenienceAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_NoConvenience_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.NoConvenience(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_NoConvenience_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.NoConvenienceAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_NoConvenienceRequiredBody_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.NoConvenienceRequiredBody(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_NoConvenienceRequiredBody_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.NoConvenienceRequiredBodyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_NoConvenienceRequiredBody_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.NoConvenienceRequiredBody(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_NoConvenienceRequiredBody_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.NoConvenienceRequiredBodyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_NoConvenienceOptionalBody_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = null;
            Response response = client.NoConvenienceOptionalBody(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_NoConvenienceOptionalBody_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = null;
            Response response = await client.NoConvenienceOptionalBodyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_NoConvenienceOptionalBody_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.NoConvenienceOptionalBody(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_NoConvenienceOptionalBody_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.NoConvenienceOptionalBodyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_Protocol_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.Protocol();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_Protocol_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_Protocol_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ProtocolValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_Protocol_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ProtocolValueAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_Protocol_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.Protocol();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_Protocol_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_Protocol_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ProtocolValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_Protocol_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ProtocolValueAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceWithOptional_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceWithOptional();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceWithOptional_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceWithOptionalAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceWithOptional_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceWithOptionalValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceWithOptional_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceWithOptionalValueAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceWithOptional_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceWithOptional();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceWithOptional_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceWithOptionalAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceWithOptional_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceWithOptionalValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceWithOptional_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceWithOptionalValueAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceWithRequired_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceWithRequired(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceWithRequired_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceWithRequiredAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceWithRequired_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceWithRequired();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceWithRequired_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceWithRequiredAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceWithRequired_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceWithRequired(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceWithRequired_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceWithRequiredAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceWithRequired_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceWithRequired();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceWithRequired_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceWithRequiredAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceShouldNotGenerate_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceShouldNotGenerate();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceShouldNotGenerate_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceShouldNotGenerateAsync();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceShouldNotGenerate_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceShouldNotGenerate();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceShouldNotGenerate_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceShouldNotGenerateAsync();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolShouldNotGenerateConvenience_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ProtocolShouldNotGenerateConvenience();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolShouldNotGenerateConvenience_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolShouldNotGenerateConvenienceAsync();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolShouldNotGenerateConvenience_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ProtocolShouldNotGenerateConvenience();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolShouldNotGenerateConvenience_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolShouldNotGenerateConvenienceAsync();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolOptionalQuery_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ProtocolOptionalQuery();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolOptionalQuery_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolOptionalQueryAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolOptionalQuery_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ProtocolOptionalQueryValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolOptionalQuery_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ProtocolOptionalQueryValueAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolOptionalQuery_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ProtocolOptionalQuery(optional: 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolOptionalQuery_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolOptionalQueryAsync(optional: 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolOptionalQuery_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ProtocolOptionalQueryValue(optional: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolOptionalQuery_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ProtocolOptionalQueryValueAsync(optional: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolRequiredQuery_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ProtocolRequiredQuery(1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolRequiredQuery_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolRequiredQueryAsync(1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolRequiredQuery_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ProtocolRequiredQueryValue(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolRequiredQuery_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ProtocolRequiredQueryValueAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolRequiredQuery_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ProtocolRequiredQuery(1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolRequiredQuery_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolRequiredQueryAsync(1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolRequiredQuery_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ProtocolRequiredQueryValue(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolRequiredQuery_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ProtocolRequiredQueryValueAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolOptionalModel_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = null;
            Response response = client.ProtocolOptionalModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolOptionalModel_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = null;
            Response response = await client.ProtocolOptionalModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolOptionalModel_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ProtocolOptionalModel();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolOptionalModel_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolOptionalModelAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolOptionalModel_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ProtocolOptionalModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolOptionalModel_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ProtocolOptionalModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolOptionalModel_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model optional = new Model("<id>");
            Response response = client.ProtocolOptionalModel(optional: optional);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolOptionalModel_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model optional = new Model("<id>");
            Response response = await client.ProtocolOptionalModelAsync(optional: optional);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolRequiredModel_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ProtocolRequiredModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolRequiredModel_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ProtocolRequiredModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolRequiredModel_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = client.ProtocolRequiredModel(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolRequiredModel_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = await client.ProtocolRequiredModelAsync(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolRequiredModel_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ProtocolRequiredModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolRequiredModel_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ProtocolRequiredModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolRequiredModel_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = client.ProtocolRequiredModel(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolRequiredModel_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = await client.ProtocolRequiredModelAsync(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalQueryWithOptional_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceOptionalQueryWithOptional();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalQueryWithOptional_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceOptionalQueryWithOptionalAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalQueryWithOptional_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceOptionalQueryWithOptionalValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalQueryWithOptional_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceOptionalQueryWithOptionalValueAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalQueryWithOptional_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceOptionalQueryWithOptional(optional: 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalQueryWithOptional_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceOptionalQueryWithOptionalAsync(optional: 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalQueryWithOptional_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceOptionalQueryWithOptionalValue(optional: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalQueryWithOptional_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceOptionalQueryWithOptionalValueAsync(optional: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceRequiredQueryWithOptional_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceRequiredQueryWithOptional(1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceRequiredQueryWithOptional_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceRequiredQueryWithOptionalAsync(1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceRequiredQueryWithOptional_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceRequiredQueryWithOptionalValue(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceRequiredQueryWithOptional_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceRequiredQueryWithOptionalValueAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceRequiredQueryWithOptional_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceRequiredQueryWithOptional(1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceRequiredQueryWithOptional_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceRequiredQueryWithOptionalAsync(1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceRequiredQueryWithOptional_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceRequiredQueryWithOptionalValue(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceRequiredQueryWithOptional_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceRequiredQueryWithOptionalValueAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalQueryWithRequired_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceOptionalQueryWithRequired(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalQueryWithRequired_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceOptionalQueryWithRequiredAsync(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalQueryWithRequired_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceOptionalQueryWithRequired();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalQueryWithRequired_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceOptionalQueryWithRequiredAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalQueryWithRequired_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceOptionalQueryWithRequired(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalQueryWithRequired_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceOptionalQueryWithRequiredAsync(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalQueryWithRequired_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceOptionalQueryWithRequired(optional: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalQueryWithRequired_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceOptionalQueryWithRequiredAsync(optional: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceRequiredQueryWithRequired_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceRequiredQueryWithRequired(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceRequiredQueryWithRequired_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceRequiredQueryWithRequiredAsync(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceRequiredQueryWithRequired_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceRequiredQueryWithRequired(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceRequiredQueryWithRequired_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceRequiredQueryWithRequiredAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceRequiredQueryWithRequired_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceRequiredQueryWithRequired(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceRequiredQueryWithRequired_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceRequiredQueryWithRequiredAsync(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceRequiredQueryWithRequired_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceRequiredQueryWithRequired(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceRequiredQueryWithRequired_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceRequiredQueryWithRequiredAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalModelWithOptional_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = null;
            Response response = client.ConvenienceOptionalModelWithOptional(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalModelWithOptional_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = null;
            Response response = await client.ConvenienceOptionalModelWithOptionalAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalModelWithOptional_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceOptionalModelWithOptional();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalModelWithOptional_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceOptionalModelWithOptionalAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalModelWithOptional_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ConvenienceOptionalModelWithOptional(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalModelWithOptional_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ConvenienceOptionalModelWithOptionalAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalModelWithOptional_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model optional = new Model("<id>");
            Response response = client.ConvenienceOptionalModelWithOptional(optional: optional);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalModelWithOptional_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model optional = new Model("<id>");
            Response response = await client.ConvenienceOptionalModelWithOptionalAsync(optional: optional);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceRequiredModelWithOptional_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ConvenienceRequiredModelWithOptional(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceRequiredModelWithOptional_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ConvenienceRequiredModelWithOptionalAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceRequiredModelWithOptional_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = client.ConvenienceRequiredModelWithOptional(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceRequiredModelWithOptional_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = await client.ConvenienceRequiredModelWithOptionalAsync(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceRequiredModelWithOptional_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ConvenienceRequiredModelWithOptional(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceRequiredModelWithOptional_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ConvenienceRequiredModelWithOptionalAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceRequiredModelWithOptional_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = client.ConvenienceRequiredModelWithOptional(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceRequiredModelWithOptional_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = await client.ConvenienceRequiredModelWithOptionalAsync(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalModelWithRequired_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = null;
            Response response = client.ConvenienceOptionalModelWithRequired(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalModelWithRequired_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = null;
            Response response = await client.ConvenienceOptionalModelWithRequiredAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalModelWithRequired_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceOptionalModelWithRequired();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalModelWithRequired_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceOptionalModelWithRequiredAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalModelWithRequired_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ConvenienceOptionalModelWithRequired(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalModelWithRequired_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ConvenienceOptionalModelWithRequiredAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ConvenienceOptionalModelWithRequired_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model optional = new Model("<id>");
            Response response = client.ConvenienceOptionalModelWithRequired(optional: optional);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ConvenienceOptionalModelWithRequired_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model optional = new Model("<id>");
            Response response = await client.ConvenienceOptionalModelWithRequiredAsync(optional: optional);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolOptionalBeforeRequired_ShortVersion()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ProtocolOptionalBeforeRequired(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolOptionalBeforeRequired_ShortVersion_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ProtocolOptionalBeforeRequiredAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolOptionalBeforeRequired_ShortVersion_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = client.ProtocolOptionalBeforeRequired(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolOptionalBeforeRequired_ShortVersion_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = await client.ProtocolOptionalBeforeRequiredAsync(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolOptionalBeforeRequired_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ProtocolOptionalBeforeRequired(content, optional: 1234);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolOptionalBeforeRequired_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ProtocolOptionalBeforeRequiredAsync(content, optional: 1234);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceInCadl_ProtocolOptionalBeforeRequired_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = client.ProtocolOptionalBeforeRequired(required, optional: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceInCadl_ProtocolOptionalBeforeRequired_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = await client.ProtocolOptionalBeforeRequiredAsync(required, optional: 1234);
        }
    }
}
