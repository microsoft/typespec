<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetDeploymentStatusValueAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentStatusValueAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
Jobs client = new AuthoringTypeSpecClient(endpoint).GetJobsClient(apiVersion: "2022-05-15-preview");

Response<DeploymentJob> response = await client.GetDeploymentStatusValueAsync("<projectName>", "<deploymentName>", "<jobId>");
]]></code>
This sample shows how to call GetDeploymentStatusValueAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
Jobs client = new AuthoringTypeSpecClient(endpoint).GetJobsClient(apiVersion: "2022-05-15-preview");

Response<DeploymentJob> response = await client.GetDeploymentStatusValueAsync("<projectName>", "<deploymentName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetDeploymentStatusValue(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentStatusValue.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
Jobs client = new AuthoringTypeSpecClient(endpoint).GetJobsClient(apiVersion: "2022-05-15-preview");

Response<DeploymentJob> response = client.GetDeploymentStatusValue("<projectName>", "<deploymentName>", "<jobId>");
]]></code>
This sample shows how to call GetDeploymentStatusValue with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
Jobs client = new AuthoringTypeSpecClient(endpoint).GetJobsClient(apiVersion: "2022-05-15-preview");

Response<DeploymentJob> response = client.GetDeploymentStatusValue("<projectName>", "<deploymentName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetDeploymentStatusAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
Jobs client = new AuthoringTypeSpecClient(endpoint).GetJobsClient(apiVersion: "2022-05-15-preview");

Response response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call GetDeploymentStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
Jobs client = new AuthoringTypeSpecClient(endpoint).GetJobsClient(apiVersion: "2022-05-15-preview");

Response response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="GetDeploymentStatus(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
Jobs client = new AuthoringTypeSpecClient(endpoint).GetJobsClient(apiVersion: "2022-05-15-preview");

Response response = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call GetDeploymentStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
Jobs client = new AuthoringTypeSpecClient(endpoint).GetJobsClient(apiVersion: "2022-05-15-preview");

Response response = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="GetSwapDeploymentsStatusValueAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetSwapDeploymentsStatusValueAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
Jobs client = new AuthoringTypeSpecClient(endpoint).GetJobsClient(apiVersion: "2022-05-15-preview");

Response<SwapDeploymentsJob> response = await client.GetSwapDeploymentsStatusValueAsync("<projectName>", "<deploymentName>", "<jobId>");
]]></code>
This sample shows how to call GetSwapDeploymentsStatusValueAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
Jobs client = new AuthoringTypeSpecClient(endpoint).GetJobsClient(apiVersion: "2022-05-15-preview");

Response<SwapDeploymentsJob> response = await client.GetSwapDeploymentsStatusValueAsync("<projectName>", "<deploymentName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetSwapDeploymentsStatusValue(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetSwapDeploymentsStatusValue.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
Jobs client = new AuthoringTypeSpecClient(endpoint).GetJobsClient(apiVersion: "2022-05-15-preview");

Response<SwapDeploymentsJob> response = client.GetSwapDeploymentsStatusValue("<projectName>", "<deploymentName>", "<jobId>");
]]></code>
This sample shows how to call GetSwapDeploymentsStatusValue with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
Jobs client = new AuthoringTypeSpecClient(endpoint).GetJobsClient(apiVersion: "2022-05-15-preview");

Response<SwapDeploymentsJob> response = client.GetSwapDeploymentsStatusValue("<projectName>", "<deploymentName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetSwapDeploymentsStatusAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetSwapDeploymentsStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
Jobs client = new AuthoringTypeSpecClient(endpoint).GetJobsClient(apiVersion: "2022-05-15-preview");

Response response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call GetSwapDeploymentsStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
Jobs client = new AuthoringTypeSpecClient(endpoint).GetJobsClient(apiVersion: "2022-05-15-preview");

Response response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="GetSwapDeploymentsStatus(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetSwapDeploymentsStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
Jobs client = new AuthoringTypeSpecClient(endpoint).GetJobsClient(apiVersion: "2022-05-15-preview");

Response response = client.GetSwapDeploymentsStatus("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call GetSwapDeploymentsStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
Jobs client = new AuthoringTypeSpecClient(endpoint).GetJobsClient(apiVersion: "2022-05-15-preview");

Response response = client.GetSwapDeploymentsStatus("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code></example>
    </member>
  </members>
</doc>