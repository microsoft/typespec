// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using AuthoringTypeSpec;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace AuthoringTypeSpec.Samples
{
    public partial class Samples_Deployments
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deployment_GetDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            Response response = client.GetDeployment("<projectName>", "<deploymentName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deployment_GetDeployment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deployment_GetDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            Response response = client.GetDeployment("<projectName>", "<deploymentName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deployment_GetDeployment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deployment_GetDeployments_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            foreach (BinaryData item in client.GetDeployments("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deployment_GetDeployments_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deployment_GetDeployments_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            foreach (BinaryData item in client.GetDeployments("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deployment_GetDeployments_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deployment_DeployProject_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = client.DeployProject(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deployment_DeployProject_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deployment_DeployProject_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = client.DeployProject(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deployment_DeployProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deployment_DeleteDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            Operation operation = client.DeleteDeployment(WaitUntil.Completed, "<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deployment_DeleteDeployment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            Operation operation = await client.DeleteDeploymentAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deployment_DeleteDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            Operation operation = client.DeleteDeployment(WaitUntil.Completed, "<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deployment_DeleteDeployment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            Operation operation = await client.DeleteDeploymentAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deployments_SwapDeployments_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                firstDeploymentName = "<firstDeploymentName>",
                secondDeploymentName = "<secondDeploymentName>",
            });
            Operation operation = client.SwapDeployments(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deployments_SwapDeployments_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                firstDeploymentName = "<firstDeploymentName>",
                secondDeploymentName = "<secondDeploymentName>",
            });
            Operation operation = await client.SwapDeploymentsAsync(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deployments_SwapDeployments_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                firstDeploymentName = "<firstDeploymentName>",
                secondDeploymentName = "<secondDeploymentName>",
            });
            Operation operation = client.SwapDeployments(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deployments_SwapDeployments_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Deployments client = new AuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                firstDeploymentName = "<firstDeploymentName>",
                secondDeploymentName = "<secondDeploymentName>",
            });
            Operation operation = await client.SwapDeploymentsAsync(WaitUntil.Completed, "<projectName>", content);
        }
    }
}
