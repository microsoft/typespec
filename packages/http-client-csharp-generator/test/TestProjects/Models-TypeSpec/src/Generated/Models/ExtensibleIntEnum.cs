// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace ModelsTypeSpec.Models
{
    /// <summary> Extensible int enum. </summary>
    [Obsolete("should be replaced by cadl-ranch")]
    public readonly partial struct ExtensibleIntEnum : IEquatable<ExtensibleIntEnum>
    {
        private readonly int _value;

        /// <summary> Initializes a new instance of <see cref="ExtensibleIntEnum"/>. </summary>
        public ExtensibleIntEnum(int value)
        {
            _value = value;
        }

        private const int OneValue = 1;
        private const int TwoValue = 2;
        private const int FourValue = 4;

        /// <summary> 1. </summary>
        public static ExtensibleIntEnum One { get; } = new ExtensibleIntEnum(OneValue);
        /// <summary> 2. </summary>
        public static ExtensibleIntEnum Two { get; } = new ExtensibleIntEnum(TwoValue);
        /// <summary> 4. </summary>
        public static ExtensibleIntEnum Four { get; } = new ExtensibleIntEnum(FourValue);

        internal int ToSerialInt32() => _value;

        /// <summary> Determines if two <see cref="ExtensibleIntEnum"/> values are the same. </summary>
        public static bool operator ==(ExtensibleIntEnum left, ExtensibleIntEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExtensibleIntEnum"/> values are not the same. </summary>
        public static bool operator !=(ExtensibleIntEnum left, ExtensibleIntEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ExtensibleIntEnum"/>. </summary>
        public static implicit operator ExtensibleIntEnum(int value) => new ExtensibleIntEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExtensibleIntEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExtensibleIntEnum other) => Equals(_value, other._value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();
        /// <inheritdoc />
        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);
    }
}
