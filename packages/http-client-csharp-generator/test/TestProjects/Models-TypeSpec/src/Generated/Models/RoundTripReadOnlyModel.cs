// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using ModelsTypeSpec;

namespace ModelsTypeSpec.Models
{
    /// <summary> Output model with readonly properties. </summary>
    public partial class RoundTripReadOnlyModel
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RoundTripReadOnlyModel"/>. </summary>
        /// <param name="optionalReadOnlyIntRecord"> Optional int record. </param>
        /// <param name="optionalReadOnlyStringRecord"> Optional string record. </param>
        /// <param name="requiredCollectionWithNullableIntElement"> Required collection of which the element is a nullable int. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="optionalReadOnlyIntRecord"/>, <paramref name="optionalReadOnlyStringRecord"/> or <paramref name="requiredCollectionWithNullableIntElement"/> is null. </exception>
        internal RoundTripReadOnlyModel(IReadOnlyDictionary<string, int> optionalReadOnlyIntRecord, IReadOnlyDictionary<string, string> optionalReadOnlyStringRecord, IEnumerable<int?> requiredCollectionWithNullableIntElement)
        {
            if (optionalReadOnlyIntRecord == null)
            {
                throw new ArgumentNullException(nameof(optionalReadOnlyIntRecord));
            }
            if (optionalReadOnlyStringRecord == null)
            {
                throw new ArgumentNullException(nameof(optionalReadOnlyStringRecord));
            }
            if (requiredCollectionWithNullableIntElement == null)
            {
                throw new ArgumentNullException(nameof(requiredCollectionWithNullableIntElement));
            }

            RequiredReadonlyStringList = new ChangeTrackingList<string>();
            RequiredReadonlyIntList = new ChangeTrackingList<int>();
            RequiredReadOnlyModelList = new ChangeTrackingList<CollectionItem>();
            RequiredReadOnlyIntRecord = new ChangeTrackingDictionary<string, int>();
            RequiredStringRecord = new ChangeTrackingDictionary<string, string>();
            RequiredReadOnlyModelRecord = new ChangeTrackingDictionary<string, RecordItem>();
            OptionalReadonlyStringList = new ChangeTrackingList<string>();
            OptionalReadonlyIntList = new ChangeTrackingList<int>();
            OptionalReadOnlyModelList = new ChangeTrackingList<CollectionItem>();
            OptionalReadOnlyIntRecord = optionalReadOnlyIntRecord;
            OptionalReadOnlyStringRecord = optionalReadOnlyStringRecord;
            OptionalModelRecord = new ChangeTrackingDictionary<string, RecordItem>();
            RequiredCollectionWithNullableIntElement = requiredCollectionWithNullableIntElement.ToList();
            OptionalCollectionWithNullableBooleanElement = new ChangeTrackingList<bool?>();
        }

        /// <summary> Initializes a new instance of <see cref="RoundTripReadOnlyModel"/>. </summary>
        /// <param name="requiredReadonlyString"> Required string, illustrating a readonly reference type property. </param>
        /// <param name="requiredReadonlyInt"> Required int, illustrating a readonly value type property. </param>
        /// <param name="optionalReadonlyString"> Optional string, illustrating a readonly reference type property. </param>
        /// <param name="optionalReadonlyInt"> Optional int, illustrating a readonly value type property. </param>
        /// <param name="requiredReadonlyModel"> Required readonly model. </param>
        /// <param name="optionalReadonlyModel"> Optional readonly model. </param>
        /// <param name="requiredReadonlyFixedStringEnum"> Required readonly fixed string enum. </param>
        /// <param name="requiredReadonlyExtensibleEnum"> Required readonly extensible enum. </param>
        /// <param name="optionalReadonlyFixedStringEnum"> Optional readonly fixed string enum. </param>
        /// <param name="optionalReadonlyExtensibleEnum"> Optional readonly extensible enum. </param>
        /// <param name="requiredReadonlyStringList"> Required readonly string collection. </param>
        /// <param name="requiredReadonlyIntList"> Required readonly int collection. </param>
        /// <param name="requiredReadOnlyModelList"> Required model collection. </param>
        /// <param name="requiredReadOnlyIntRecord"> Required int record. </param>
        /// <param name="requiredStringRecord"> Required string record. </param>
        /// <param name="requiredReadOnlyModelRecord"> Required model record. </param>
        /// <param name="optionalReadonlyStringList"> Optional readonly string collection. </param>
        /// <param name="optionalReadonlyIntList"> Optional readonly int collection. </param>
        /// <param name="optionalReadOnlyModelList"> Optional model collection. </param>
        /// <param name="optionalReadOnlyIntRecord"> Optional int record. </param>
        /// <param name="optionalReadOnlyStringRecord"> Optional string record. </param>
        /// <param name="optionalModelRecord"> Optional model record. </param>
        /// <param name="requiredCollectionWithNullableIntElement"> Required collection of which the element is a nullable int. </param>
        /// <param name="optionalCollectionWithNullableBooleanElement"> Optional collection of which the element is a nullable boolean. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RoundTripReadOnlyModel(string requiredReadonlyString, int requiredReadonlyInt, string optionalReadonlyString, int? optionalReadonlyInt, DerivedModel requiredReadonlyModel, DerivedModel optionalReadonlyModel, FixedStringEnum requiredReadonlyFixedStringEnum, ExtensibleEnum requiredReadonlyExtensibleEnum, FixedStringEnum optionalReadonlyFixedStringEnum, ExtensibleEnum optionalReadonlyExtensibleEnum, IReadOnlyList<string> requiredReadonlyStringList, IReadOnlyList<int> requiredReadonlyIntList, IReadOnlyList<CollectionItem> requiredReadOnlyModelList, IReadOnlyDictionary<string, int> requiredReadOnlyIntRecord, IReadOnlyDictionary<string, string> requiredStringRecord, IReadOnlyDictionary<string, RecordItem> requiredReadOnlyModelRecord, IReadOnlyList<string> optionalReadonlyStringList, IReadOnlyList<int> optionalReadonlyIntList, IReadOnlyList<CollectionItem> optionalReadOnlyModelList, IReadOnlyDictionary<string, int> optionalReadOnlyIntRecord, IReadOnlyDictionary<string, string> optionalReadOnlyStringRecord, IReadOnlyDictionary<string, RecordItem> optionalModelRecord, IReadOnlyList<int?> requiredCollectionWithNullableIntElement, IReadOnlyList<bool?> optionalCollectionWithNullableBooleanElement, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            RequiredReadonlyString = requiredReadonlyString;
            RequiredReadonlyInt = requiredReadonlyInt;
            OptionalReadonlyString = optionalReadonlyString;
            OptionalReadonlyInt = optionalReadonlyInt;
            RequiredReadonlyModel = requiredReadonlyModel;
            OptionalReadonlyModel = optionalReadonlyModel;
            RequiredReadonlyFixedStringEnum = requiredReadonlyFixedStringEnum;
            RequiredReadonlyExtensibleEnum = requiredReadonlyExtensibleEnum;
            OptionalReadonlyFixedStringEnum = optionalReadonlyFixedStringEnum;
            OptionalReadonlyExtensibleEnum = optionalReadonlyExtensibleEnum;
            RequiredReadonlyStringList = requiredReadonlyStringList;
            RequiredReadonlyIntList = requiredReadonlyIntList;
            RequiredReadOnlyModelList = requiredReadOnlyModelList;
            RequiredReadOnlyIntRecord = requiredReadOnlyIntRecord;
            RequiredStringRecord = requiredStringRecord;
            RequiredReadOnlyModelRecord = requiredReadOnlyModelRecord;
            OptionalReadonlyStringList = optionalReadonlyStringList;
            OptionalReadonlyIntList = optionalReadonlyIntList;
            OptionalReadOnlyModelList = optionalReadOnlyModelList;
            OptionalReadOnlyIntRecord = optionalReadOnlyIntRecord;
            OptionalReadOnlyStringRecord = optionalReadOnlyStringRecord;
            OptionalModelRecord = optionalModelRecord;
            RequiredCollectionWithNullableIntElement = requiredCollectionWithNullableIntElement;
            OptionalCollectionWithNullableBooleanElement = optionalCollectionWithNullableBooleanElement;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RoundTripReadOnlyModel"/> for deserialization. </summary>
        internal RoundTripReadOnlyModel()
        {
        }

        /// <summary> Required string, illustrating a readonly reference type property. </summary>
        public string RequiredReadonlyString { get; }
        /// <summary> Required int, illustrating a readonly value type property. </summary>
        public int RequiredReadonlyInt { get; }
        /// <summary> Optional string, illustrating a readonly reference type property. </summary>
        public string OptionalReadonlyString { get; }
        /// <summary> Optional int, illustrating a readonly value type property. </summary>
        public int? OptionalReadonlyInt { get; }
        /// <summary> Required readonly model. </summary>
        public DerivedModel RequiredReadonlyModel { get; }
        /// <summary> Optional readonly model. </summary>
        public DerivedModel OptionalReadonlyModel { get; }
        /// <summary> Required readonly fixed string enum. </summary>
        public FixedStringEnum RequiredReadonlyFixedStringEnum { get; }
        /// <summary> Required readonly extensible enum. </summary>
        public ExtensibleEnum RequiredReadonlyExtensibleEnum { get; }
        /// <summary> Optional readonly fixed string enum. </summary>
        public FixedStringEnum OptionalReadonlyFixedStringEnum { get; }
        /// <summary> Optional readonly extensible enum. </summary>
        public ExtensibleEnum OptionalReadonlyExtensibleEnum { get; }
        /// <summary> Required readonly string collection. </summary>
        public IReadOnlyList<string> RequiredReadonlyStringList { get; }
        /// <summary> Required readonly int collection. </summary>
        public IReadOnlyList<int> RequiredReadonlyIntList { get; }
        /// <summary> Required model collection. </summary>
        public IReadOnlyList<CollectionItem> RequiredReadOnlyModelList { get; }
        /// <summary> Required int record. </summary>
        public IReadOnlyDictionary<string, int> RequiredReadOnlyIntRecord { get; }
        /// <summary> Required string record. </summary>
        public IReadOnlyDictionary<string, string> RequiredStringRecord { get; }
        /// <summary> Required model record. </summary>
        public IReadOnlyDictionary<string, RecordItem> RequiredReadOnlyModelRecord { get; }
        /// <summary> Optional readonly string collection. </summary>
        public IReadOnlyList<string> OptionalReadonlyStringList { get; }
        /// <summary> Optional readonly int collection. </summary>
        public IReadOnlyList<int> OptionalReadonlyIntList { get; }
        /// <summary> Optional model collection. </summary>
        public IReadOnlyList<CollectionItem> OptionalReadOnlyModelList { get; }
        /// <summary> Optional int record. </summary>
        public IReadOnlyDictionary<string, int> OptionalReadOnlyIntRecord { get; }
        /// <summary> Optional string record. </summary>
        public IReadOnlyDictionary<string, string> OptionalReadOnlyStringRecord { get; }
        /// <summary> Optional model record. </summary>
        public IReadOnlyDictionary<string, RecordItem> OptionalModelRecord { get; }
        /// <summary> Required collection of which the element is a nullable int. </summary>
        public IReadOnlyList<int?> RequiredCollectionWithNullableIntElement { get; }
        /// <summary> Optional collection of which the element is a nullable boolean. </summary>
        public IReadOnlyList<bool?> OptionalCollectionWithNullableBooleanElement { get; }
    }
}
