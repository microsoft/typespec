// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using MgmtDiscriminator;

namespace MgmtDiscriminator.Mocking
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public partial class MockableMgmtDiscriminatorArmClient : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MockableMgmtDiscriminatorArmClient"/> class for mocking. </summary>
        protected MockableMgmtDiscriminatorArmClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableMgmtDiscriminatorArmClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableMgmtDiscriminatorArmClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        internal MockableMgmtDiscriminatorArmClient(ArmClient client) : this(client, ResourceIdentifier.Root)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of ArtifactResources in the ArmClient. </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of ArtifactResources and their operations over a ArtifactResource. </returns>
        public virtual ArtifactCollection GetArtifacts(ResourceIdentifier scope)
        {
            return new ArtifactCollection(Client, scope);
        }

        /// <summary>
        /// Get a blueprint artifact.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceScope}/providers/Microsoft.Blueprint/artifacts/{artifactName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Artifacts_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2020-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ArtifactResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="artifactName"> Name of the blueprint artifact. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="artifactName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="artifactName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ArtifactResource>> GetArtifactAsync(ResourceIdentifier scope, string artifactName, CancellationToken cancellationToken = default)
        {
            return await GetArtifacts(scope).GetAsync(artifactName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a blueprint artifact.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceScope}/providers/Microsoft.Blueprint/artifacts/{artifactName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Artifacts_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2020-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ArtifactResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="artifactName"> Name of the blueprint artifact. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="artifactName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="artifactName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<ArtifactResource> GetArtifact(ResourceIdentifier scope, string artifactName, CancellationToken cancellationToken = default)
        {
            return GetArtifacts(scope).Get(artifactName, cancellationToken);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DeliveryRuleResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DeliveryRuleResource.CreateResourceIdentifier" /> to create a <see cref="DeliveryRuleResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DeliveryRuleResource"/> object. </returns>
        public virtual DeliveryRuleResource GetDeliveryRuleResource(ResourceIdentifier id)
        {
            DeliveryRuleResource.ValidateResourceId(id);
            return new DeliveryRuleResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="ArtifactResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ArtifactResource.CreateResourceIdentifier" /> to create an <see cref="ArtifactResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ArtifactResource"/> object. </returns>
        public virtual ArtifactResource GetArtifactResource(ResourceIdentifier id)
        {
            ArtifactResource.ValidateResourceId(id);
            return new ArtifactResource(Client, id);
        }
    }
}
