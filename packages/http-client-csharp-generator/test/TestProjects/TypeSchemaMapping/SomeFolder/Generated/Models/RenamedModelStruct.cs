// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using NamespaceForEnums;

namespace CustomNamespace
{
    /// <summary> The ModelStruct. </summary>
    internal readonly partial struct RenamedModelStruct
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private readonly IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RenamedModelStruct"/>. </summary>
        /// <param name="customizedFlattenedStringProperty"> . </param>
        /// <param name="propertyToField"> . </param>
        /// <param name="fruit"> Fruit. </param>
        /// <param name="daysOfWeek"> Day of week. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="customizedFlattenedStringProperty"/> or <paramref name="propertyToField"/> is null. </exception>
        public RenamedModelStruct(string customizedFlattenedStringProperty, string propertyToField, CustomFruitEnum? fruit, CustomDaysOfWeek? daysOfWeek)
        {
            if (customizedFlattenedStringProperty == null)
            {
                throw new ArgumentNullException(nameof(customizedFlattenedStringProperty));
            }
            if (propertyToField == null)
            {
                throw new ArgumentNullException(nameof(propertyToField));
            }

            CustomizedFlattenedStringProperty = customizedFlattenedStringProperty;
            PropertyToField = propertyToField;
            Fruit = fruit;
            DaysOfWeek = daysOfWeek;
        }

        /// <summary> Initializes a new instance of <see cref="RenamedModelStruct"/>. </summary>
        /// <param name="customizedFlattenedStringProperty"> . </param>
        /// <param name="propertyToField"> . </param>
        /// <param name="fruit"> Fruit. </param>
        /// <param name="daysOfWeek"> Day of week. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RenamedModelStruct(string customizedFlattenedStringProperty, string propertyToField, CustomFruitEnum? fruit, CustomDaysOfWeek? daysOfWeek, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            CustomizedFlattenedStringProperty = customizedFlattenedStringProperty;
            PropertyToField = propertyToField;
            Fruit = fruit;
            DaysOfWeek = daysOfWeek;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RenamedModelStruct"/> for deserialization. </summary>
        public RenamedModelStruct()
        {
        }
        /// <summary> . </summary>
        public string PropertyToField { get; }
        /// <summary> Fruit. </summary>
        public CustomFruitEnum? Fruit { get; }
        /// <summary> Day of week. </summary>
        public CustomDaysOfWeek? DaysOfWeek { get; }
    }
}
