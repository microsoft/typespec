// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;
using Azure.ResourceManager;
using MgmtMultipleParentResource;

namespace MgmtMultipleParentResource.Mocking
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public partial class MockableMgmtMultipleParentResourceArmClient : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MockableMgmtMultipleParentResourceArmClient"/> class for mocking. </summary>
        protected MockableMgmtMultipleParentResourceArmClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableMgmtMultipleParentResourceArmClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableMgmtMultipleParentResourceArmClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        internal MockableMgmtMultipleParentResourceArmClient(ArmClient client) : this(client, ResourceIdentifier.Root)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Gets an object representing an <see cref="AnotherParentResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AnotherParentResource.CreateResourceIdentifier" /> to create an <see cref="AnotherParentResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AnotherParentResource"/> object. </returns>
        public virtual AnotherParentResource GetAnotherParentResource(ResourceIdentifier id)
        {
            AnotherParentResource.ValidateResourceId(id);
            return new AnotherParentResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="AnotherParentChildResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AnotherParentChildResource.CreateResourceIdentifier" /> to create an <see cref="AnotherParentChildResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AnotherParentChildResource"/> object. </returns>
        public virtual AnotherParentChildResource GetAnotherParentChildResource(ResourceIdentifier id)
        {
            AnotherParentChildResource.ValidateResourceId(id);
            return new AnotherParentChildResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="TheParentSubParentChildResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="TheParentSubParentChildResource.CreateResourceIdentifier" /> to create a <see cref="TheParentSubParentChildResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="TheParentSubParentChildResource"/> object. </returns>
        public virtual TheParentSubParentChildResource GetTheParentSubParentChildResource(ResourceIdentifier id)
        {
            TheParentSubParentChildResource.ValidateResourceId(id);
            return new TheParentSubParentChildResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="TheParentResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="TheParentResource.CreateResourceIdentifier" /> to create a <see cref="TheParentResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="TheParentResource"/> object. </returns>
        public virtual TheParentResource GetTheParentResource(ResourceIdentifier id)
        {
            TheParentResource.ValidateResourceId(id);
            return new TheParentResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SubParentResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SubParentResource.CreateResourceIdentifier" /> to create a <see cref="SubParentResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SubParentResource"/> object. </returns>
        public virtual SubParentResource GetSubParentResource(ResourceIdentifier id)
        {
            SubParentResource.ValidateResourceId(id);
            return new SubParentResource(Client, id);
        }
    }
}
