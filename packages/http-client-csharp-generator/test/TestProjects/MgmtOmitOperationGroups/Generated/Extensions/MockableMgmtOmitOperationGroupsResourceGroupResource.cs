// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using MgmtOmitOperationGroups;
using MgmtOmitOperationGroups.Models;

namespace MgmtOmitOperationGroups.Mocking
{
    /// <summary> A class to add extension methods to ResourceGroupResource. </summary>
    public partial class MockableMgmtOmitOperationGroupsResourceGroupResource : ArmResource
    {
        private ClientDiagnostics _model5sClientDiagnostics;
        private Model5SRestOperations _model5sRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableMgmtOmitOperationGroupsResourceGroupResource"/> class for mocking. </summary>
        protected MockableMgmtOmitOperationGroupsResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableMgmtOmitOperationGroupsResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableMgmtOmitOperationGroupsResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics Model5sClientDiagnostics => _model5sClientDiagnostics ??= new ClientDiagnostics("MgmtOmitOperationGroups", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private Model5SRestOperations Model5sRestClient => _model5sRestClient ??= new Model5SRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of Model2Resources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of Model2Resources and their operations over a Model2Resource. </returns>
        public virtual Model2Collection GetModel2s()
        {
            return GetCachedClient(client => new Model2Collection(client, Id));
        }

        /// <summary>
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/model2s/{model2sName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Model2s_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2020-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="Model2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="model2SName"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="model2SName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="model2SName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<Model2Resource>> GetModel2Async(string model2SName, CancellationToken cancellationToken = default)
        {
            return await GetModel2s().GetAsync(model2SName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/model2s/{model2sName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Model2s_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2020-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="Model2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="model2SName"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="model2SName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="model2SName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<Model2Resource> GetModel2(string model2SName, CancellationToken cancellationToken = default)
        {
            return GetModel2s().Get(model2SName, cancellationToken);
        }

        /// <summary>
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/model5s</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Model5s_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2020-06-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Model5"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Model5> GetModel5sAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => Model5sRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, null, Model5.DeserializeModel5, Model5sClientDiagnostics, Pipeline, "MockableMgmtOmitOperationGroupsResourceGroupResource.GetModel5s", "value", null, cancellationToken);
        }

        /// <summary>
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/model5s</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Model5s_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2020-06-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Model5"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Model5> GetModel5s(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => Model5sRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, null, Model5.DeserializeModel5, Model5sClientDiagnostics, Pipeline, "MockableMgmtOmitOperationGroupsResourceGroupResource.GetModel5s", "value", null, cancellationToken);
        }

        /// <summary>
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/model5s/{model5sName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Model5s_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2020-06-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="model5SName"> The <see cref="string"/> to use. </param>
        /// <param name="model5"> The <see cref="Model5"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="model5SName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="model5SName"/> or <paramref name="model5"/> is null. </exception>
        public virtual async Task<Response<Model5>> CreateOrUpdateModel5Async(string model5SName, Model5 model5, CancellationToken cancellationToken = default)
        {
            if (model5SName == null)
            {
                throw new ArgumentNullException(nameof(model5SName));
            }
            if (model5SName.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(model5SName));
            }
            if (model5 == null)
            {
                throw new ArgumentNullException(nameof(model5));
            }

            using var scope = Model5sClientDiagnostics.CreateScope("MockableMgmtOmitOperationGroupsResourceGroupResource.CreateOrUpdateModel5");
            scope.Start();
            try
            {
                var response = await Model5sRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, model5SName, model5, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/model5s/{model5sName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Model5s_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2020-06-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="model5SName"> The <see cref="string"/> to use. </param>
        /// <param name="model5"> The <see cref="Model5"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="model5SName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="model5SName"/> or <paramref name="model5"/> is null. </exception>
        public virtual Response<Model5> CreateOrUpdateModel5(string model5SName, Model5 model5, CancellationToken cancellationToken = default)
        {
            if (model5SName == null)
            {
                throw new ArgumentNullException(nameof(model5SName));
            }
            if (model5SName.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(model5SName));
            }
            if (model5 == null)
            {
                throw new ArgumentNullException(nameof(model5));
            }

            using var scope = Model5sClientDiagnostics.CreateScope("MockableMgmtOmitOperationGroupsResourceGroupResource.CreateOrUpdateModel5");
            scope.Start();
            try
            {
                var response = Model5sRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, model5SName, model5, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/model5s/{model5sName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Model5s_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2020-06-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="model5SName"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="model5SName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="model5SName"/> is null. </exception>
        public virtual async Task<Response<Model5>> GetModel5Async(string model5SName, CancellationToken cancellationToken = default)
        {
            if (model5SName == null)
            {
                throw new ArgumentNullException(nameof(model5SName));
            }
            if (model5SName.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(model5SName));
            }

            using var scope = Model5sClientDiagnostics.CreateScope("MockableMgmtOmitOperationGroupsResourceGroupResource.GetModel5");
            scope.Start();
            try
            {
                var response = await Model5sRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, model5SName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/model5s/{model5sName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Model5s_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2020-06-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="model5SName"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="model5SName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="model5SName"/> is null. </exception>
        public virtual Response<Model5> GetModel5(string model5SName, CancellationToken cancellationToken = default)
        {
            if (model5SName == null)
            {
                throw new ArgumentNullException(nameof(model5SName));
            }
            if (model5SName.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(model5SName));
            }

            using var scope = Model5sClientDiagnostics.CreateScope("MockableMgmtOmitOperationGroupsResourceGroupResource.GetModel5");
            scope.Start();
            try
            {
                var response = Model5sRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, model5SName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
