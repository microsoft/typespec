// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Client.Structure.Service.TwoOperationGroup
{
    // Data plane generated client.
    /// <summary> The TwoOperationGroup service client. </summary>
    public partial class TwoOperationGroupClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of TwoOperationGroupClient for mocking. </summary>
        protected TwoOperationGroupClient()
        {
        }

        /// <summary> Initializes a new instance of TwoOperationGroupClient. </summary>
        /// <param name="endpoint"> Need to be set as 'http://localhost:3000' in client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public TwoOperationGroupClient(Uri endpoint) : this(endpoint, new TwoOperationGroupClientOptions())
        {
        }

        /// <summary> Initializes a new instance of TwoOperationGroupClient. </summary>
        /// <param name="endpoint"> Need to be set as 'http://localhost:3000' in client. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public TwoOperationGroupClient(Uri endpoint, TwoOperationGroupClientOptions options)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            options ??= new TwoOperationGroupClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Initializes a new instance of Group1. </summary>
        /// <param name="client"> Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client. Allowed values: "default" | "multi-client" | "renamed-operation" | "two-operation-group". </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="client"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Group1 GetGroup1Client(string client)
        {
            if (client == null)
            {
                throw new ArgumentNullException(nameof(client));
            }
            if (client.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(client));
            }

            return new Group1(ClientDiagnostics, _pipeline, _endpoint, client);
        }

        /// <summary> Initializes a new instance of Group2. </summary>
        /// <param name="client"> Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client. Allowed values: "default" | "multi-client" | "renamed-operation" | "two-operation-group". </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="client"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Group2 GetGroup2Client(string client)
        {
            if (client == null)
            {
                throw new ArgumentNullException(nameof(client));
            }
            if (client.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(client));
            }

            return new Group2(ClientDiagnostics, _pipeline, _endpoint, client);
        }
    }
}
