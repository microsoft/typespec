// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Client.Naming;
using Client.Naming.Models;
using NUnit.Framework;

namespace Client.Naming.Samples
{
    public partial class Samples_NamingClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Naming_ClientName_ShortVersion()
        {
            NamingClient client = new NamingClient();

            Response response = client.ClientName();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Naming_ClientName_ShortVersion_Async()
        {
            NamingClient client = new NamingClient();

            Response response = await client.ClientNameAsync();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Naming_ClientName_AllParameters()
        {
            NamingClient client = new NamingClient();

            Response response = client.ClientName();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Naming_ClientName_AllParameters_Async()
        {
            NamingClient client = new NamingClient();

            Response response = await client.ClientNameAsync();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Naming_Parameter_ShortVersion()
        {
            NamingClient client = new NamingClient();

            Response response = client.Parameter("<clientName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Naming_Parameter_ShortVersion_Async()
        {
            NamingClient client = new NamingClient();

            Response response = await client.ParameterAsync("<clientName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Naming_Parameter_AllParameters()
        {
            NamingClient client = new NamingClient();

            Response response = client.Parameter("<clientName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Naming_Parameter_AllParameters_Async()
        {
            NamingClient client = new NamingClient();

            Response response = await client.ParameterAsync("<clientName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Property_Client_ShortVersion()
        {
            NamingClient client = new NamingClient();

            using RequestContent content = RequestContent.Create(new
            {
                defaultName = true,
            });
            Response response = client.Client(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Property_Client_ShortVersion_Async()
        {
            NamingClient client = new NamingClient();

            using RequestContent content = RequestContent.Create(new
            {
                defaultName = true,
            });
            Response response = await client.ClientAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Property_Client_ShortVersion_Convenience()
        {
            NamingClient client = new NamingClient();

            ClientNameModel clientNameModel = new ClientNameModel(true);
            Response response = client.Client(clientNameModel);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Property_Client_ShortVersion_Convenience_Async()
        {
            NamingClient client = new NamingClient();

            ClientNameModel clientNameModel = new ClientNameModel(true);
            Response response = await client.ClientAsync(clientNameModel);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Property_Client_AllParameters()
        {
            NamingClient client = new NamingClient();

            using RequestContent content = RequestContent.Create(new
            {
                defaultName = true,
            });
            Response response = client.Client(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Property_Client_AllParameters_Async()
        {
            NamingClient client = new NamingClient();

            using RequestContent content = RequestContent.Create(new
            {
                defaultName = true,
            });
            Response response = await client.ClientAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Property_Client_AllParameters_Convenience()
        {
            NamingClient client = new NamingClient();

            ClientNameModel clientNameModel = new ClientNameModel(true);
            Response response = client.Client(clientNameModel);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Property_Client_AllParameters_Convenience_Async()
        {
            NamingClient client = new NamingClient();

            ClientNameModel clientNameModel = new ClientNameModel(true);
            Response response = await client.ClientAsync(clientNameModel);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Property_Language_ShortVersion()
        {
            NamingClient client = new NamingClient();

            using RequestContent content = RequestContent.Create(new
            {
                defaultName = true,
            });
            Response response = client.Language(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Property_Language_ShortVersion_Async()
        {
            NamingClient client = new NamingClient();

            using RequestContent content = RequestContent.Create(new
            {
                defaultName = true,
            });
            Response response = await client.LanguageAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Property_Language_ShortVersion_Convenience()
        {
            NamingClient client = new NamingClient();

            LanguageClientNameModel languageClientNameModel = new LanguageClientNameModel(true);
            Response response = client.Language(languageClientNameModel);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Property_Language_ShortVersion_Convenience_Async()
        {
            NamingClient client = new NamingClient();

            LanguageClientNameModel languageClientNameModel = new LanguageClientNameModel(true);
            Response response = await client.LanguageAsync(languageClientNameModel);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Property_Language_AllParameters()
        {
            NamingClient client = new NamingClient();

            using RequestContent content = RequestContent.Create(new
            {
                defaultName = true,
            });
            Response response = client.Language(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Property_Language_AllParameters_Async()
        {
            NamingClient client = new NamingClient();

            using RequestContent content = RequestContent.Create(new
            {
                defaultName = true,
            });
            Response response = await client.LanguageAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Property_Language_AllParameters_Convenience()
        {
            NamingClient client = new NamingClient();

            LanguageClientNameModel languageClientNameModel = new LanguageClientNameModel(true);
            Response response = client.Language(languageClientNameModel);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Property_Language_AllParameters_Convenience_Async()
        {
            NamingClient client = new NamingClient();

            LanguageClientNameModel languageClientNameModel = new LanguageClientNameModel(true);
            Response response = await client.LanguageAsync(languageClientNameModel);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Property_CompatibleWithEncodedName_ShortVersion()
        {
            NamingClient client = new NamingClient();

            using RequestContent content = RequestContent.Create(new
            {
                wireName = true,
            });
            Response response = client.CompatibleWithEncodedName(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Property_CompatibleWithEncodedName_ShortVersion_Async()
        {
            NamingClient client = new NamingClient();

            using RequestContent content = RequestContent.Create(new
            {
                wireName = true,
            });
            Response response = await client.CompatibleWithEncodedNameAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Property_CompatibleWithEncodedName_ShortVersion_Convenience()
        {
            NamingClient client = new NamingClient();

            ClientNameAndJsonEncodedNameModel clientNameAndJsonEncodedNameModel = new ClientNameAndJsonEncodedNameModel(true);
            Response response = client.CompatibleWithEncodedName(clientNameAndJsonEncodedNameModel);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Property_CompatibleWithEncodedName_ShortVersion_Convenience_Async()
        {
            NamingClient client = new NamingClient();

            ClientNameAndJsonEncodedNameModel clientNameAndJsonEncodedNameModel = new ClientNameAndJsonEncodedNameModel(true);
            Response response = await client.CompatibleWithEncodedNameAsync(clientNameAndJsonEncodedNameModel);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Property_CompatibleWithEncodedName_AllParameters()
        {
            NamingClient client = new NamingClient();

            using RequestContent content = RequestContent.Create(new
            {
                wireName = true,
            });
            Response response = client.CompatibleWithEncodedName(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Property_CompatibleWithEncodedName_AllParameters_Async()
        {
            NamingClient client = new NamingClient();

            using RequestContent content = RequestContent.Create(new
            {
                wireName = true,
            });
            Response response = await client.CompatibleWithEncodedNameAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Property_CompatibleWithEncodedName_AllParameters_Convenience()
        {
            NamingClient client = new NamingClient();

            ClientNameAndJsonEncodedNameModel clientNameAndJsonEncodedNameModel = new ClientNameAndJsonEncodedNameModel(true);
            Response response = client.CompatibleWithEncodedName(clientNameAndJsonEncodedNameModel);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Property_CompatibleWithEncodedName_AllParameters_Convenience_Async()
        {
            NamingClient client = new NamingClient();

            ClientNameAndJsonEncodedNameModel clientNameAndJsonEncodedNameModel = new ClientNameAndJsonEncodedNameModel(true);
            Response response = await client.CompatibleWithEncodedNameAsync(clientNameAndJsonEncodedNameModel);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Header_Request_ShortVersion()
        {
            NamingClient client = new NamingClient();

            Response response = client.Request("<clientName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Header_Request_ShortVersion_Async()
        {
            NamingClient client = new NamingClient();

            Response response = await client.RequestAsync("<clientName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Header_Request_AllParameters()
        {
            NamingClient client = new NamingClient();

            Response response = client.Request("<clientName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Header_Request_AllParameters_Async()
        {
            NamingClient client = new NamingClient();

            Response response = await client.RequestAsync("<clientName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Header_Response_ShortVersion()
        {
            NamingClient client = new NamingClient();

            Response response = client.Response();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Header_Response_ShortVersion_Async()
        {
            NamingClient client = new NamingClient();

            Response response = await client.ResponseAsync();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Header_Response_AllParameters()
        {
            NamingClient client = new NamingClient();

            Response response = client.Response();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Header_Response_AllParameters_Async()
        {
            NamingClient client = new NamingClient();

            Response response = await client.ResponseAsync();

            Console.WriteLine(response.Status);
        }
    }
}
