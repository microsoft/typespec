// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Parameters.Spread.Models
{
    /// <summary> The SpreadWithMultipleParametersRequest. </summary>
    internal partial class SpreadWithMultipleParametersRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SpreadWithMultipleParametersRequest"/>. </summary>
        /// <param name="prop1"></param>
        /// <param name="prop2"></param>
        /// <param name="prop3"></param>
        /// <param name="prop4"></param>
        /// <param name="prop5"></param>
        /// <param name="prop6"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="prop1"/>, <paramref name="prop2"/>, <paramref name="prop3"/>, <paramref name="prop4"/>, <paramref name="prop5"/> or <paramref name="prop6"/> is null. </exception>
        public SpreadWithMultipleParametersRequest(string prop1, string prop2, string prop3, string prop4, string prop5, string prop6)
        {
            if (prop1 == null)
            {
                throw new ArgumentNullException(nameof(prop1));
            }
            if (prop2 == null)
            {
                throw new ArgumentNullException(nameof(prop2));
            }
            if (prop3 == null)
            {
                throw new ArgumentNullException(nameof(prop3));
            }
            if (prop4 == null)
            {
                throw new ArgumentNullException(nameof(prop4));
            }
            if (prop5 == null)
            {
                throw new ArgumentNullException(nameof(prop5));
            }
            if (prop6 == null)
            {
                throw new ArgumentNullException(nameof(prop6));
            }

            Prop1 = prop1;
            Prop2 = prop2;
            Prop3 = prop3;
            Prop4 = prop4;
            Prop5 = prop5;
            Prop6 = prop6;
        }

        /// <summary> Initializes a new instance of <see cref="SpreadWithMultipleParametersRequest"/>. </summary>
        /// <param name="prop1"></param>
        /// <param name="prop2"></param>
        /// <param name="prop3"></param>
        /// <param name="prop4"></param>
        /// <param name="prop5"></param>
        /// <param name="prop6"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SpreadWithMultipleParametersRequest(string prop1, string prop2, string prop3, string prop4, string prop5, string prop6, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Prop1 = prop1;
            Prop2 = prop2;
            Prop3 = prop3;
            Prop4 = prop4;
            Prop5 = prop5;
            Prop6 = prop6;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SpreadWithMultipleParametersRequest"/> for deserialization. </summary>
        internal SpreadWithMultipleParametersRequest()
        {
        }

        /// <summary> Gets the prop 1. </summary>
        public string Prop1 { get; }
        /// <summary> Gets the prop 2. </summary>
        public string Prop2 { get; }
        /// <summary> Gets the prop 3. </summary>
        public string Prop3 { get; }
        /// <summary> Gets the prop 4. </summary>
        public string Prop4 { get; }
        /// <summary> Gets the prop 5. </summary>
        public string Prop5 { get; }
        /// <summary> Gets the prop 6. </summary>
        public string Prop6 { get; }
    }
}
