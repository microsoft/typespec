<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetDatetimeValueAsync(CancellationToken)">
      <example>
This sample shows how to call GetDatetimeValueAsync.
<code><![CDATA[
DatetimeValue client = new DictionaryClient().GetDatetimeValueClient();

Response<IReadOnlyDictionary<string, DateTimeOffset>> response = await client.GetDatetimeValueAsync();
]]></code>
This sample shows how to call GetDatetimeValueAsync with all parameters.
<code><![CDATA[
DatetimeValue client = new DictionaryClient().GetDatetimeValueClient();

Response<IReadOnlyDictionary<string, DateTimeOffset>> response = await client.GetDatetimeValueAsync();
]]></code></example>
    </member>
    <member name="GetDatetimeValue(CancellationToken)">
      <example>
This sample shows how to call GetDatetimeValue.
<code><![CDATA[
DatetimeValue client = new DictionaryClient().GetDatetimeValueClient();

Response<IReadOnlyDictionary<string, DateTimeOffset>> response = client.GetDatetimeValue();
]]></code>
This sample shows how to call GetDatetimeValue with all parameters.
<code><![CDATA[
DatetimeValue client = new DictionaryClient().GetDatetimeValueClient();

Response<IReadOnlyDictionary<string, DateTimeOffset>> response = client.GetDatetimeValue();
]]></code></example>
    </member>
    <member name="GetDatetimeValueAsync(RequestContext)">
      <example>
This sample shows how to call GetDatetimeValueAsync and parse the result.
<code><![CDATA[
DatetimeValue client = new DictionaryClient().GetDatetimeValueClient();

Response response = await client.GetDatetimeValueAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetDatetimeValueAsync with all parameters and parse the result.
<code><![CDATA[
DatetimeValue client = new DictionaryClient().GetDatetimeValueClient();

Response response = await client.GetDatetimeValueAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetDatetimeValue(RequestContext)">
      <example>
This sample shows how to call GetDatetimeValue and parse the result.
<code><![CDATA[
DatetimeValue client = new DictionaryClient().GetDatetimeValueClient();

Response response = client.GetDatetimeValue(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetDatetimeValue with all parameters and parse the result.
<code><![CDATA[
DatetimeValue client = new DictionaryClient().GetDatetimeValueClient();

Response response = client.GetDatetimeValue(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="PutAsync(IDictionary{string,DateTimeOffset},CancellationToken)">
      <example>
This sample shows how to call PutAsync.
<code><![CDATA[
DatetimeValue client = new DictionaryClient().GetDatetimeValueClient();

Response response = await client.PutAsync(new Dictionary<string, DateTimeOffset>
{
    ["key"] = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00")
});
]]></code>
This sample shows how to call PutAsync with all parameters.
<code><![CDATA[
DatetimeValue client = new DictionaryClient().GetDatetimeValueClient();

Response response = await client.PutAsync(new Dictionary<string, DateTimeOffset>
{
    ["key"] = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00")
});
]]></code></example>
    </member>
    <member name="Put(IDictionary{string,DateTimeOffset},CancellationToken)">
      <example>
This sample shows how to call Put.
<code><![CDATA[
DatetimeValue client = new DictionaryClient().GetDatetimeValueClient();

Response response = client.Put(new Dictionary<string, DateTimeOffset>
{
    ["key"] = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00")
});
]]></code>
This sample shows how to call Put with all parameters.
<code><![CDATA[
DatetimeValue client = new DictionaryClient().GetDatetimeValueClient();

Response response = client.Put(new Dictionary<string, DateTimeOffset>
{
    ["key"] = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00")
});
]]></code></example>
    </member>
    <member name="PutAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call PutAsync.
<code><![CDATA[
DatetimeValue client = new DictionaryClient().GetDatetimeValueClient();

using RequestContent content = RequestContent.Create(new
{
    key = "2022-05-10T14:57:31.2311892-04:00",
});
Response response = await client.PutAsync(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutAsync with all request content.
<code><![CDATA[
DatetimeValue client = new DictionaryClient().GetDatetimeValueClient();

using RequestContent content = RequestContent.Create(new
{
    key = "2022-05-10T14:57:31.2311892-04:00",
});
Response response = await client.PutAsync(content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="Put(RequestContent,RequestContext)">
      <example>
This sample shows how to call Put.
<code><![CDATA[
DatetimeValue client = new DictionaryClient().GetDatetimeValueClient();

using RequestContent content = RequestContent.Create(new
{
    key = "2022-05-10T14:57:31.2311892-04:00",
});
Response response = client.Put(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call Put with all request content.
<code><![CDATA[
DatetimeValue client = new DictionaryClient().GetDatetimeValueClient();

using RequestContent content = RequestContent.Create(new
{
    key = "2022-05-10T14:57:31.2311892-04:00",
});
Response response = client.Put(content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
  </members>
</doc>