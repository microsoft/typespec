// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Scalar;

namespace _Type.Scalar.Samples
{
    public partial class Samples_DecimalType
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DecimalType_ResponseBody_ShortVersion()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            Response response = client.ResponseBody(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DecimalType_ResponseBody_ShortVersion_Async()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            Response response = await client.ResponseBodyAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DecimalType_ResponseBody_ShortVersion_Convenience()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            Response<decimal> response = client.ResponseBody();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DecimalType_ResponseBody_ShortVersion_Convenience_Async()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            Response<decimal> response = await client.ResponseBodyAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DecimalType_ResponseBody_AllParameters()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            Response response = client.ResponseBody(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DecimalType_ResponseBody_AllParameters_Async()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            Response response = await client.ResponseBodyAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DecimalType_ResponseBody_AllParameters_Convenience()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            Response<decimal> response = client.ResponseBody();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DecimalType_ResponseBody_AllParameters_Convenience_Async()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            Response<decimal> response = await client.ResponseBodyAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DecimalType_RequestBody_ShortVersion()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.RequestBody(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DecimalType_RequestBody_ShortVersion_Async()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.RequestBodyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DecimalType_RequestBody_ShortVersion_Convenience()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            Response response = client.RequestBody((decimal)default);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DecimalType_RequestBody_ShortVersion_Convenience_Async()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            Response response = await client.RequestBodyAsync((decimal)default);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DecimalType_RequestBody_AllParameters()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.RequestBody(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DecimalType_RequestBody_AllParameters_Async()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.RequestBodyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DecimalType_RequestBody_AllParameters_Convenience()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            Response response = client.RequestBody((decimal)default);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DecimalType_RequestBody_AllParameters_Convenience_Async()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            Response response = await client.RequestBodyAsync((decimal)default);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DecimalType_RequestParameter_ShortVersion()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            Response response = client.RequestParameter(default);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DecimalType_RequestParameter_ShortVersion_Async()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            Response response = await client.RequestParameterAsync(default);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DecimalType_RequestParameter_AllParameters()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            Response response = client.RequestParameter(default);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DecimalType_RequestParameter_AllParameters_Async()
        {
            DecimalType client = new ScalarClient().GetDecimalTypeClient();

            Response response = await client.RequestParameterAsync(default);

            Console.WriteLine(response.Status);
        }
    }
}
