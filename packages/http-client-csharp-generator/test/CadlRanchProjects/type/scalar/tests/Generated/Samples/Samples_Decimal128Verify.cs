// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Scalar;

namespace _Type.Scalar.Samples
{
    public partial class Samples_Decimal128Verify
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Decimal128Verify_PrepareVerify_ShortVersion()
        {
            Decimal128Verify client = new ScalarClient().GetDecimal128VerifyClient();

            Response response = client.PrepareVerify(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Decimal128Verify_PrepareVerify_ShortVersion_Async()
        {
            Decimal128Verify client = new ScalarClient().GetDecimal128VerifyClient();

            Response response = await client.PrepareVerifyAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Decimal128Verify_PrepareVerify_ShortVersion_Convenience()
        {
            Decimal128Verify client = new ScalarClient().GetDecimal128VerifyClient();

            Response<IReadOnlyList<decimal>> response = client.PrepareVerify();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Decimal128Verify_PrepareVerify_ShortVersion_Convenience_Async()
        {
            Decimal128Verify client = new ScalarClient().GetDecimal128VerifyClient();

            Response<IReadOnlyList<decimal>> response = await client.PrepareVerifyAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Decimal128Verify_PrepareVerify_AllParameters()
        {
            Decimal128Verify client = new ScalarClient().GetDecimal128VerifyClient();

            Response response = client.PrepareVerify(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Decimal128Verify_PrepareVerify_AllParameters_Async()
        {
            Decimal128Verify client = new ScalarClient().GetDecimal128VerifyClient();

            Response response = await client.PrepareVerifyAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Decimal128Verify_PrepareVerify_AllParameters_Convenience()
        {
            Decimal128Verify client = new ScalarClient().GetDecimal128VerifyClient();

            Response<IReadOnlyList<decimal>> response = client.PrepareVerify();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Decimal128Verify_PrepareVerify_AllParameters_Convenience_Async()
        {
            Decimal128Verify client = new ScalarClient().GetDecimal128VerifyClient();

            Response<IReadOnlyList<decimal>> response = await client.PrepareVerifyAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Decimal128Verify_Verify_ShortVersion()
        {
            Decimal128Verify client = new ScalarClient().GetDecimal128VerifyClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Verify(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Decimal128Verify_Verify_ShortVersion_Async()
        {
            Decimal128Verify client = new ScalarClient().GetDecimal128VerifyClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.VerifyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Decimal128Verify_Verify_ShortVersion_Convenience()
        {
            Decimal128Verify client = new ScalarClient().GetDecimal128VerifyClient();

            Response response = client.Verify((decimal)default);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Decimal128Verify_Verify_ShortVersion_Convenience_Async()
        {
            Decimal128Verify client = new ScalarClient().GetDecimal128VerifyClient();

            Response response = await client.VerifyAsync((decimal)default);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Decimal128Verify_Verify_AllParameters()
        {
            Decimal128Verify client = new ScalarClient().GetDecimal128VerifyClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Verify(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Decimal128Verify_Verify_AllParameters_Async()
        {
            Decimal128Verify client = new ScalarClient().GetDecimal128VerifyClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.VerifyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Decimal128Verify_Verify_AllParameters_Convenience()
        {
            Decimal128Verify client = new ScalarClient().GetDecimal128VerifyClient();

            Response response = client.Verify((decimal)default);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Decimal128Verify_Verify_AllParameters_Convenience_Async()
        {
            Decimal128Verify client = new ScalarClient().GetDecimal128VerifyClient();

            Response response = await client.VerifyAsync((decimal)default);
        }
    }
}
