// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using _Type.Model.Inheritance.EnumDiscriminator.Models;

namespace _Type.Model.Inheritance.EnumDiscriminator
{
    // Data plane generated client.
    /// <summary> Illustrates inheritance with enum discriminator. </summary>
    public partial class EnumDiscriminatorClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of EnumDiscriminatorClient. </summary>
        public EnumDiscriminatorClient() : this(new Uri("http://localhost:3000"), new EnumDiscriminatorClientOptions())
        {
        }

        /// <summary> Initializes a new instance of EnumDiscriminatorClient. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public EnumDiscriminatorClient(Uri endpoint, EnumDiscriminatorClientOptions options)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            options ??= new EnumDiscriminatorClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Receive model with extensible enum discriminator type. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetExtensibleModelAsync(CancellationToken)']/*" />
        public virtual async Task<Response<Dog>> GetExtensibleModelAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetExtensibleModelAsync(context).ConfigureAwait(false);
            return Response.FromValue(Dog.FromResponse(response), response);
        }

        /// <summary> Receive model with extensible enum discriminator type. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetExtensibleModel(CancellationToken)']/*" />
        public virtual Response<Dog> GetExtensibleModel(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetExtensibleModel(context);
            return Response.FromValue(Dog.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Receive model with extensible enum discriminator type.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetExtensibleModelAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetExtensibleModelAsync(RequestContext)']/*" />
        public virtual async Task<Response> GetExtensibleModelAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("EnumDiscriminatorClient.GetExtensibleModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetExtensibleModelRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Receive model with extensible enum discriminator type.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetExtensibleModel(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetExtensibleModel(RequestContext)']/*" />
        public virtual Response GetExtensibleModel(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("EnumDiscriminatorClient.GetExtensibleModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetExtensibleModelRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send model with extensible enum discriminator type. </summary>
        /// <param name="input"> Dog to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='PutExtensibleModelAsync(Dog,CancellationToken)']/*" />
        public virtual async Task<Response> PutExtensibleModelAsync(Dog input, CancellationToken cancellationToken = default)
        {
            if (input == null)
            {
                throw new ArgumentNullException(nameof(input));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = input.ToRequestContent();
            Response response = await PutExtensibleModelAsync(content, context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Send model with extensible enum discriminator type. </summary>
        /// <param name="input"> Dog to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='PutExtensibleModel(Dog,CancellationToken)']/*" />
        public virtual Response PutExtensibleModel(Dog input, CancellationToken cancellationToken = default)
        {
            if (input == null)
            {
                throw new ArgumentNullException(nameof(input));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = input.ToRequestContent();
            Response response = PutExtensibleModel(content, context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] Send model with extensible enum discriminator type.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="PutExtensibleModelAsync(Dog,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='PutExtensibleModelAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> PutExtensibleModelAsync(RequestContent content, RequestContext context = null)
        {
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("EnumDiscriminatorClient.PutExtensibleModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutExtensibleModelRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Send model with extensible enum discriminator type.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="PutExtensibleModel(Dog,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='PutExtensibleModel(RequestContent,RequestContext)']/*" />
        public virtual Response PutExtensibleModel(RequestContent content, RequestContext context = null)
        {
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("EnumDiscriminatorClient.PutExtensibleModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutExtensibleModelRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a model omitting the discriminator. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetExtensibleModelMissingDiscriminatorAsync(CancellationToken)']/*" />
        public virtual async Task<Response<Dog>> GetExtensibleModelMissingDiscriminatorAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetExtensibleModelMissingDiscriminatorAsync(context).ConfigureAwait(false);
            return Response.FromValue(Dog.FromResponse(response), response);
        }

        /// <summary> Get a model omitting the discriminator. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetExtensibleModelMissingDiscriminator(CancellationToken)']/*" />
        public virtual Response<Dog> GetExtensibleModelMissingDiscriminator(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetExtensibleModelMissingDiscriminator(context);
            return Response.FromValue(Dog.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get a model omitting the discriminator.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetExtensibleModelMissingDiscriminatorAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetExtensibleModelMissingDiscriminatorAsync(RequestContext)']/*" />
        public virtual async Task<Response> GetExtensibleModelMissingDiscriminatorAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("EnumDiscriminatorClient.GetExtensibleModelMissingDiscriminator");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetExtensibleModelMissingDiscriminatorRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get a model omitting the discriminator.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetExtensibleModelMissingDiscriminator(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetExtensibleModelMissingDiscriminator(RequestContext)']/*" />
        public virtual Response GetExtensibleModelMissingDiscriminator(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("EnumDiscriminatorClient.GetExtensibleModelMissingDiscriminator");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetExtensibleModelMissingDiscriminatorRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a model containing discriminator value never defined. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetExtensibleModelWrongDiscriminatorAsync(CancellationToken)']/*" />
        public virtual async Task<Response<Dog>> GetExtensibleModelWrongDiscriminatorAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetExtensibleModelWrongDiscriminatorAsync(context).ConfigureAwait(false);
            return Response.FromValue(Dog.FromResponse(response), response);
        }

        /// <summary> Get a model containing discriminator value never defined. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetExtensibleModelWrongDiscriminator(CancellationToken)']/*" />
        public virtual Response<Dog> GetExtensibleModelWrongDiscriminator(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetExtensibleModelWrongDiscriminator(context);
            return Response.FromValue(Dog.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get a model containing discriminator value never defined.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetExtensibleModelWrongDiscriminatorAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetExtensibleModelWrongDiscriminatorAsync(RequestContext)']/*" />
        public virtual async Task<Response> GetExtensibleModelWrongDiscriminatorAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("EnumDiscriminatorClient.GetExtensibleModelWrongDiscriminator");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetExtensibleModelWrongDiscriminatorRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get a model containing discriminator value never defined.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetExtensibleModelWrongDiscriminator(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetExtensibleModelWrongDiscriminator(RequestContext)']/*" />
        public virtual Response GetExtensibleModelWrongDiscriminator(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("EnumDiscriminatorClient.GetExtensibleModelWrongDiscriminator");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetExtensibleModelWrongDiscriminatorRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Receive model with fixed enum discriminator type. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetFixedModelAsync(CancellationToken)']/*" />
        public virtual async Task<Response<Snake>> GetFixedModelAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetFixedModelAsync(context).ConfigureAwait(false);
            return Response.FromValue(Snake.FromResponse(response), response);
        }

        /// <summary> Receive model with fixed enum discriminator type. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetFixedModel(CancellationToken)']/*" />
        public virtual Response<Snake> GetFixedModel(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetFixedModel(context);
            return Response.FromValue(Snake.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Receive model with fixed enum discriminator type.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFixedModelAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetFixedModelAsync(RequestContext)']/*" />
        public virtual async Task<Response> GetFixedModelAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("EnumDiscriminatorClient.GetFixedModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFixedModelRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Receive model with fixed enum discriminator type.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFixedModel(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetFixedModel(RequestContext)']/*" />
        public virtual Response GetFixedModel(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("EnumDiscriminatorClient.GetFixedModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFixedModelRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send model with fixed enum discriminator type. </summary>
        /// <param name="input"> Snake to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='PutFixedModelAsync(Snake,CancellationToken)']/*" />
        public virtual async Task<Response> PutFixedModelAsync(Snake input, CancellationToken cancellationToken = default)
        {
            if (input == null)
            {
                throw new ArgumentNullException(nameof(input));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = input.ToRequestContent();
            Response response = await PutFixedModelAsync(content, context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Send model with fixed enum discriminator type. </summary>
        /// <param name="input"> Snake to create. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='PutFixedModel(Snake,CancellationToken)']/*" />
        public virtual Response PutFixedModel(Snake input, CancellationToken cancellationToken = default)
        {
            if (input == null)
            {
                throw new ArgumentNullException(nameof(input));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = input.ToRequestContent();
            Response response = PutFixedModel(content, context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] Send model with fixed enum discriminator type.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="PutFixedModelAsync(Snake,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='PutFixedModelAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> PutFixedModelAsync(RequestContent content, RequestContext context = null)
        {
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("EnumDiscriminatorClient.PutFixedModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutFixedModelRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Send model with fixed enum discriminator type.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="PutFixedModel(Snake,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='PutFixedModel(RequestContent,RequestContext)']/*" />
        public virtual Response PutFixedModel(RequestContent content, RequestContext context = null)
        {
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("EnumDiscriminatorClient.PutFixedModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutFixedModelRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a model omitting the discriminator. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetFixedModelMissingDiscriminatorAsync(CancellationToken)']/*" />
        public virtual async Task<Response<Snake>> GetFixedModelMissingDiscriminatorAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetFixedModelMissingDiscriminatorAsync(context).ConfigureAwait(false);
            return Response.FromValue(Snake.FromResponse(response), response);
        }

        /// <summary> Get a model omitting the discriminator. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetFixedModelMissingDiscriminator(CancellationToken)']/*" />
        public virtual Response<Snake> GetFixedModelMissingDiscriminator(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetFixedModelMissingDiscriminator(context);
            return Response.FromValue(Snake.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get a model omitting the discriminator.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFixedModelMissingDiscriminatorAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetFixedModelMissingDiscriminatorAsync(RequestContext)']/*" />
        public virtual async Task<Response> GetFixedModelMissingDiscriminatorAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("EnumDiscriminatorClient.GetFixedModelMissingDiscriminator");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFixedModelMissingDiscriminatorRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get a model omitting the discriminator.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFixedModelMissingDiscriminator(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetFixedModelMissingDiscriminator(RequestContext)']/*" />
        public virtual Response GetFixedModelMissingDiscriminator(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("EnumDiscriminatorClient.GetFixedModelMissingDiscriminator");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFixedModelMissingDiscriminatorRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a model containing discriminator value never defined. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetFixedModelWrongDiscriminatorAsync(CancellationToken)']/*" />
        public virtual async Task<Response<Snake>> GetFixedModelWrongDiscriminatorAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetFixedModelWrongDiscriminatorAsync(context).ConfigureAwait(false);
            return Response.FromValue(Snake.FromResponse(response), response);
        }

        /// <summary> Get a model containing discriminator value never defined. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetFixedModelWrongDiscriminator(CancellationToken)']/*" />
        public virtual Response<Snake> GetFixedModelWrongDiscriminator(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetFixedModelWrongDiscriminator(context);
            return Response.FromValue(Snake.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get a model containing discriminator value never defined.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFixedModelWrongDiscriminatorAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetFixedModelWrongDiscriminatorAsync(RequestContext)']/*" />
        public virtual async Task<Response> GetFixedModelWrongDiscriminatorAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("EnumDiscriminatorClient.GetFixedModelWrongDiscriminator");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFixedModelWrongDiscriminatorRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get a model containing discriminator value never defined.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFixedModelWrongDiscriminator(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/EnumDiscriminatorClient.xml" path="doc/members/member[@name='GetFixedModelWrongDiscriminator(RequestContext)']/*" />
        public virtual Response GetFixedModelWrongDiscriminator(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("EnumDiscriminatorClient.GetFixedModelWrongDiscriminator");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFixedModelWrongDiscriminatorRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetExtensibleModelRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/type/model/inheritance/enum-discriminator/extensible-enum", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePutExtensibleModelRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/type/model/inheritance/enum-discriminator/extensible-enum", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetExtensibleModelMissingDiscriminatorRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/type/model/inheritance/enum-discriminator/extensible-enum/missingdiscriminator", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetExtensibleModelWrongDiscriminatorRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/type/model/inheritance/enum-discriminator/extensible-enum/wrongdiscriminator", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetFixedModelRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/type/model/inheritance/enum-discriminator/fixed-enum", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePutFixedModelRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/type/model/inheritance/enum-discriminator/fixed-enum", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetFixedModelMissingDiscriminatorRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/type/model/inheritance/enum-discriminator/fixed-enum/missingdiscriminator", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetFixedModelWrongDiscriminatorRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/type/model/inheritance/enum-discriminator/fixed-enum/wrongdiscriminator", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
