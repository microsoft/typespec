// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Model.Inheritance.Recursive;
using _Type.Model.Inheritance.Recursive.Models;

namespace _Type.Model.Inheritance.Recursive.Samples
{
    public partial class Samples_RecursiveClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Recursive_Put_ShortVersion()
        {
            RecursiveClient client = new RecursiveClient();

            using RequestContent content = RequestContent.Create(new
            {
                level = 123,
            });
            Response response = client.Put(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Recursive_Put_ShortVersion_Async()
        {
            RecursiveClient client = new RecursiveClient();

            using RequestContent content = RequestContent.Create(new
            {
                level = 123,
            });
            Response response = await client.PutAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Recursive_Put_ShortVersion_Convenience()
        {
            RecursiveClient client = new RecursiveClient();

            Extension input = new Extension(123);
            Response response = client.Put(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Recursive_Put_ShortVersion_Convenience_Async()
        {
            RecursiveClient client = new RecursiveClient();

            Extension input = new Extension(123);
            Response response = await client.PutAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Recursive_Put_AllParameters()
        {
            RecursiveClient client = new RecursiveClient();

            using RequestContent content = RequestContent.Create(new
            {
                level = 123,
                extension = new object[]
            {
null
            },
            });
            Response response = client.Put(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Recursive_Put_AllParameters_Async()
        {
            RecursiveClient client = new RecursiveClient();

            using RequestContent content = RequestContent.Create(new
            {
                level = 123,
                extension = new object[]
            {
null
            },
            });
            Response response = await client.PutAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Recursive_Put_AllParameters_Convenience()
        {
            RecursiveClient client = new RecursiveClient();

            Extension input = new Extension(123);
            Response response = client.Put(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Recursive_Put_AllParameters_Convenience_Async()
        {
            RecursiveClient client = new RecursiveClient();

            Extension input = new Extension(123);
            Response response = await client.PutAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Recursive_GetRecursive_ShortVersion()
        {
            RecursiveClient client = new RecursiveClient();

            Response response = client.GetRecursive(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("level").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Recursive_GetRecursive_ShortVersion_Async()
        {
            RecursiveClient client = new RecursiveClient();

            Response response = await client.GetRecursiveAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("level").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Recursive_GetRecursive_ShortVersion_Convenience()
        {
            RecursiveClient client = new RecursiveClient();

            Response<Extension> response = client.GetRecursive();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Recursive_GetRecursive_ShortVersion_Convenience_Async()
        {
            RecursiveClient client = new RecursiveClient();

            Response<Extension> response = await client.GetRecursiveAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Recursive_GetRecursive_AllParameters()
        {
            RecursiveClient client = new RecursiveClient();

            Response response = client.GetRecursive(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("level").ToString());
            Console.WriteLine(result.GetProperty("extension")[0].GetProperty("level").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Recursive_GetRecursive_AllParameters_Async()
        {
            RecursiveClient client = new RecursiveClient();

            Response response = await client.GetRecursiveAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("level").ToString());
            Console.WriteLine(result.GetProperty("extension")[0].GetProperty("level").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Recursive_GetRecursive_AllParameters_Convenience()
        {
            RecursiveClient client = new RecursiveClient();

            Response<Extension> response = client.GetRecursive();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Recursive_GetRecursive_AllParameters_Convenience_Async()
        {
            RecursiveClient client = new RecursiveClient();

            Response<Extension> response = await client.GetRecursiveAsync();
        }
    }
}
