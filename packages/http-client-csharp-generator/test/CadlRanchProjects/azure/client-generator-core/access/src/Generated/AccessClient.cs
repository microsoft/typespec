// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using Azure.Core;
using Azure.Core.Pipeline;

namespace _Specs_.Azure.ClientGenerator.Core.Access
{
    // Data plane generated client.
    /// <summary> The Access service client. </summary>
    public partial class AccessClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of AccessClient. </summary>
        public AccessClient() : this(new Uri("http://localhost:3000"), new AccessClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AccessClient. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public AccessClient(Uri endpoint, AccessClientOptions options)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            options ??= new AccessClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        private PublicOperation _cachedPublicOperation;
        private InternalOperation _cachedInternalOperation;
        private SharedModelInOperation _cachedSharedModelInOperation;
        private RelativeModelInOperation _cachedRelativeModelInOperation;

        /// <summary> Initializes a new instance of PublicOperation. </summary>
        public virtual PublicOperation GetPublicOperationClient()
        {
            return Volatile.Read(ref _cachedPublicOperation) ?? Interlocked.CompareExchange(ref _cachedPublicOperation, new PublicOperation(ClientDiagnostics, _pipeline, _endpoint), null) ?? _cachedPublicOperation;
        }

        /// <summary> Initializes a new instance of InternalOperation. </summary>
        public virtual InternalOperation GetInternalOperationClient()
        {
            return Volatile.Read(ref _cachedInternalOperation) ?? Interlocked.CompareExchange(ref _cachedInternalOperation, new InternalOperation(ClientDiagnostics, _pipeline, _endpoint), null) ?? _cachedInternalOperation;
        }

        /// <summary> Initializes a new instance of SharedModelInOperation. </summary>
        public virtual SharedModelInOperation GetSharedModelInOperationClient()
        {
            return Volatile.Read(ref _cachedSharedModelInOperation) ?? Interlocked.CompareExchange(ref _cachedSharedModelInOperation, new SharedModelInOperation(ClientDiagnostics, _pipeline, _endpoint), null) ?? _cachedSharedModelInOperation;
        }

        /// <summary> Initializes a new instance of RelativeModelInOperation. </summary>
        public virtual RelativeModelInOperation GetRelativeModelInOperationClient()
        {
            return Volatile.Read(ref _cachedRelativeModelInOperation) ?? Interlocked.CompareExchange(ref _cachedRelativeModelInOperation, new RelativeModelInOperation(ClientDiagnostics, _pipeline, _endpoint), null) ?? _cachedRelativeModelInOperation;
        }
    }
}
