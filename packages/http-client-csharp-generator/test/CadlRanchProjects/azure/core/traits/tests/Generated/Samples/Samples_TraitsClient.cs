// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Specs_.Azure.Core.Traits;
using _Specs_.Azure.Core.Traits.Models;

namespace _Specs_.Azure.Core.Traits.Samples
{
    public partial class Samples_TraitsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_SmokeTest_ShortVersion()
        {
            TraitsClient client = new TraitsClient();

            Response response = client.SmokeTest(1234, "<foo>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_SmokeTest_ShortVersion_Async()
        {
            TraitsClient client = new TraitsClient();

            Response response = await client.SmokeTestAsync(1234, "<foo>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_SmokeTest_ShortVersion_Convenience()
        {
            TraitsClient client = new TraitsClient();

            Response<User> response = client.SmokeTest(1234, "<foo>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_SmokeTest_ShortVersion_Convenience_Async()
        {
            TraitsClient client = new TraitsClient();

            Response<User> response = await client.SmokeTestAsync(1234, "<foo>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_SmokeTest_AllParameters()
        {
            TraitsClient client = new TraitsClient();

            Response response = client.SmokeTest(1234, "<foo>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_SmokeTest_AllParameters_Async()
        {
            TraitsClient client = new TraitsClient();

            Response response = await client.SmokeTestAsync(1234, "<foo>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_SmokeTest_AllParameters_Convenience()
        {
            TraitsClient client = new TraitsClient();

            Response<User> response = client.SmokeTest(1234, "<foo>", requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_SmokeTest_AllParameters_Convenience_Async()
        {
            TraitsClient client = new TraitsClient();

            Response<User> response = await client.SmokeTestAsync(1234, "<foo>", requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Traits_RepeatableAction_ShortVersion()
        {
            TraitsClient client = new TraitsClient();

            using RequestContent content = RequestContent.Create(new
            {
                userActionValue = "<userActionValue>",
            });
            Response response = client.RepeatableAction(1234, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("userActionResult").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Traits_RepeatableAction_ShortVersion_Async()
        {
            TraitsClient client = new TraitsClient();

            using RequestContent content = RequestContent.Create(new
            {
                userActionValue = "<userActionValue>",
            });
            Response response = await client.RepeatableActionAsync(1234, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("userActionResult").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Traits_RepeatableAction_ShortVersion_Convenience()
        {
            TraitsClient client = new TraitsClient();

            UserActionParam userActionParam = new UserActionParam("<userActionValue>");
            Response<UserActionResponse> response = client.RepeatableAction(1234, userActionParam);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Traits_RepeatableAction_ShortVersion_Convenience_Async()
        {
            TraitsClient client = new TraitsClient();

            UserActionParam userActionParam = new UserActionParam("<userActionValue>");
            Response<UserActionResponse> response = await client.RepeatableActionAsync(1234, userActionParam);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Traits_RepeatableAction_AllParameters()
        {
            TraitsClient client = new TraitsClient();

            using RequestContent content = RequestContent.Create(new
            {
                userActionValue = "<userActionValue>",
            });
            Response response = client.RepeatableAction(1234, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("userActionResult").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Traits_RepeatableAction_AllParameters_Async()
        {
            TraitsClient client = new TraitsClient();

            using RequestContent content = RequestContent.Create(new
            {
                userActionValue = "<userActionValue>",
            });
            Response response = await client.RepeatableActionAsync(1234, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("userActionResult").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Traits_RepeatableAction_AllParameters_Convenience()
        {
            TraitsClient client = new TraitsClient();

            UserActionParam userActionParam = new UserActionParam("<userActionValue>");
            Response<UserActionResponse> response = client.RepeatableAction(1234, userActionParam);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Traits_RepeatableAction_AllParameters_Convenience_Async()
        {
            TraitsClient client = new TraitsClient();

            UserActionParam userActionParam = new UserActionParam("<userActionValue>");
            Response<UserActionResponse> response = await client.RepeatableActionAsync(1234, userActionParam);
        }
    }
}
