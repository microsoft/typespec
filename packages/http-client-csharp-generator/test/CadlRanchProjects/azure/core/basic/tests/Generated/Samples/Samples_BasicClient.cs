// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Specs_.Azure.Core.Basic;
using _Specs_.Azure.Core.Basic.Models;

namespace _Specs_.Azure.Core.Basic.Samples
{
    public partial class Samples_BasicClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_CreateOrUpdate_ShortVersion()
        {
            BasicClient client = new BasicClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreateOrUpdate(1234, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_CreateOrUpdate_ShortVersion_Async()
        {
            BasicClient client = new BasicClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateOrUpdateAsync(1234, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_CreateOrUpdate_AllParameters()
        {
            BasicClient client = new BasicClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                orders = new object[]
            {
new
{
userId = 1234,
detail = "<detail>",
}
            },
            });
            Response response = client.CreateOrUpdate(1234, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("detail").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_CreateOrUpdate_AllParameters_Async()
        {
            BasicClient client = new BasicClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                orders = new object[]
            {
new
{
userId = 1234,
detail = "<detail>",
}
            },
            });
            Response response = await client.CreateOrUpdateAsync(1234, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("detail").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_CreateOrReplace_ShortVersion()
        {
            BasicClient client = new BasicClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreateOrReplace(1234, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_CreateOrReplace_ShortVersion_Async()
        {
            BasicClient client = new BasicClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateOrReplaceAsync(1234, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_CreateOrReplace_ShortVersion_Convenience()
        {
            BasicClient client = new BasicClient();

            User resource = new User("<name>");
            Response<User> response = client.CreateOrReplace(1234, resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_CreateOrReplace_ShortVersion_Convenience_Async()
        {
            BasicClient client = new BasicClient();

            User resource = new User("<name>");
            Response<User> response = await client.CreateOrReplaceAsync(1234, resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_CreateOrReplace_AllParameters()
        {
            BasicClient client = new BasicClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                orders = new object[]
            {
new
{
userId = 1234,
detail = "<detail>",
}
            },
            });
            Response response = client.CreateOrReplace(1234, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("detail").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_CreateOrReplace_AllParameters_Async()
        {
            BasicClient client = new BasicClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                orders = new object[]
            {
new
{
userId = 1234,
detail = "<detail>",
}
            },
            });
            Response response = await client.CreateOrReplaceAsync(1234, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("detail").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_CreateOrReplace_AllParameters_Convenience()
        {
            BasicClient client = new BasicClient();

            User resource = new User("<name>")
            {
                Orders = { new UserOrder(1234, "<detail>") },
            };
            Response<User> response = client.CreateOrReplace(1234, resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_CreateOrReplace_AllParameters_Convenience_Async()
        {
            BasicClient client = new BasicClient();

            User resource = new User("<name>")
            {
                Orders = { new UserOrder(1234, "<detail>") },
            };
            Response<User> response = await client.CreateOrReplaceAsync(1234, resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_GetUser_ShortVersion()
        {
            BasicClient client = new BasicClient();

            Response response = client.GetUser(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_GetUser_ShortVersion_Async()
        {
            BasicClient client = new BasicClient();

            Response response = await client.GetUserAsync(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_GetUser_ShortVersion_Convenience()
        {
            BasicClient client = new BasicClient();

            Response<User> response = client.GetUser(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_GetUser_ShortVersion_Convenience_Async()
        {
            BasicClient client = new BasicClient();

            Response<User> response = await client.GetUserAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_GetUser_AllParameters()
        {
            BasicClient client = new BasicClient();

            Response response = client.GetUser(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("detail").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_GetUser_AllParameters_Async()
        {
            BasicClient client = new BasicClient();

            Response response = await client.GetUserAsync(1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("detail").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_GetUser_AllParameters_Convenience()
        {
            BasicClient client = new BasicClient();

            Response<User> response = client.GetUser(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_GetUser_AllParameters_Convenience_Async()
        {
            BasicClient client = new BasicClient();

            Response<User> response = await client.GetUserAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_Delete_ShortVersion()
        {
            BasicClient client = new BasicClient();

            Response response = client.Delete(1234);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_Delete_ShortVersion_Async()
        {
            BasicClient client = new BasicClient();

            Response response = await client.DeleteAsync(1234);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_Delete_AllParameters()
        {
            BasicClient client = new BasicClient();

            Response response = client.Delete(1234);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_Delete_AllParameters_Async()
        {
            BasicClient client = new BasicClient();

            Response response = await client.DeleteAsync(1234);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Basic_Export_ShortVersion()
        {
            BasicClient client = new BasicClient();

            Response response = client.Export(1234, "<format>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Basic_Export_ShortVersion_Async()
        {
            BasicClient client = new BasicClient();

            Response response = await client.ExportAsync(1234, "<format>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Basic_Export_ShortVersion_Convenience()
        {
            BasicClient client = new BasicClient();

            Response<User> response = client.Export(1234, "<format>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Basic_Export_ShortVersion_Convenience_Async()
        {
            BasicClient client = new BasicClient();

            Response<User> response = await client.ExportAsync(1234, "<format>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Basic_Export_AllParameters()
        {
            BasicClient client = new BasicClient();

            Response response = client.Export(1234, "<format>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("detail").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Basic_Export_AllParameters_Async()
        {
            BasicClient client = new BasicClient();

            Response response = await client.ExportAsync(1234, "<format>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("orders")[0].GetProperty("detail").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Basic_Export_AllParameters_Convenience()
        {
            BasicClient client = new BasicClient();

            Response<User> response = client.Export(1234, "<format>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Basic_Export_AllParameters_Convenience_Async()
        {
            BasicClient client = new BasicClient();

            Response<User> response = await client.ExportAsync(1234, "<format>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_GetUsers_ShortVersion()
        {
            BasicClient client = new BasicClient();

            foreach (BinaryData item in client.GetUsers(null, null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_GetUsers_ShortVersion_Async()
        {
            BasicClient client = new BasicClient();

            await foreach (BinaryData item in client.GetUsersAsync(null, null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_GetUsers_ShortVersion_Convenience()
        {
            BasicClient client = new BasicClient();

            foreach (User item in client.GetUsers())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_GetUsers_ShortVersion_Convenience_Async()
        {
            BasicClient client = new BasicClient();

            await foreach (User item in client.GetUsersAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_GetUsers_AllParameters()
        {
            BasicClient client = new BasicClient();

            foreach (BinaryData item in client.GetUsers(1234, 1234, 1234, new string[] { "<orderby>" }, "<filter>", new string[] { "<select>" }, new string[] { "<expand>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("detail").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_GetUsers_AllParameters_Async()
        {
            BasicClient client = new BasicClient();

            await foreach (BinaryData item in client.GetUsersAsync(1234, 1234, 1234, new string[] { "<orderby>" }, "<filter>", new string[] { "<select>" }, new string[] { "<expand>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("detail").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_User_GetUsers_AllParameters_Convenience()
        {
            BasicClient client = new BasicClient();

            foreach (User item in client.GetUsers(maxCount: 1234, skip: 1234, maxpagesize: 1234, orderby: new string[] { "<orderby>" }, filter: "<filter>", select: new string[] { "<select>" }, expand: new string[] { "<expand>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_User_GetUsers_AllParameters_Convenience_Async()
        {
            BasicClient client = new BasicClient();

            await foreach (User item in client.GetUsersAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234, orderby: new string[] { "<orderby>" }, filter: "<filter>", select: new string[] { "<select>" }, expand: new string[] { "<expand>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Basic_GetWithPage_ShortVersion()
        {
            BasicClient client = new BasicClient();

            foreach (BinaryData item in client.GetWithPage(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Basic_GetWithPage_ShortVersion_Async()
        {
            BasicClient client = new BasicClient();

            await foreach (BinaryData item in client.GetWithPageAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Basic_GetWithPage_ShortVersion_Convenience()
        {
            BasicClient client = new BasicClient();

            foreach (User item in client.GetWithPage())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Basic_GetWithPage_ShortVersion_Convenience_Async()
        {
            BasicClient client = new BasicClient();

            await foreach (User item in client.GetWithPageAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Basic_GetWithPage_AllParameters()
        {
            BasicClient client = new BasicClient();

            foreach (BinaryData item in client.GetWithPage(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("detail").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Basic_GetWithPage_AllParameters_Async()
        {
            BasicClient client = new BasicClient();

            await foreach (BinaryData item in client.GetWithPageAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("detail").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Basic_GetWithPage_AllParameters_Convenience()
        {
            BasicClient client = new BasicClient();

            foreach (User item in client.GetWithPage())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Basic_GetWithPage_AllParameters_Convenience_Async()
        {
            BasicClient client = new BasicClient();

            await foreach (User item in client.GetWithPageAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Basic_GetWithParameters_ShortVersion()
        {
            BasicClient client = new BasicClient();

            using RequestContent content = RequestContent.Create(new
            {
                inputName = "<inputName>",
            });
            foreach (BinaryData item in client.GetWithParameters(content))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Basic_GetWithParameters_ShortVersion_Async()
        {
            BasicClient client = new BasicClient();

            using RequestContent content = RequestContent.Create(new
            {
                inputName = "<inputName>",
            });
            await foreach (BinaryData item in client.GetWithParametersAsync(content))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Basic_GetWithParameters_ShortVersion_Convenience()
        {
            BasicClient client = new BasicClient();

            ListItemInputBody bodyInput = new ListItemInputBody("<inputName>");
            foreach (User item in client.GetWithParameters(bodyInput))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Basic_GetWithParameters_ShortVersion_Convenience_Async()
        {
            BasicClient client = new BasicClient();

            ListItemInputBody bodyInput = new ListItemInputBody("<inputName>");
            await foreach (User item in client.GetWithParametersAsync(bodyInput))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Basic_GetWithParameters_AllParameters()
        {
            BasicClient client = new BasicClient();

            using RequestContent content = RequestContent.Create(new
            {
                inputName = "<inputName>",
            });
            foreach (BinaryData item in client.GetWithParameters(content, another: "First"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("detail").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Basic_GetWithParameters_AllParameters_Async()
        {
            BasicClient client = new BasicClient();

            using RequestContent content = RequestContent.Create(new
            {
                inputName = "<inputName>",
            });
            await foreach (BinaryData item in client.GetWithParametersAsync(content, another: "First"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("detail").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Basic_GetWithParameters_AllParameters_Convenience()
        {
            BasicClient client = new BasicClient();

            ListItemInputBody bodyInput = new ListItemInputBody("<inputName>");
            foreach (User item in client.GetWithParameters(bodyInput, another: ListItemInputExtensibleEnum.First))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Basic_GetWithParameters_AllParameters_Convenience_Async()
        {
            BasicClient client = new BasicClient();

            ListItemInputBody bodyInput = new ListItemInputBody("<inputName>");
            await foreach (User item in client.GetWithParametersAsync(bodyInput, another: ListItemInputExtensibleEnum.First))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Basic_GetWithCustomPageModel_ShortVersion()
        {
            BasicClient client = new BasicClient();

            foreach (BinaryData item in client.GetWithCustomPageModel(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Basic_GetWithCustomPageModel_ShortVersion_Async()
        {
            BasicClient client = new BasicClient();

            await foreach (BinaryData item in client.GetWithCustomPageModelAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Basic_GetWithCustomPageModel_ShortVersion_Convenience()
        {
            BasicClient client = new BasicClient();

            foreach (User item in client.GetWithCustomPageModel())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Basic_GetWithCustomPageModel_ShortVersion_Convenience_Async()
        {
            BasicClient client = new BasicClient();

            await foreach (User item in client.GetWithCustomPageModelAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Basic_GetWithCustomPageModel_AllParameters()
        {
            BasicClient client = new BasicClient();

            foreach (BinaryData item in client.GetWithCustomPageModel(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("detail").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Basic_GetWithCustomPageModel_AllParameters_Async()
        {
            BasicClient client = new BasicClient();

            await foreach (BinaryData item in client.GetWithCustomPageModelAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("orders")[0].GetProperty("detail").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Basic_GetWithCustomPageModel_AllParameters_Convenience()
        {
            BasicClient client = new BasicClient();

            foreach (User item in client.GetWithCustomPageModel())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Basic_GetWithCustomPageModel_AllParameters_Convenience_Async()
        {
            BasicClient client = new BasicClient();

            await foreach (User item in client.GetWithCustomPageModelAsync())
            {
            }
        }
    }
}
