// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.Linq;
using AutoRest.CSharp.Common.Input;
using AutoRest.CSharp.Common.Output.Builders;
using AutoRest.CSharp.Input;
using AutoRest.CSharp.Input.Source;
using AutoRest.CSharp.Output.Models.Requests;
using AutoRest.CSharp.Output.Models.Shared;
using AutoRest.CSharp.Output.Models.Types;
using AutoRest.CSharp.Utilities;

namespace AutoRest.CSharp.Output.Models
{
    internal abstract class RestClient : TypeProvider
    {
        private readonly CachedDictionary<InputOperation, RestClientMethod> _requestMethods;
        private readonly CachedDictionary<InputOperation, RestClientMethod> _nextPageRequestMethods;
        private RestClientMethod[]? _allMethods;
        private ConstructorSignature? _constructor;

        internal InputClient InputClient { get; }
        public IReadOnlyList<Parameter> Parameters { get; }
        public RestClientMethod[] Methods => _allMethods ??= BuildAllMethods().ToArray();
        public ConstructorSignature Constructor => _constructor ??= new ConstructorSignature(Type, $"Initializes a new instance of {Declaration.Name}", null, MethodSignatureModifiers.Public, Parameters.ToArray());

        protected override string DefaultName { get; }
        protected override string DefaultAccessibility => "internal";

        protected RestClient(InputClient inputClient, string restClientName, IReadOnlyList<Parameter> parameters, SourceInputModel? sourceInputModel) : base(Configuration.Namespace, sourceInputModel)
        {
            InputClient = inputClient;

            _requestMethods = new CachedDictionary<InputOperation, RestClientMethod>(EnsureNormalMethods);
            _nextPageRequestMethods = new CachedDictionary<InputOperation, RestClientMethod>(EnsureGetNextPageMethods);

            Parameters = parameters;
            DefaultName = restClientName;
        }

        private IEnumerable<RestClientMethod> BuildAllMethods()
        {
            foreach (var operation in InputClient.Operations)
            {
                yield return GetOperationMethod(operation);
            }

            foreach (var operation in InputClient.Operations)
            {
                // remove duplicates when GetNextPage method is not autogenerated
                if (GetNextOperationMethod(operation) is { } nextOperationMethod && operation.Paging?.NextLinkOperation == null)
                {
                    yield return nextOperationMethod;
                }
            }
        }

        protected abstract Dictionary<InputOperation, RestClientMethod> EnsureNormalMethods();

        protected Dictionary<InputOperation, RestClientMethod> EnsureGetNextPageMethods()
        {
            var nextPageMethods = new Dictionary<InputOperation, RestClientMethod>();
            foreach (var operation in InputClient.Operations)
            {
                var paging = operation.Paging;
                if (paging == null)
                {
                    continue;
                }

                RestClientMethod? nextMethod = null;
                if (paging.NextLinkOperation != null)
                {
                    nextMethod = GetOperationMethod(paging.NextLinkOperation);
                }
                else if (paging.NextLinkName != null)
                {
                    var method = GetOperationMethod(operation);
                    nextMethod = RestClientBuilder.BuildNextPageMethod(method);
                }

                if (nextMethod != null)
                {
                    nextPageMethods.Add(operation, nextMethod);
                }
            }

            return nextPageMethods;
        }

        public RestClientMethod? GetNextOperationMethod(InputOperation request)
        {
            _nextPageRequestMethods.TryGetValue(request, out RestClientMethod? value);
            return value;
        }

        public RestClientMethod GetOperationMethod(InputOperation request)
            => _requestMethods[request];
    }
}
