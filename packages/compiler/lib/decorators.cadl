import "../dist/lib/decorators.js";

using Cadl.Reflection;

namespace Cadl;

extern dec summary(target: unknown, summary: string);
extern dec doc(target: unknown, doc: string, formatArgs?: object);
extern dec deprecated(target: unknown, message: string);

model ServiceOptions {
  title?: string;
  version?: string;
}
extern dec service(target: unknown, options?: ServiceOptions);

extern dec error(target: object);

// TODO replace unknown with `string` when @intrinsic is gone https://github.com/microsoft/cadl/issues/1192
extern dec format(target: unknown | ModelProperty, format: string);
extern dec pattern(target: unknown | ModelProperty, pattern: string);

extern dec minLength(target: unknown | ModelProperty, value: integer);
extern dec maxLength(target: unknown | ModelProperty, value: integer);

extern dec minItems(target: unknown[] | ModelProperty, value: integer);
extern dec maxItems(target: unknown[] | ModelProperty, value: integer);

extern dec minValue(target: unknown | ModelProperty, value: numeric);
extern dec maxValue(target: unknown | ModelProperty, value: numeric);

extern dec secret(target: unknown | ModelProperty);
extern dec tag(target: Namespace | Interface | Operation, tag: string);
extern dec friendlyName(target: unknown, name: string, formatArgs?: unknown);
extern dec knownValues(target: unknown | ModelProperty, values: Enum);
extern dec key(target: ModelProperty, altName?: string);
extern dec overload(target: Operation, overloadbase: Operation);
extern dec projectedName(target: unknown, targetName: string, projectedName: string);
extern dec discriminator(target: object | Union, propertyName: string);

extern dec visibility(target: ModelProperty, ...visibilities: string[]);
extern dec withVisibility(target: object, ...visibilities: string[]);
extern dec withDefaultKeyVisibility(target: object, visibility: unknown);
extern dec withUpdateableProperties(target: object);
extern dec withoutDefaultValues(target: object);
extern dec withoutOmittedProperties(target: object, omit: string | Union);

//---------------------------------------------------------------------------
// Debugging
//---------------------------------------------------------------------------
extern dec inspectType(target: unknown, text: string);
extern dec inspectTypeName(target: unknown, text: string);
