import "../dist/lib/decorators.js";

using Cadl.Reflection;

namespace Cadl;

extern dec summary(target: Type, summary: StringLiteral);
extern dec doc(target: Type, doc: StringLiteral, formatArgs?: Model);
extern dec deprecated(target: Type, message: StringLiteral);

extern dec error(target: Model);

extern dec format(target: Model | ModelProperty, format: StringLiteral);
extern dec pattern(target: Model | ModelProperty, pattern: StringLiteral);

extern dec minLength(target: Model | ModelProperty, value: NumericLiteral);
extern dec maxLength(target: Model | ModelProperty, value: NumericLiteral);

extern dec minItems(target: unknown[] | ModelProperty, value: NumericLiteral);
extern dec maxItems(target: unknown[] | ModelProperty, value: NumericLiteral);

extern dec minValue(target: Model | ModelProperty, value: NumericLiteral);
extern dec maxValue(target: Model | ModelProperty, value: NumericLiteral);

extern dec secret(target: Model | ModelProperty);
extern dec tag(target: Namespace | Interface | Operation, tag: StringLiteral);
extern dec friendlyName(target: Type, name: StringLiteral, formatArgs?: Type);
extern dec knownValues(target: Model | ModelProperty, values: Enum);
extern dec key(target: ModelProperty, altName?: StringLiteral);
extern dec overload(target: Operation, overloadbase: Operation);
extern dec projectedName(target: Type, targetName: StringLiteral, projectedName: StringLiteral);
extern dec discriminator(target: Model | Union, propertyName: StringLiteral);

extern dec visibility(target: ModelProperty, ...visibilities: StringLiteral[]);
extern dec withVisibility(target: Model, ...visibilities: StringLiteral[]);
extern dec withDefaultKeyVisibility(target: Model, visibility: unknown);
extern dec withUpdateableProperties(target: Model);
extern dec withoutDefaultValues(target: Model);
extern dec withoutOmittedProperties(target: Model, omit: StringLiteral | Union);

//---------------------------------------------------------------------------
// Debugging
//---------------------------------------------------------------------------
extern dec inspectType(target: Type, text: StringLiteral);
extern dec inspectTypeName(target: Type, text: StringLiteral);
