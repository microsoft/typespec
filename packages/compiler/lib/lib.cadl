namespace Cadl;

scalar bytes;
scalar numeric;
scalar integer extends numeric;
scalar float extends numeric;
scalar int64 extends integer;
scalar int32 extends int64;
scalar int16 extends int32;
scalar int8 extends int16;
scalar uint64 extends integer;
scalar uint32 extends uint64;
scalar uint16 extends uint32;
scalar uint8 extends uint16;
scalar safeint extends int64;
scalar float64 extends float;
scalar float32 extends float64;
scalar string;
scalar plainDate;
scalar plainTime;
scalar zonedDateTime;
scalar duration;
scalar boolean;

model object {}

@indexer(integer, T)
model Array<T> {}

@indexer(string, T)
model Record<T> {}

/**
 * Represent a URI string.
 */
@format("uri")
scalar uri extends string;

@deprecated("Map is deprecated, use Record<T> instead")
model Map<K, V> is Record<V>;

@doc("The template for adding optional properties.")
@withOptionalProperties
model OptionalProperties<T> {
  ...T;
}

@doc("The template for adding updateable properties.")
@withUpdateableProperties
model UpdateableProperties<T> {
  ...T;
}

@doc("The template for omitting properties.")
@withoutOmittedProperties(TKeys)
model OmitProperties<T, TKeys extends string> {
  ...T;
}

@withoutDefaultValues
model OmitDefaults<T> {
  ...T;
}

@doc("The template for setting the default visibility of key properties.")
@withDefaultKeyVisibility(Visibility)
model DefaultKeyVisibility<T, Visibility extends string> {
  ...T;
}
