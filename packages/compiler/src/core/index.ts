export { MANIFEST, typespecVersion, type TypeSpecManifest } from "../manifest.js";
export {
  resolveModule,
  type ResolveModuleHost,
  type ResolveModuleOptions,
} from "../module-resolver/module-resolver.js";
export {
  Checker,
  CreateTypeProps,
  TypeSpecCompletionItem,
  createChecker,
  filterModelProperties,
  finishTypeForProgram,
  getEffectiveModelType,
  getOverriddenProperty,
  walkPropertiesInherited,
} from "./checker.js";
export {
  getPropertyType,
  isIntrinsicType,
  isTypeSpecValueTypeOf,
  typespecTypeToJson,
  validateDecoratorNotOnType,
  validateDecoratorParamCount,
  validateDecoratorTarget,
  validateDecoratorUniqueOnNode,
  type DecoratorDefinition,
  type DecoratorParamDefinition,
  type DecoratorValidator,
  type InferredTypeSpecValue,
  type TypeKind,
  type TypeSpecValue,
} from "./decorator-utils.js";
export {
  getDeprecationDetails,
  isDeprecated,
  markDeprecated,
  type DeprecationDetails,
} from "./deprecation.js";
export {
  assertType,
  compilerAssert,
  createDiagnosticCollector,
  defineCodeFix,
  formatDiagnostic,
  getSourceLocation,
  ignoreDiagnostics,
  logDiagnostics,
  logVerboseTestOutput,
  reportDeprecated,
  type DiagnosticCollector,
  type DiagnosticHandler,
  type ProjectionError,
  type SourceLocationOptions,
  type WriteLine,
} from "./diagnostics.js";
export { emitFile, type EmitFileOptions, type NewLine } from "./emitter-utils.js";
export { checkFormatTypeSpec, formatTypeSpec } from "./formatter.js";
export {
  DiscriminatedUnion,
  DiscriminatedUnionLegacy,
  TypeNameOptions,
  explainStringTemplateNotSerializable,
  printIdentifier as formatIdentifier,
  getDiscriminatedUnion,
  getEntityName,
  getLocationContext,
  getNamespaceFullName,
  getTypeName,
  interpolatePath,
  isStdNamespace,
  listOperationsIn,
  printIdentifier,
  resolveUsages,
  type ListOperationOptions,
  type OperationContainer,
  type TrackableType,
  type UsageFlags,
  type UsageTracker,
} from "./helpers/index.js";
export {
  getDiscriminatedTypes,
  getDiscriminator,
  getDocData,
  getMaxItems,
  getMaxItemsAsNumeric,
  getMaxLength,
  getMaxLengthAsNumeric,
  getMaxValue,
  getMaxValueAsNumeric,
  getMaxValueExclusive,
  getMaxValueExclusiveAsNumeric,
  getMinItems,
  getMinItemsAsNumeric,
  getMinLength,
  getMinLengthAsNumeric,
  getMinValue,
  getMinValueAsNumeric,
  getMinValueExclusive,
  getMinValueExclusiveAsNumeric,
  type Discriminator,
} from "./intrinsic-type-state.js";
export {
  createLinterRule as createRule,
  createTypeSpecLibrary,
  defineLinter,
  definePackageFlags,
  paramMessage,
  setTypeSpecNamespace,
} from "./library.js";
export { resolveLinterDefinition } from "./linter.js";
export { NodeHost } from "./node-host.js";
export { Numeric, isNumeric } from "./numeric.js";
export type { CompilerOptions } from "./options.js";
export { getPositionBeforeTrivia } from "./parser-utils.js";

export {
  exprIsBareIdentifier,
  getFirstAncestor,
  getIdentifierContext,
  getNodeAtPosition,
  getNodeAtPositionDetail,
  hasParseError,
  isImportStatement,
  parse,
  parseStandaloneTypeReference,
  positionInRange,
  visitChildren,
  type NodeCallback,
} from "./parser.js";

export {
  altDirectorySeparator,
  directorySeparator,
  ensureTrailingDirectorySeparator,
  getAnyExtensionFromPath,
  getBaseFileName,
  getDirectoryPath,
  getNormalizedAbsolutePath,
  getNormalizedAbsolutePathWithoutRoot,
  getNormalizedPathComponents,
  getPathComponents,
  getPathFromPathComponents,
  getRelativePathFromDirectory,
  getRootLength,
  hasTrailingDirectorySeparator,
  isAnyDirectorySeparator,
  isPathAbsolute,
  isUrl,
  joinPaths,
  normalizePath,
  normalizeSlashes,
  reducePathComponents,
  removeTrailingDirectorySeparator,
  resolvePath,
} from "./path-utils.js";
export { compile, projectProgram, type Program, type ProjectedProgram } from "./program.js";
export { isProjectedProgram } from "./projected-program.js";
export {
  Token,
  TokenFlags,
  createScanner,
  isComment,
  isKeyword,
  isModifier,
  isPunctuation,
  isStatementKeyword,
  isTrivia,
  skipContinuousIdentifier,
  skipTrivia,
  skipTriviaBackward,
  skipWhiteSpace,
  type DocToken,
  type Scanner,
  type StringTemplateToken,
} from "./scanner.js";
export {
  getProperty,
  mapEventEmitterToNodeListener,
  navigateProgram,
  navigateType,
  navigateTypesInNamespace,
  scopeNavigationToNamespace,
  type EventEmitter,
  type NamespaceNavigationOptions,
  type NavigationOptions,
} from "./semantic-walker.js";
export { createSourceFile, getSourceFileKindFromExt } from "./source-file.js";
export {
  getFullyQualifiedSymbolName,
  getParentTemplateNode,
  isArrayModelType,
  isDeclaredInNamespace,
  isDeclaredType,
  isErrorType,
  isGlobalNamespace,
  isNeverType,
  isNullType,
  isRecordModelType,
  isTemplateDeclaration,
  isTemplateDeclarationOrInstance,
  isTemplateInstance,
  isType,
  isUnknownType,
  isValue,
  isVoidType,
} from "./type-utils.js";
export {
  ListenerFlow,
  NoTarget,
  NodeFlags,
  ResolutionResultFlags,
  SymbolFlags,
  SyntaxKind,
} from "./types.js";
export type {
  AliasStatementNode,
  AnyKeywordNode,
  ArrayExpressionNode,
  ArrayLiteralNode,
  ArrayModelType,
  ArrayValue,
  AugmentDecoratorStatementNode,
  BaseNode,
  BaseType,
  BlockComment,
  BooleanLiteral,
  BooleanLiteralNode,
  BooleanValue,
  CallExpressionNode,
  CallableMessage,
  CodeFix,
  CodeFixContext,
  CodeFixEdit,
  Comment,
  CompilerHost,
  CompilerLocationContext,
  ConstStatementNode,
  Declaration,
  DeclarationNode,
  DecoratedType,
  Decorator,
  DecoratorApplication,
  DecoratorArgument,
  DecoratorArgumentValue,
  DecoratorContext,
  DecoratorDeclarationStatementNode,
  DecoratorExpressionNode,
  DecoratorFunction,
  DecoratorImplementations,
  DeprecatedDirective,
  Diagnostic,
  DiagnosticCreator,
  DiagnosticDefinition,
  DiagnosticFormat,
  DiagnosticMap,
  DiagnosticMessages,
  DiagnosticReport,
  DiagnosticReportWithoutTarget,
  DiagnosticResult,
  DiagnosticSeverity,
  DiagnosticTarget,
  Directive,
  DirectiveArgument,
  DirectiveBase,
  DirectiveExpressionNode,
  Dirent,
  DocContent,
  DocErrorsTagNode,
  DocNode,
  DocParamTagNode,
  DocPropTagNode,
  DocReturnsTagNode,
  DocTag,
  DocTagBaseNode,
  DocTemplateTagNode,
  DocTextNode,
  DocUnknownTagNode,
  EmitContext,
  EmitOptionsFor,
  EmitterFunc,
  EmptyStatementNode,
  Entity,
  Enum,
  EnumMember,
  EnumMemberNode,
  EnumSpreadMemberNode,
  EnumStatementNode,
  EnumValue,
  ErrorType,
  Expression,
  ExternKeywordNode,
  FileLibraryMetadata,
  FilePos,
  FunctionDeclarationStatementNode,
  FunctionParameter,
  FunctionParameterBase,
  FunctionParameterNode,
  FunctionType,
  IdentifierContext,
  IdentifierKind,
  IdentifierNode,
  ImportStatementNode,
  IndeterminateEntity,
  InsertTextCodeFixEdit,
  Interface,
  InterfaceStatementNode,
  IntersectionExpressionNode,
  IntrinsicScalarName,
  IntrinsicType,
  InvalidStatementNode,
  JSONSchemaType,
  JsNamespaceDeclarationNode,
  JsSourceFileNode,
  LibraryInstance,
  LibraryLocationContext,
  LibraryMetadata,
  LineAndCharacter,
  LineComment,
  LinterDefinition,
  LinterResolvedDefinition,
  LinterRule,
  LinterRuleContext,
  LinterRuleDefinition,
  LinterRuleDiagnosticFormat,
  LinterRuleDiagnosticReport,
  LinterRuleDiagnosticReportWithoutTarget,
  LinterRuleSet,
  LiteralNode,
  LiteralType,
  LocationContext,
  LogInfo,
  LogLevel,
  LogSink,
  Logger,
  MarshalledValue,
  MemberContainerNode,
  MemberContainerType,
  MemberExpressionNode,
  MemberNode,
  MemberType,
  MetaMemberKey,
  MetaMembersTable,
  MixedFunctionParameter,
  MixedParameterConstraint,
  Model,
  ModelExpressionNode,
  ModelIndexer,
  ModelProperty,
  ModelPropertyNode,
  ModelSpreadPropertyNode,
  ModelStatementNode,
  Modifier,
  ModifierFlags,
  ModuleLibraryMetadata,
  MutableSymbolTable,
  Namespace,
  NamespaceStatementNode,
  NeverIndexer,
  NeverKeywordNode,
  NeverType,
  Node,
  NodeLinks,
  NullType,
  NullValue,
  NumericLiteral,
  NumericLiteralNode,
  NumericValue,
  ObjectLiteralNode,
  ObjectLiteralPropertyNode,
  ObjectLiteralSpreadPropertyNode,
  ObjectType,
  ObjectValue,
  ObjectValuePropertyDescriptor,
  Operation,
  OperationSignature,
  OperationSignatureDeclarationNode,
  OperationSignatureReferenceNode,
  OperationStatementNode,
  PackageFlags,
  ParseOptions,
  PositionDetail,
  ProcessedLog,
  ProjectLocationContext,
  Projection,
  ProjectionApplication,
  ProjectionArithmeticExpressionNode,
  ProjectionBlockExpressionNode,
  ProjectionCallExpressionNode,
  ProjectionDecoratorReferenceExpressionNode,
  ProjectionEnumMemberSelectorNode,
  ProjectionEnumSelectorNode,
  ProjectionEqualityExpressionNode,
  ProjectionExpression,
  ProjectionExpressionStatementNode,
  ProjectionIfExpressionNode,
  ProjectionInterfaceSelectorNode,
  ProjectionLambdaExpressionNode,
  ProjectionLambdaParameterDeclarationNode,
  ProjectionLogicalExpressionNode,
  ProjectionMemberExpressionNode,
  ProjectionModelExpressionNode,
  ProjectionModelPropertyNode,
  ProjectionModelPropertySelectorNode,
  ProjectionModelSelectorNode,
  ProjectionModelSpreadPropertyNode,
  ProjectionNode,
  ProjectionOperationSelectorNode,
  ProjectionParameterDeclarationNode,
  ProjectionReferenceNode,
  ProjectionRelationalExpressionNode,
  ProjectionScalarSelectorNode,
  ProjectionStatementItem,
  ProjectionStatementNode,
  ProjectionTupleExpressionNode,
  ProjectionUnaryExpressionNode,
  ProjectionUnionSelectorNode,
  ProjectionUnionVariantSelectorNode,
  Projector,
  RecordModelType,
  ReferenceExpression,
  RekeyableMap,
  ReplaceTextCodeFixEdit,
  ResolutionResult,
  ReturnExpressionNode,
  ReturnRecord,
  RmOptions,
  RuleRef,
  Scalar,
  ScalarConstructor,
  ScalarConstructorNode,
  ScalarStatementNode,
  ScalarValue,
  ScopeNode,
  SemanticNodeListener,
  SignatureFunctionParameter,
  SourceFile,
  SourceFileKind,
  SourceLocation,
  SourceModel,
  StateDef,
  Statement,
  StdTypeName,
  StdTypes,
  StringLiteral,
  StringLiteralNode,
  StringTemplate,
  StringTemplateExpressionNode,
  StringTemplateHeadNode,
  StringTemplateLiteralLikeNode,
  StringTemplateMiddleNode,
  StringTemplateSpan,
  StringTemplateSpanLiteral,
  StringTemplateSpanNode,
  StringTemplateSpanValue,
  StringTemplateTailNode,
  StringValue,
  SuppressDirective,
  Sym,
  SymbolLinks,
  SymbolTable,
  SyntheticLocationContext,
  TemplateArgumentNode,
  TemplateDeclarationNode,
  TemplateInstanceTarget,
  TemplateParameter,
  TemplateParameterDeclarationNode,
  TemplateableNode,
  TemplatedType,
  TemplatedTypeBase,
  TextRange,
  Tracer,
  TracerOptions,
  Tuple,
  TupleExpressionNode,
  Type,
  TypeInstantiationMap,
  TypeListeners,
  TypeMapper,
  TypeOfDiagnostics,
  TypeOfExpressionNode,
  TypeOrReturnRecord,
  TypeReferenceNode,
  TypeSpecDiagnosticTarget,
  TypeSpecLibrary,
  TypeSpecLibraryDef,
  TypeSpecScriptNode,
  Union,
  UnionExpressionNode,
  UnionStatementNode,
  UnionVariant,
  UnionVariantNode,
  UnknownType,
  UsingStatementNode,
  Value,
  ValueOfExpressionNode,
  VoidKeywordNode,
  VoidType,
} from "./types.js";
export {
  VisibilityFilter,
  addVisibilityModifiers,
  clearVisibilityModifiersForClass,
  getLifecycleVisibilityEnum,
  getVisibilityForClass,
  hasVisibility,
  isSealed,
  isVisible,
  removeVisibilityModifiers,
  resetVisibilityModifiersForClass,
  sealVisibilityModifiers,
  sealVisibilityModifiersForProgram,
} from "./visibility/index.js";
