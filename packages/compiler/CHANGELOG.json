{
  "name": "@typespec/compiler",
  "entries": [
    {
      "version": "0.49.0",
      "tag": "@typespec/compiler_v0.49.0",
      "date": "Wed, 11 Oct 2023 23:31:35 GMT",
      "comments": {
        "none": [
          {
            "comment": "Handle hyphen in @param doc comment"
          },
          {
            "comment": "The `never` type is now assignable to all types"
          },
          {
            "comment": "Allow nullable types for constraint decorators(min/max value, length, etc)"
          },
          {
            "comment": "Add support for `@returns` and `@errors` doc comment tags. `@returns`(or `@returnsDoc` decorator) can be used to describe the success return types of an operation. `@errors`(or `@errorsDoc` decorator) can be used to describe the error return types of an operation."
          },
          {
            "comment": "Fix: Colorization of line comment was bleeding over to the next line(s)."
          },
          {
            "comment": "Fix crash when using parenthesis on directives"
          },
          {
            "comment": "Fix: Assigning negative and 0 to float64"
          },
          {
            "comment": "`tsp format` now returns a non-zero exit code when it fails to format a file"
          },
          {
            "comment": "Fix: Anonymous union variants were formatted with an extra leading `:`"
          },
          {
            "comment": "Formatter: Unions and Enums members are now formatted following the same rules as model properties. An extra line will be added between members if the member is annotated with a decorator, directive or doc comment."
          },
          {
            "comment": "Fix: Correct formatting of comments between a directive or doc and its node"
          },
          {
            "comment": "Fix: `tsp init` was not creating the `tspconfig.yaml` file for templates that specified it"
          },
          {
            "comment": "Fix: `tsp init` will create a placeholder `tspconfig.yaml` file for templates that don't specify an explicit one."
          },
          {
            "comment": "Fix `tsp init` was ignoring the `files` specified in an init template"
          },
          {
            "comment": "Fix: Language Server wasn't loading the `tspconfig.yaml` correctly resulting in some options being dropped like the linter configuration."
          },
          {
            "comment": "Fix: Allow `null` to be assigned as a default value"
          },
          {
            "comment": "Fix: Using `TypeSpec.Xyz` namespace shouldn't require the `TypeSpec Prefix`"
          },
          {
            "comment": "Skip emit of `deprecated` diagnostic for a type reference that is used in a deprecated declaration statement"
          },
          {
            "comment": "Update dependencies"
          },
          {
            "comment": "Remove `decorators` export, import decorators individually"
          }
        ],
        "dependency": [
          {
            "comment": "Updating dependency \"tmlanguage-generator\" from `~0.4.4` to `~0.4.5`"
          }
        ]
      }
    },
    {
      "version": "0.48.1",
      "tag": "@typespec/compiler_v0.48.1",
      "date": "Tue, 19 Sep 2023 19:28:32 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Fix emitter framework issue causing reference context to be lost in certain cases."
          }
        ],
        "none": [
          {
            "comment": "Add typesVersions metadata for the emitter framework to package.json"
          }
        ]
      }
    },
    {
      "version": "0.48.0",
      "tag": "@typespec/compiler_v0.48.0",
      "date": "Tue, 12 Sep 2023 21:47:11 GMT",
      "comments": {
        "none": [
          {
            "comment": "**Breaking Change** A semicolon is now required after augment decorator  statements."
          },
          {
            "comment": "Added decorators `@parameterVisibility` and `@returnTypeVisibility`. Added methods `getParameterVisibility` and `getReturnTypeVisibility`. "
          },
          {
            "comment": "Fix issue where --config would search the folder hierarchy looking for `tspconfig.yaml`."
          },
          {
            "comment": "**Deprecation** `@deprecated` decorator has been marked as deprecated. Use `#deprecated` directive instead."
          },
          {
            "comment": "**IDE** Add coloring for doc comment"
          },
          {
            "comment": "Changed yaml parser from `js-yaml` to `yaml`"
          },
          {
            "comment": "Parsing and validation of the tspconfig.yaml will not report the error location."
          },
          {
            "comment": "**Fix** Stackoverflow when model property reference itself"
          },
          {
            "comment": "**Fix** Compiler crash when using alias of namespace that has decorators"
          },
          {
            "comment": "Fix: Compiler freeze when using invalid token between doc comment and type"
          },
          {
            "comment": "**Added** validation making sure properties of model are compatible with a base model indexer (using `extends`)"
          },
          {
            "comment": "Fix: Crash with when relating recursive types"
          },
          {
            "comment": "Fix typo in 'format' error message"
          },
          {
            "comment": "Expose `CompilerOptions` TypeScript type"
          },
          {
            "comment": "Report library information when crash happen in $onValidate"
          },
          {
            "comment": "Diagnostics reported on nodes with an `id` will see the diagnostic highlight the id instead of the whole node. For example it will show the error on the model name instead of highlighting the entire model."
          }
        ],
        "dependency": [
          {
            "comment": "Updating dependency \"tmlanguage-generator\" from `~0.4.3` to `~0.4.4`"
          }
        ]
      }
    },
    {
      "version": "0.47.1",
      "tag": "@typespec/compiler_v0.47.1",
      "date": "Thu, 10 Aug 2023 20:18:00 GMT",
      "comments": {
        "patch": [
          {
            "comment": "**Fix**: `--config` flag was being ignored."
          }
        ]
      }
    },
    {
      "version": "0.47.0",
      "tag": "@typespec/compiler_v0.47.0",
      "date": "Tue, 08 Aug 2023 22:32:10 GMT",
      "comments": {
        "none": [
          {
            "comment": "Allow omitting variant names in union declarations"
          },
          {
            "comment": "Internal: Refactoring of cli code"
          },
          {
            "comment": "Other cli commands reuse the diagnostic system to report errors"
          },
          {
            "comment": "Add `#deprecated` directive to replace `@deprecated` decorator"
          },
          {
            "comment": "Add `--ignore-deprecated` CLI argument to suppress all `deprecated` diagnostics"
          },
          {
            "comment": "**Breaking change** Emitter Framework: `sourceFile` method can return a `Promise`. This allows running async processes when generating the file content, a formatter for example. This result in a potential breaking change if calling `emitSourceFile` where you'll have to add `await` before."
          },
          {
            "comment": "Add a new util `resolveCompilerOptions` to resolve compiler options from a given entrypoint. This will resolve the options from the tspconfig.yaml in the same way the cli would."
          },
          {
            "comment": "Fix: Compiler version mismatch error would fire incorrectly"
          },
          {
            "comment": "Fix crash when `using` non-namespace"
          },
          {
            "comment": "Fix some issues with not reporting deprecation on template constraints"
          },
          {
            "comment": "Emit diagnostic for an unresolved metatype property reference"
          },
          {
            "comment": "**Fix** issue where using augment decorators on spread model properties, enum members or operations extended from parent interface wouldn't do anything."
          },
          {
            "comment": "**Fix** issue where using augment decorator on operation parameters applied to source operation parameter as well."
          },
          {
            "comment": "Fix: TypeEmitter missing interfaces methods causing crash"
          },
          {
            "comment": "**Fix** `warn-as-error` in `tspconfig.yaml` was ignored"
          },
          {
            "comment": "Improve compiler watch mode. Files loaded in previous compilation will be watched for changes."
          },
          {
            "comment": "**Breaking change** `formatTypeSpec` is now async. Formatter was updated to use prettier 3.0."
          },
          {
            "comment": "Allow library dependency versions to be specified in init templates using the form `{ name: \"the-lib\", version: \"1.0.0\" }`"
          },
          {
            "comment": "Update init template version compare to be greaterThanAndEqual instead of greaterThan."
          }
        ],
        "dependency": [
          {
            "comment": "Updating dependency \"tmlanguage-generator\" from `~0.4.2` to `~0.4.3`"
          }
        ]
      }
    },
    {
      "version": "0.46.0",
      "tag": "@typespec/compiler_v0.46.0",
      "date": "Tue, 11 Jul 2023 22:06:00 GMT",
      "comments": {
        "none": [
          {
            "comment": "Fix signature help after comment with no closing parenthesis or angle bracket"
          },
          {
            "comment": "Internal: Reorganize sources inside `src/` folder"
          },
          {
            "comment": "Fix: Doc comment `/** */` should override base type doc in `model is` or `op is`"
          },
          {
            "comment": "Emitter Framework: add support for emitting enum member references."
          },
          {
            "comment": "**Feature** New built-in linter system. Typespec libraries are able to define linting rules which can be configured in `tspconfig.yaml`. See documentation for configuring a [linter](https://microsoft.github.io/typespec/introduction/configuration#linter---configuring-linters) and [writing a linter](https://microsoft.github.io/typespec/extending-typespec/linters)"
          },
          {
            "comment": "**Breaking** Minimum version of TypeScript updated to 5.0. TypeSpec is using new features available in TypeScript 5.0 which result in a definition file not parsable by older version. Note that this only affect compiling TypeScript code and is not breaking any JS or TypeSpec code. [See more information on typescript 5.0](https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/)"
          },
          {
            "comment": "Remove `mkdirp` dependencies and replace with built-in `mkdir({recursive: true})`."
          },
          {
            "comment": "Compiler keeps track of the scope where a file is declared(User project, a library or the compiler)"
          },
          {
            "comment": "Add support for `UTF-8 with bom` for other files loaded by typespec compiler. `.tsp` files already had support, this make it more available for any library/emitter using the compiler api to load a file."
          },
          {
            "comment": "Allow annotations(Decorators, directives and doc comments) to be specified in any order"
          },
          {
            "comment": "Fix: `entrypoints` folder wasn't included in package causing failure to resolve cli.js"
          },
          {
            "comment": "Fix: Formatter incorrectly formatting `::` to `.`"
          },
          {
            "comment": "Fix formatting issue with comment between decorator and scalar or interface"
          },
          {
            "comment": "Fix: Stack overflow crash when having circular reference with `op is` inside an interface. "
          },
          {
            "comment": "Fix IDE issue with squiggles in library code if the library had an entry point named something other than `main.tsp` and a library document was opened after another document that imported the library."
          },
          {
            "comment": "Fix: Referencing decorator target in argument cause stack overflow for enum and union in checker and interface and operations in projection."
          },
          {
            "comment": "**Fix** `getTypeName` include namespace prefix for unions as well"
          },
          {
            "comment": "Formatter will now format doc comment above directives and decorators. This only applies to doc comments. Regular line comments and block comments will remain where they are"
          },
          {
            "comment": "**Formatter**: Improve formatting for properties with comments and decorators. A property with a leading decorator on its own line or comment will be wrapped in blank lines."
          },
          {
            "comment": "**Breaking change** Updating tsp init template schema for future extensibility. Older tsp version will fail validation."
          },
          {
            "comment": "Emitter Framework: TypeEmitter can now implement `writeOutput` to customize how to write source files to disk."
          },
          {
            "comment": "Emitter Framework: Source Files and Declarations have a new property `meta` which can store arbitrary metadata about those entities."
          },
          {
            "comment": "Add support for new identifier characters from Unicode 15.0"
          },
          {
            "comment": "**Deprecate** `@list` decorator in favor of `@listsResource` in `@typespec/rest`"
          },
          {
            "comment": "**Deprecate** `isListOperation` function in favor of `isListOperation` in `@typespec/rest`"
          },
          {
            "comment": "**Deprecate** `getListOperationType` function"
          },
          {
            "comment": "Emitter Framework: Add new `TypeEmitter` methods for scalar instantiation."
          },
          {
            "comment": "Emitter Framework: Fix that context was set incorrectly for some `TypeEmitter` methods, and add missing context methods for model properties, enum members, and union variants."
          },
          {
            "comment": "Emitter Framework: Fix that some context methods were not being passed the expected parameters."
          },
          {
            "comment": "Emitter Framework: Breaking change: Add support for templates instantiated with types without declared names. In such cases, `TypeEmitter`'s declarationName method may return `undefined`, and so the various `*Instantiation` methods might be called with an undefined name, and `AssetEmitter`'s `emitDeclarationName` method might return undefined."
          },
          {
            "comment": "Fix: Wrong path for typescript types for main entrypoint"
          },
          {
            "comment": "Update dependencies"
          }
        ],
        "dependency": [
          {
            "comment": "Updating dependency \"tmlanguage-generator\" from `~0.4.1` to `~0.4.2`"
          }
        ]
      }
    },
    {
      "version": "0.45.2",
      "tag": "@typespec/compiler_v0.45.2",
      "date": "Thu, 15 Jun 2023 17:00:33 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Fix: Formatter crash when using comment in empty statement, after an augment decorator or in an empty file"
          }
        ]
      }
    },
    {
      "version": "0.45.1",
      "tag": "@typespec/compiler_v0.45.1",
      "date": "Wed, 14 Jun 2023 17:05:12 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Fix: Formatter moves all comments in flattened namespace to the top"
          }
        ]
      }
    },
    {
      "version": "0.45.0",
      "tag": "@typespec/compiler_v0.45.0",
      "date": "Tue, 06 Jun 2023 22:44:16 GMT",
      "comments": {
        "none": [
          {
            "comment": "Fix: `tspconfig.yaml` should always get resolved relative to the entrypoint"
          },
          {
            "comment": "Add decimal and decimal128 built-in scalar types."
          },
          {
            "comment": "**Feature** Doc comment will be applied as the doc for types unless an explicit @doc is provided."
          },
          {
            "comment": "Added new keyword `valueof` designed to request for a value type in a decorator parameter."
          },
          {
            "comment": "**BREAKING** Decorator API will not be marshalling values unless the parameter type is using `valueof`. `extern dec foo(target, value: string)` should be changed to `extern dec foo(target, value: valueof string)`."
          },
          {
            "comment": "**DEPRECATION** To make transition to valueof smoother if using a template parameter inside a decorator that is now using valueof the existing parmater constraint will still be compatible but emit a warning."
          },
          {
            "comment": "**BREAKING CHANGE** Fix: Array shouldn't be assignable to an empty model(and `object`)"
          },
          {
            "comment": "**DEPRECATION** `object` is deprecated. Alternative is to use `{}` for an empty model, `Record<unknown>` for a record with unknown property types, `unknown[]` for an array."
          },
          {
            "comment": "Mark `Array` and `Record` doc comment as for dev only"
          },
          {
            "comment": "Fix: formatting of comment between decorator and `op` statement"
          },
          {
            "comment": "Fix: Operation can self reference or circular reference other operation via decorators"
          },
          {
            "comment": "**BREAKING CHANGE** Remove `@format(\"url\") from url scalar`"
          },
          {
            "comment": "Fix `unixTimestamp` validation was incorrect"
          },
          {
            "comment": "**Fix** diagnostic validating type is intrinsic always showing `string` as expected"
          },
          {
            "comment": "Fix error message for @encode errors."
          },
          {
            "comment": "Improve error handling when tsp init template is invalid or fails to download."
          },
          {
            "comment": "Emitter framework: uppercase type argument type names when constructing a declaration name from a template instantiation."
          },
          {
            "comment": "Add signature for missing decorators"
          },
          {
            "comment": "Remove dependency on `node-fetch`"
          },
          {
            "comment": "Remove misleading output dir from compilation success message"
          },
          {
            "comment": "Fix relative path resolution when init template is behind HTTP redirect"
          },
          {
            "comment": "Emitter option validation will only validate emitters selected with `emit`/`--emit`. Options for other emitter will be ignored. This allows defining options for an emitter that is not installed."
          },
          {
            "comment": "Fix signature help with trailing space in unterminated arg list"
          },
          {
            "comment": "Add template argument signature help"
          },
          {
            "comment": "Show alias doc comments in IDE"
          }
        ],
        "dependency": [
          {
            "comment": "Updating dependency \"@typespec/internal-build-utils\" from `~0.4.1` to `~0.4.2`"
          }
        ]
      }
    },
    {
      "version": "0.44.0",
      "tag": "@typespec/compiler_v0.44.0",
      "date": "Wed, 10 May 2023 21:24:00 GMT",
      "comments": {
        "none": [
          {
            "comment": "Allow use of defaults on non-optional properties."
          },
          {
            "comment": "Cleanup deprecated use"
          },
          {
            "comment": "**Added** `@encode` decorator used to specify encoding of types"
          },
          {
            "comment": "Add `projectRoot` to program"
          },
          {
            "comment": "Api: Added `sourceModel` and `sourceOperation` on `Model` and `Operation` respectively."
          },
          {
            "comment": "Add relative file path utils, and allow emitter framework's ObjectBuilder to be initialized with a placeholder object."
          },
          {
            "comment": "Better error recovery when error thrown from emitter is not an object"
          },
          {
            "comment": "Fix compiler mismatch error recommendation"
          },
          {
            "comment": "Fix: Interface with templated operation causing crash if defined after use"
          },
          {
            "comment": "Fix: Issue with templated operations in templated interface would get cached only by keying on the operation template args."
          },
          {
            "comment": "Fix: `missing-index` diagnostic showing at the wrong location"
          },
          {
            "comment": "Fix `--emit` pointing to emitter js entrypoint resolve correct options"
          },
          {
            "comment": "Fix: `scalar` template parameter name conflict with each other"
          },
          {
            "comment": "Added a new `isFinished` property to types to differentiate template instance that are not finalized (Still have template arguments to be resolved)"
          },
          {
            "comment": "**Breaking** `isTemplateDeclaration` will only return true for the original declaration and not partially instantiated templates."
          },
          {
            "comment": "**Fix** `unsupported-default` diagnostic showing at the wrong location"
          },
          {
            "comment": "Fix `url` doc to not mention \"URI\""
          },
          {
            "comment": "Minor reorganization of standard library docs"
          },
          {
            "comment": "Language server: Allow main file to be outside workspace."
          },
          {
            "comment": "Added `Model` and `Scalar` to Reflection namespace"
          },
          {
            "comment": "Fix `@format` decorator doc."
          },
          {
            "comment": "Update dependencies"
          }
        ],
        "patch": [
          {
            "comment": "Normalizing cwd before first use in getCompilerOptions()"
          }
        ],
        "dependency": [
          {
            "comment": "Updating dependency \"@typespec/eslint-config-typespec\" from `~0.6.0` to `~0.7.0`"
          },
          {
            "comment": "Updating dependency \"@typespec/internal-build-utils\" from `~0.4.0` to `~0.4.1`"
          },
          {
            "comment": "Updating dependency \"tmlanguage-generator\" from `~0.4.0` to `~0.4.1`"
          }
        ]
      }
    },
    {
      "version": "0.43.0",
      "tag": "@typespec/compiler_v0.43.0",
      "date": "Tue, 11 Apr 2023 18:49:17 GMT",
      "comments": {
        "none": [
          {
            "comment": "Bug: Emitter framework will now visit scalar declarations"
          },
          {
            "comment": "Emit diagnostic when ambiguous symbol exists between global and usings."
          },
          {
            "comment": "Feature: Add support for referencing metatypes ModelProperty `::type` and Operation `::returnType` and `::parameters`"
          },
          {
            "comment": "Relax constraint on derived type overrides"
          },
          {
            "comment": "Fix: Alias unknown ref crash"
          },
          {
            "comment": "Fix: Empty model expression assignable to array"
          },
          {
            "comment": "Fix `tsp code uninstall` not finding extension to uninstall."
          },
          {
            "comment": "Fix Issue where template parameter type check wouldn't work if constraint is exact same type as next validation."
          },
          {
            "comment": "Prevent use of augment decorators on instantiated templates."
          },
          {
            "comment": "Allow projectedNames helpers to work with previous projections"
          },
          {
            "comment": "Add helper `interpolatePath` for emitter to do additional interpolation on config properties"
          },
          {
            "comment": "Api: Update `getTypeName` to omit standard library namespace"
          },
          {
            "comment": "Allow overloads in interfaces to work under projection"
          },
          {
            "comment": "Add pre-projection support."
          },
          {
            "comment": "Provide access to extended interfaces in type graph."
          },
          {
            "comment": "Document member ordering and fix projection rename reordering."
          },
          {
            "comment": "Replaced zonedDateTime with utcDateTime and offsetDateTime"
          }
        ]
      }
    },
    {
      "version": "0.42.0",
      "tag": "@typespec/compiler_v0.42.0",
      "date": "Mon, 13 Mar 2023 21:30:44 GMT",
      "comments": {
        "none": [
          {
            "comment": "**Breaking Change**. Removes `emitters` option in cadl-project.yaml. Use `emit` and `options` instead."
          },
          {
            "comment": "Export formatIdentifier function from the lib"
          },
          {
            "comment": "Add `--config` option to `tsp compile`."
          }
        ]
      }
    },
    {
      "version": "0.41.0",
      "tag": "@typespec/compiler_v0.41.0",
      "date": "Fri, 03 Mar 2023 19:59:17 GMT",
      "comments": {
        "none": [
          {
            "comment": "Adding back all compiler exported public artifacts contains Cadl that got renamed to TypeSpec."
          },
          {
            "comment": "Fix ambiguous references diagnostic for decorators"
          },
          {
            "comment": "Add loading cadl-project.yaml for back compat"
          },
          {
            "comment": "Remove support for Visual Studio 2019"
          },
          {
            "comment": "Allow escaping identifiers using backticks"
          },
          {
            "comment": "Format `StringLiteral` to `Identifier` (backticked when necessary)"
          },
          {
            "comment": "Apply augmented decorator at last."
          },
          {
            "comment": "Adding .cadl & package.json cadlMain back compat support"
          },
          {
            "comment": "Fix projection of template arguments"
          },
          {
            "comment": "Revert back changelog"
          },
          {
            "comment": "Revert PR #1634."
          },
          {
            "comment": "Fix issue with projectedName decorator not working correctly when multiple copies of the compiler are loaded."
          },
          {
            "comment": "Updating default output to tsp-output and package.json entrypoint to tspMain"
          },
          {
            "comment": "Rename to TypeSpec"
          },
          {
            "comment": "Fixing cli help message, package homepage link"
          }
        ],
        "dependency": [
          {
            "comment": "Updating dependency \"@typespec/eslint-config-typespec\" from `~0.5.0` to `~0.6.0`"
          },
          {
            "comment": "Updating dependency \"@typespec/internal-build-utils\" from `~0.3.3` to `~0.4.0`"
          },
          {
            "comment": "Updating dependency \"tmlanguage-generator\" from `~0.3.2` to `~0.4.0`"
          }
        ]
      }
    },
    {
      "version": "0.40.0",
      "tag": "@cadl-lang/compiler_v0.40.0",
      "date": "Tue, 07 Feb 2023 21:56:17 GMT",
      "comments": {
        "none": [
          {
            "comment": "Fix giving a default value to custom numeric scalar"
          },
          {
            "comment": "Feature: add an emitter framework to simplify building emitters"
          },
          {
            "comment": "Add `arrayDeclaration` and `arrayLiteral` methods to emitter framework's TypeEmitter"
          },
          {
            "comment": "Bug: properly parse logical and (`&&`) expressions in projections"
          },
          {
            "comment": "Support --option=path/to/emitter.js.option=value in cli args"
          },
          {
            "comment": "Removed all *Type aliases (ModelType for Model, etc.). Removed `uri` scalar. Removed `Map<K, V>` model. Removed `@serviceTitle` and `@serviceVersion` decorators. Removed `getServiceNamespace`, `getServiceTitle`, `getServiceVersion`, `getServiceNamespaceString` and `setServiceNamespace` functions."
          }
        ]
      }
    },
    {
      "version": "0.39.0",
      "tag": "@cadl-lang/compiler_v0.39.0",
      "date": "Fri, 13 Jan 2023 00:05:26 GMT",
      "comments": {
        "none": [
          {
            "comment": "Api: Provide more accurate `parent` type for Nodes"
          },
          {
            "comment": "Add IDE completion and signature help for augment decorators"
          },
          {
            "comment": "Fix `(anonymous model).paramName` showing in operation signatures in IDE"
          },
          {
            "comment": "Add double quote to autoClosingPairs"
          },
          {
            "comment": "Only warn when an invalid identifier is used in a doc comment"
          },
          {
            "comment": "Add @minValueExclusive and @maxValueExclusive decorators."
          },
          {
            "comment": "Feature: Templated operation inside of interfaces"
          },
          {
            "comment": "Feature: Add templated operation inside of interface"
          },
          {
            "comment": "Fix: Alias cause types to be resolved before some binding"
          },
          {
            "comment": "Fix `cadl format` works with windows backslash paths"
          },
          {
            "comment": "[Language Server] Fix: Completion of library imports replace import correctly\""
          },
          {
            "comment": "Fix issue with using server lib at the root of filesystem"
          },
          {
            "comment": "Fix: Projecting model property with type referencing sibling"
          },
          {
            "comment": "Fix: Issue with referencing spread members"
          },
          {
            "comment": "Internal: Update resolution of member symbols to have more ahead of time resolution"
          },
          {
            "comment": "Internal: Update TS module resolution to node16"
          },
          {
            "comment": "Type graph navigation navigate decorators"
          },
          {
            "comment": "Internal: Refactor organization of completions logic for language server"
          },
          {
            "comment": "Fix issue with referencing spread properties or enum member depending on the order of declaration"
          },
          {
            "comment": "Fix: `resolveUsages` shouldn't include base model"
          },
          {
            "comment": "Added `changeReturnType` projection method for operations."
          },
          {
            "comment": "Improve visibility decorator documentation"
          }
        ],
        "dependency": [
          {
            "comment": "Updating dependency \"@cadl-lang/internal-build-utils\" from `~0.3.2` to `~0.3.3`"
          }
        ]
      }
    },
    {
      "version": "0.38.5",
      "tag": "@cadl-lang/compiler_v0.38.5",
      "date": "Fri, 16 Dec 2022 22:02:45 GMT",
      "comments": {
        "patch": [
          {
            "comment": "emitter not found validation in emitter options is a warning"
          }
        ]
      }
    },
    {
      "version": "0.38.4",
      "tag": "@cadl-lang/compiler_v0.38.4",
      "date": "Thu, 15 Dec 2022 02:21:08 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Fix: `--arg` wasn't being picked up"
          }
        ]
      }
    },
    {
      "version": "0.38.3",
      "tag": "@cadl-lang/compiler_v0.38.3",
      "date": "Fri, 09 Dec 2022 22:03:04 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Fix: `constants` not available in `fs/promise`"
          }
        ]
      }
    },
    {
      "version": "0.38.2",
      "tag": "@cadl-lang/compiler_v0.38.2",
      "date": "Fri, 09 Dec 2022 20:43:01 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Fix: Revert breaking change to global cli usage"
          }
        ]
      }
    },
    {
      "version": "0.38.1",
      "tag": "@cadl-lang/compiler_v0.38.1",
      "date": "Thu, 08 Dec 2022 22:04:15 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Fix: `scalar` can be used inside of namespace block"
          }
        ]
      }
    },
    {
      "version": "0.38.0",
      "tag": "@cadl-lang/compiler_v0.38.0",
      "date": "Wed, 07 Dec 2022 17:21:52 GMT",
      "comments": {
        "minor": [
          {
            "comment": "Allow subtypes to override parent properties if the derived property type is a subtype of the parent property."
          },
          {
            "comment": "Add opt-in support for parsing JSDoc-like developer documentation"
          },
          {
            "comment": "Show developer docs in IDE features"
          },
          {
            "comment": "Doc: Add Doc comments to built-in types and decorators"
          },
          {
            "comment": "**Deprecation** Split `emitters` in cadl-project.yaml and compiler in 2 option `emit` and `options` that makes it consistent with the CLI"
          },
          {
            "comment": "Extract `getTypeName` and `getNamespaceString` outside of the checker into standalone helper function "
          },
          {
            "comment": "Add new helper `validateDecoratorUniqueOnNode` that validate the decorator is not being used twice on the same node"
          },
          {
            "comment": "Add variable interpolation functionality in the cadl-project.yaml"
          },
          {
            "comment": "Add built-in `emitter-output-dir` options for all emitter."
          },
          {
            "comment": "**Api Breaking change** $onEmit signature was updated to take an EmitContext object as only parmaeter."
          },
          {
            "comment": "Fix typing and export format command"
          },
          {
            "comment": "**Api Breaking** Multiple `@service` per specs are now allowed."
          },
          {
            "comment": "Add new `program.resolveTypeReference` helper to resolve a type in the cadl program using fully qualified name"
          },
          {
            "comment": "**Breaking** Add new `scalar` type and updated all intrinsic types to be a scalar type. `model MyString is string` changes to `scalar MyString extends string`"
          },
          {
            "comment": "`LanguageServer` Feature: Add signature help for decorators"
          },
          {
            "comment": "`Testing` Simplification of the testing framework"
          },
          {
            "comment": "`cadl init` Initialize the package.json with `type: module`"
          },
          {
            "comment": "**Deprecation** Renamed `url` to `uri`. Old `uri` is deprecated"
          }
        ],
        "patch": [
          {
            "comment": "Fix member completion on aliases"
          },
          {
            "comment": "Improve error recovery in the presence of merge conflict markers"
          },
          {
            "comment": "Fix reportDiagnostics error from emitters"
          },
          {
            "comment": "Fix: Should still instantiate template with invalid args but using constrain value"
          },
          {
            "comment": "Fix: Issue with diagnostic location when target was the operation parmeters"
          },
          {
            "comment": "Fix: miscOptions handling"
          },
          {
            "comment": "**Fix** Handle no service in services deprecated apis"
          },
          {
            "comment": "Fix: Validate `@service` decorator is targetting a namespace"
          },
          {
            "comment": "Fix: Cascading error when template is used with invalid arguments"
          },
          {
            "comment": "Update dependencies"
          }
        ],
        "dependency": [
          {
            "comment": "Updating dependency \"@cadl-lang/eslint-config-cadl\" from `~0.4.1` to `~0.5.0`"
          },
          {
            "comment": "Updating dependency \"@cadl-lang/internal-build-utils\" from `~0.3.1` to `~0.3.2`"
          },
          {
            "comment": "Updating dependency \"tmlanguage-generator\" from `~0.3.1` to `~0.3.2`"
          }
        ]
      }
    },
    {
      "version": "0.37.0",
      "tag": "@cadl-lang/compiler_v0.37.0",
      "date": "Sat, 12 Nov 2022 00:14:04 GMT",
      "comments": {
        "minor": [
          {
            "comment": "Add `output-dir`, `trace`, `imports` option to cadl-project.yaml giving parity with cli arguments"
          },
          {
            "comment": "**Feature** Add decorator and function declaration in cadl using `extern dec` and `extern fn`."
          },
          {
            "comment": "Fix: crash with referencing global namespace"
          },
          {
            "comment": "Added a new export to only import the module resolver"
          },
          {
            "comment": "Debugging: adding tracing information for JS decorators and function binding"
          }
        ],
        "patch": [
          {
            "comment": "`emitFile` now ensures that the folder exists prior to writing to the path."
          },
          {
            "comment": "Add `isDeclaredInNamespace` utility function that checks if a definable type exists under a namespace or its children"
          }
        ]
      }
    },
    {
      "version": "0.36.1",
      "tag": "@cadl-lang/compiler_v0.36.1",
      "date": "Wed, 19 Oct 2022 19:36:13 GMT",
      "comments": {
        "patch": [
          {
            "comment": "**Fix** augment decorators can be applied on namespace"
          }
        ]
      }
    },
    {
      "version": "0.36.0",
      "tag": "@cadl-lang/compiler_v0.36.0",
      "date": "Wed, 12 Oct 2022 21:12:35 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Fix bug where cloned type members had wrong parent"
          },
          {
            "comment": "Internal: Update type of `CompilerOptions.miscOptions` to be more accurate."
          },
          {
            "comment": "Fix: Intersection types belong to namespace they are declared in."
          },
          {
            "comment": "Fix: namespace and non namespace types should have unique names"
          },
          {
            "comment": "Fix: Deprecated `output-path` not being respected"
          },
          {
            "comment": "Fix: Property included via `model is` were not referencing the right model parent."
          },
          {
            "comment": "Fix: Projected types point to projected parent type for Model properties, Union variants."
          },
          {
            "comment": "Fix: Projected model property sourceProperty point to projected property"
          },
          {
            "comment": "Minor improvemens to decorator definitions"
          }
        ],
        "minor": [
          {
            "comment": "Remove `createProgram` and change `compile` parameter order to match old `createProgram`."
          },
          {
            "comment": "Add new `getDiscriminatedUnion` helper to resolve the variants of a discriminated model or union"
          },
          {
            "comment": "Emitter throwing exception will emit a new `emitter-uncaught-error` diagnostic with information on how to file issue for the given emitter."
          },
          {
            "comment": "Expose module resolver"
          },
          {
            "comment": "Add support for augment decorators."
          },
          {
            "comment": "Language server provide document formatting using Cadl formatter"
          },
          {
            "comment": "**Deprecation** Replace `@serviceTitle` and `@serviceVersion` with a single `@service` decorator. "
          },
          {
            "comment": "`API` Replaced logger (now internal) with new tracer module. Where trace have to be explicity enabled with `--trace`."
          },
          {
            "comment": "Add `uri` built-in type"
          },
          {
            "comment": "Allow referencing global namespace as `global` for disambiguation"
          },
          {
            "comment": "**Feature** `Api`: `resolveUsages` can now be used on a list of operation, interface or namespaces"
          },
          {
            "comment": "**Fix** `Api`: `resolveUsages` collect reference to array element type and record value correctly."
          },
          {
            "comment": "Expose helper to walk inherited properties and some helper data structures"
          },
          {
            "comment": "Feature: `decorators` Add `@minItems` and `@maxItems` decorators"
          },
          {
            "comment": "Add `navigateNamespace` helper letting user to navigate types under a namespace.(Similar to `navigateProgram`)"
          },
          {
            "comment": "Include `@discriminator` decorator from \"@cadl-lang/rest\" library"
          },
          {
            "comment": "Language Server: Improvement to outline, symbols correctly structured."
          },
          {
            "comment": "Rename `output-path` to `output-dir` and deprecate old name."
          },
          {
            "comment": "Add additional validation for `@overload` decorator: Make sure overloads are in the same container and that return types are compatible"
          },
          {
            "comment": "Added `listOperations` helper method"
          },
          {
            "comment": "**Breaking** Model `extends` or `is` cannot reference a model expression."
          }
        ]
      }
    },
    {
      "version": "0.35.0",
      "tag": "@cadl-lang/compiler_v0.35.0",
      "date": "Thu, 08 Sep 2022 01:04:53 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Api: `isGlobalNamespace` takes projection into account"
          },
          {
            "comment": "Internal: Facilitate adding new tokens to scanner.\""
          },
          {
            "comment": "Formatter: Cadl doesn't include blank line at the end of embedded markdown codeblock"
          },
          {
            "comment": "Fix issue with ever-increasing duplicate symbol errors in IDE"
          },
          {
            "comment": "Formatter: Directive on model property with decorators will hug decorator."
          },
          {
            "comment": "Fix additional issues for decorators not running in projections in templated type instance"
          },
          {
            "comment": "Internal: Fix some functionally not compatible in the browser"
          },
          {
            "comment": "Fix issue where decorators would get called on uninstantiated template declarations"
          },
          {
            "comment": "Internal: Don't clear template arguments on clone"
          },
          {
            "comment": "Internal: Make scanner capable of scanning future keywords that are longer than 10 characters."
          }
        ],
        "minor": [
          {
            "comment": "implementation of documentHighlight"
          },
          {
            "comment": "**Breaking** Update `Enum` type members type to be a `Map<string, EnumMember>` instead of `EnumMember[]`"
          },
          {
            "comment": "Add `@projectedName` decorator and projection for projected names"
          },
          {
            "comment": "Add auto formatting support for projections"
          },
          {
            "comment": "Add syntax highlighting for projections"
          },
          {
            "comment": "**API BREAKING** Replace `enableProjections` and `disableProjections` with a new function `projectProgram` removing the state of the program around the current projection."
          },
          {
            "comment": "Api: Add helper method to resolve model usages"
          },
          {
            "comment": "Formatter: Comments in between decorators will stay between the decorators when formatting."
          },
          {
            "comment": "Hovering over a symbol gives the fully-qualified name and documentation"
          },
          {
            "comment": "Enable loading multiple installation of the same library as long as the versions are the same"
          },
          {
            "comment": "Internal: Remove `evalCadlScript` from `Program`"
          },
          {
            "comment": "Remove Type suffix from most Types and deprecate old names"
          },
          {
            "comment": "Perf: Reuse unchanged files and programs in language server."
          }
        ],
        "dependency": [
          {
            "comment": "Updating dependency \"@cadl-lang/eslint-config-cadl\" from `~0.4.0` to `~0.4.1`"
          }
        ]
      }
    },
    {
      "version": "0.34.0",
      "tag": "@cadl-lang/compiler_v0.34.0",
      "date": "Thu, 11 Aug 2022 19:05:23 GMT",
      "comments": {
        "minor": [
          {
            "comment": "combine consecutive single line comments that are separated by whitespace"
          },
          {
            "comment": "comment folding"
          },
          {
            "comment": "implemented folding for comments"
          },
          {
            "comment": "Allow extracting value from enums"
          },
          {
            "comment": "Add helper method for emitting file in emitters"
          },
          {
            "comment": "Feature: Emitter can specify a list of required imports"
          },
          {
            "comment": "Allow `@secret` on model property"
          },
          {
            "comment": "Add type relations and include a few more built-in types `any`, `object`, `Record`. `Map` was removed"
          },
          {
            "comment": "Added support for template constraints"
          },
          {
            "comment": "Format `model Foo is Bar {}` to `model Foo is Bar;`"
          },
          {
            "comment": "Added ability for decorator validator to accept any type"
          },
          {
            "comment": "Add @overload decorator"
          },
          {
            "comment": "Add helper to check if a namespace is the global namespace"
          },
          {
            "comment": "Support spread enum"
          },
          {
            "comment": "Add editor support for document symbols."
          },
          {
            "comment": "Improve language configuration to help with comment indentation"
          },
          {
            "comment": "Provide helper to check types are template, template declaration or template instance"
          }
        ],
        "patch": [
          {
            "comment": "Fix: Allow omiting optional properties"
          },
          {
            "comment": "Improve `cloneType` implementation to duplicate decorator lists correctly"
          },
          {
            "comment": "Add DefaultKeyVisibility<T, Visibility> and @withDefaultKeyVisibility to assign a default visibility value to model @key properties in specific operation signatures"
          },
          {
            "comment": "Fix: Referencing previous template parameter in template parameter default"
          },
          {
            "comment": "Fix bug in finding effective type"
          },
          {
            "comment": "Fix issue with required parentheses being dropped with union, intersection and array expressions"
          },
          {
            "comment": "Fix issue with formatting multi line tuple adding trailing comma."
          },
          {
            "comment": "Fix parsing error locations for imports and blockless namespaces"
          },
          {
            "comment": "Fix issue with multi-file specs in VS Code on Windows where common definitions are not found."
          },
          {
            "comment": "Fix `mix` message when trying to extend non-interface"
          },
          {
            "comment": "Fix issue with projection of nested namespace passing partial projected element to decorators"
          },
          {
            "comment": "Fix: Operation signature with circular reference causing crash and updated message+code to be relevant to operations."
          },
          {
            "comment": "Fix: Couldn't use operation defined inside interfaces as signature."
          },
          {
            "comment": "Fix uninitialized parent namespaces in projections"
          },
          {
            "comment": "Run projections on types returned from getEffectiveType"
          },
          {
            "comment": "Fix: Issue with Nested namespace in projection causing versioning library to fail when Service is using nested namespace"
          },
          {
            "comment": "Internal: union variant type has reference to parent union."
          },
          {
            "comment": "Fix null reference in getTypeName API when called on anonymous models without a backing syntax node"
          },
          {
            "comment": "Emit diagnostic when an optional property is marked with @key"
          },
          {
            "comment": "Providing `cadl.cadl-server.path` option will force the specified compiler to be used"
          },
          {
            "comment": "Fix error location of duplicate property from spread"
          }
        ],
        "dependency": [
          {
            "comment": "Updating dependency \"@cadl-lang/eslint-config-cadl\" from `~0.3.0` to `~0.4.0`"
          },
          {
            "comment": "Updating dependency \"@cadl-lang/internal-build-utils\" from `~0.3.0` to `~0.3.1`"
          },
          {
            "comment": "Updating dependency \"tmlanguage-generator\" from `~0.3.0` to `~0.3.1`"
          }
        ]
      }
    },
    {
      "version": "0.33.0",
      "tag": "@cadl-lang/compiler_v0.33.0",
      "date": "Fri, 08 Jul 2022 23:22:57 GMT",
      "comments": {
        "minor": [
          {
            "comment": "Decorator definition helper support spread args"
          },
          {
            "comment": "Add ability to provide emitter options"
          },
          {
            "comment": "Improve folding in IDE."
          },
          {
            "comment": "Allow omitting braces from model is statements"
          },
          {
            "comment": "implementation of relativePath"
          }
        ],
        "patch": [
          {
            "comment": "Fix issue with compiler version mismatch in VSCode"
          },
          {
            "comment": "Fix error location for intersection with non-model"
          },
          {
            "comment": "Fix Internal Compiler Error when using invalid relative import"
          },
          {
            "comment": "Internal: Decorator definition helper works with multiple target and param types"
          },
          {
            "comment": "Improved the error message shown when an `onEmit` function is not found in the requested emitter package"
          }
        ]
      }
    },
    {
      "version": "0.32.0",
      "tag": "@cadl-lang/compiler_v0.32.0",
      "date": "Mon, 13 Jun 2022 23:42:28 GMT",
      "comments": {
        "minor": [
          {
            "comment": "Improve error message when loading library with invalid `main` file"
          },
          {
            "comment": "Added new decorator signature validation helper"
          },
          {
            "comment": "Allow empty tuples"
          },
          {
            "comment": "Add helper functions to work with diagnostics in accessor functions"
          },
          {
            "comment": "Add diagnostics target to decorator context"
          },
          {
            "comment": "Add `@deprecated` decorator and emit warning diagnostic when referencing deprecated type"
          },
          {
            "comment": "Add completion support for import of libraries"
          },
          {
            "comment": "Remove @serviceHost decorator"
          },
          {
            "comment": "Add ability to rename Models, Operations, Interface, Unions and Enums in projections."
          },
          {
            "comment": "Add compiler API to filter model properties and get try to find equivalent named models for anonymous models"
          },
          {
            "comment": "Rename `setDecoratorNamespace` -> `setCadlNamespace`"
          },
          {
            "comment": "Add support for operation templates and operation signature reuse"
          },
          {
            "comment": "Implement references to model, enum, union, and interface members"
          },
          {
            "comment": "Add semantic colorization"
          },
          {
            "comment": "Add completion/find-all-ref/rename support to member references"
          },
          {
            "comment": "Allow `using` before blockless `namespace`"
          }
        ],
        "patch": [
          {
            "comment": "Fix completion between `.` and `)`"
          },
          {
            "comment": "Fix issue with compiling virtual editor files"
          },
          {
            "comment": "Allow an emitter library to have `.cadl` files"
          },
          {
            "comment": "Fix issue with resolving node position when inside string literal"
          },
          {
            "comment": "Provide full namespace name in diagnostic"
          },
          {
            "comment": "Fix issue with server not locating main.cadl in parent folder"
          },
          {
            "comment": "Improve tracking of open documents in language server"
          },
          {
            "comment": "Fix issues with referencing enum from decorator on namespace"
          }
        ],
        "none": [
          {
            "comment": "Allow cadl compile . on the compiler itself"
          },
          {
            "comment": "`getTypeName` returns type name for more types"
          },
          {
            "comment": "Upgrade to TS4.7"
          }
        ],
        "dependency": [
          {
            "comment": "Updating dependency \"@cadl-lang/internal-build-utils\" from `~0.2.0` to `~0.3.0`"
          }
        ]
      }
    },
    {
      "version": "0.31.0",
      "tag": "@cadl-lang/compiler_v0.31.0",
      "date": "Fri, 06 May 2022 17:19:57 GMT",
      "comments": {
        "minor": [
          {
            "comment": "Prompt on cadl vs install if multiple versions of VS are installed"
          },
          {
            "comment": "Improve module resolution logic to allow compiling a cadl library"
          },
          {
            "comment": "Add code preview and coloring for diagnostics."
          },
          {
            "comment": "Add ability to import library or emitter defined in parent folder. Adds the ability to use the actual emitter name in a samples folder of that emitter"
          },
          {
            "comment": "Formatter has ability to ignore patterns"
          },
          {
            "comment": "Formatter: remove quotes in model properties when not needed"
          },
          {
            "comment": "Add library loading debug logging"
          },
          {
            "comment": "Include manifest with version and commit"
          },
          {
            "comment": "Rename `mixes` to `extends` for interfaces"
          },
          {
            "comment": "Include reference from parent model to all children"
          },
          {
            "comment": "Cli: Add `--no-emit` flag configuring the `noEmit` compilerOption"
          },
          {
            "comment": "Add `warn-as-error` flag to cli that will return non zero exit code when there is a warning"
          },
          {
            "comment": "Add find references and rename support to language server"
          },
          {
            "comment": "Add goto definition of namespaces, usings, and decorators to language server"
          },
          {
            "comment": "Export `isTemplate` helper method"
          },
          {
            "comment": "Add namespace to model expressions"
          },
          {
            "comment": "Make Program.checker required"
          },
          {
            "comment": "Added formatting to a few more missing syntax(`array`, `tuple`, `template parameters`)"
          },
          {
            "comment": "Add OmitProperties type and @withoutOmittedProperties decorator"
          },
          {
            "comment": "Remove node 14 support"
          },
          {
            "comment": "Log PID and timestamps in language server"
          },
          {
            "comment": "Update to Unicode 14.0 and disallow U+FFFD"
          },
          {
            "comment": "Add option to Checker.getTypeName to filter namespaces"
          }
        ],
        "patch": [
          {
            "comment": "Improve tests for doc decorator"
          },
          {
            "comment": "Add workaround for npx bug causing issue with backslash in cli on windows"
          },
          {
            "comment": "Do not validate default assignment when property type is an error type. Prevent additional unrelated error to the original problem with the property type."
          },
          {
            "comment": "Fix projection bug setting the namespace of operation with the interface"
          },
          {
            "comment": "Fix logger levels"
          },
          {
            "comment": "Fix issue with using model in template default"
          },
          {
            "comment": "Give a helpful error when code is missing from path"
          },
          {
            "comment": "Don't complete decorator names in type reference position"
          },
          {
            "comment": "Preserve namespace nesting in versioning projections"
          }
        ],
        "none": [
          {
            "comment": "Add `CadlLanguageConfiguration` containing the configuration used by editor (vscode, monaco)"
          }
        ],
        "dependency": [
          {
            "comment": "Updating dependency \"@cadl-lang/internal-build-utils\" from `~0.1.0` to `~0.2.0`"
          }
        ]
      }
    },
    {
      "version": "0.30.0",
      "tag": "@cadl-lang/compiler_v0.30.0",
      "date": "Thu, 31 Mar 2022 17:10:49 GMT",
      "comments": {
        "patch": [
          {
            "comment": "support format in bytes type"
          },
          {
            "comment": "Fix: stack overflow when defining template argument where default reference argument itself. `Foo<T = T>`"
          },
          {
            "comment": "Fix formatting of comment between decorator and statement"
          },
          {
            "comment": "Fix resolving location for diagnostic in js files"
          },
          {
            "comment": "Fix formatting of comment between decorator and property"
          },
          {
            "comment": "Fix using `&` with template parameters"
          },
          {
            "comment": "Support browser builds"
          },
          {
            "comment": "Fix issues with mishandled promises"
          },
          {
            "comment": "Fix cascade of error when having unexpected token in directive"
          }
        ],
        "minor": [
          {
            "comment": "Add new helper `cadlTypeToJson` to convert cadl type to a Json serializable type"
          },
          {
            "comment": "Add helper methods to detect `void` and `never` types"
          },
          {
            "comment": "Prevent decorators from running if arguments are errors."
          },
          {
            "comment": "Handle unknown identifier/error types used in spread operator."
          },
          {
            "comment": "Add parent .model to ModelTypeProperty"
          },
          {
            "comment": "Add validation that template params cannot use latter params as default"
          }
        ],
        "dependency": [
          {
            "comment": "Updating dependency \"@cadl-lang/eslint-config-cadl\" from `~0.2.0` to `~0.3.0`"
          }
        ]
      }
    },
    {
      "version": "0.29.0",
      "tag": "@cadl-lang/compiler_v0.29.0",
      "date": "Wed, 09 Mar 2022 17:42:09 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Improve list parsing error recovery"
          },
          {
            "comment": "Use the proper symbol to use cadl exports in eval"
          },
          {
            "comment": "Fix issue with missing namespace name in certain cases"
          },
          {
            "comment": "Fix issue using `is` with intrinsic types."
          },
          {
            "comment": "Fix decorator completion on namespaces"
          },
          {
            "comment": "refactor symbols and other improvements"
          }
        ],
        "minor": [
          {
            "comment": "Move @key decorator to core"
          },
          {
            "comment": "Replace findChildModels with mapChildModels"
          },
          {
            "comment": "**Exports** `NodeHost` for programmatic usage of Cadl "
          },
          {
            "comment": "**Added** `@knownValues` decorator providing set of known options for a string type"
          },
          {
            "comment": "Using `extends` with intrinsic types will emit diagnostic."
          },
          {
            "comment": "Allow `op` in interfaces"
          },
          {
            "comment": "Complete using statements and qualified decorators."
          },
          {
            "comment": "Add back `@inspectType` and `@inspectTypeName` decorators"
          },
          {
            "comment": "Redirect console.log to stderr in language server"
          }
        ],
        "dependency": [
          {
            "comment": "Updating dependency \"@cadl-lang/eslint-config-cadl\" from `~0.1.0` to `~0.2.0`"
          }
        ]
      }
    },
    {
      "version": "0.28.0",
      "tag": "@cadl-lang/compiler_v0.28.0",
      "date": "Tue, 15 Feb 2022 22:35:02 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Fix parser issue with missing error flag when using `interface extends` instead of `interface mixes`."
          },
          {
            "comment": "Fix parser issue with incorrect `op` in various projection expressions, and wrong node type for `/` and `*`."
          },
          {
            "comment": "Add support for separate `@summary` from `@doc`"
          }
        ],
        "minor": [
          {
            "comment": "Internals: Module resolver not dependent on `CompilerHost`"
          },
          {
            "comment": "Provide reusable decorator validation for target"
          }
        ]
      }
    },
    {
      "version": "0.27.0",
      "tag": "@cadl-lang/compiler_v0.27.0",
      "date": "Mon, 14 Feb 2022 03:01:07 GMT",
      "comments": {
        "minor": [
          {
            "comment": "Provide helper for library to validate parameter"
          },
          {
            "comment": "Update api for decorator taking `DecoratorContext` instead of `Program`"
          }
        ],
        "patch": [
          {
            "comment": "Fix bugs involving merged decorators"
          },
          {
            "comment": "Give nice error for using extends keyword in interfaces"
          },
          {
            "comment": "Implement template parameter defaults"
          },
          {
            "comment": "Bump dependency versions"
          }
        ]
      }
    },
    {
      "version": "0.26.0",
      "tag": "@cadl-lang/compiler_v0.26.0",
      "date": "Fri, 04 Feb 2022 18:00:18 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Adding @format decorator to compiler and openapi3 emitter"
          },
          {
            "comment": "Add `sourceObject` parameter to `@doc` decorator to aid in producing messages using a context object"
          },
          {
            "comment": "`@list` decorator will now ignore `TemplateParameter` objects"
          },
          {
            "comment": "Init include compiler as dependency in generated package.json"
          },
          {
            "comment": "Allow CLI array options to come before positional arguments"
          },
          {
            "comment": "**Fix** Diagnostic location for invalid use of templated models"
          },
          {
            "comment": "Fix path normalization issue that caused diagnostics from language server to be dropped."
          },
          {
            "comment": "Fix error with file ending with mutline comment"
          },
          {
            "comment": "**Fix** issue when loading cadl using a different casing than the actual casing in a case insensitive file system"
          },
          {
            "comment": "Add @friendlyName decorator to customize model names for emitters"
          },
          {
            "comment": "Fix issue where identifiers could be confused with keywords when they had common endings."
          },
          {
            "comment": "Renaming @format decorator to @pattern."
          },
          {
            "comment": "Stop offering `true` and `false` completions after `.`"
          },
          {
            "comment": "Fix completion icon for symbols pulled in via using"
          }
        ],
        "minor": [
          {
            "comment": "Validate for `@doc` decorator argument is a string"
          },
          {
            "comment": "Add @error decorator in core"
          },
          {
            "comment": "**Added** --emit flag to configure the emitter(s) to use and separate library imports from emitters"
          },
          {
            "comment": "Add directory manipulation to CompilerHost"
          },
          {
            "comment": "Update to syntax tree to be readonly"
          },
          {
            "comment": "Formatter: Separate Enum members with decorator with new lines"
          },
          {
            "comment": "Implement projections and versioning"
          }
        ]
      }
    },
    {
      "version": "0.25.0",
      "tag": "@cadl-lang/compiler_v0.25.0",
      "date": "Thu, 16 Dec 2021 08:02:20 GMT",
      "comments": {
        "minor": [
          {
            "comment": "**Update** reference resolution with `using` to fix duplicate symbols issues"
          },
          {
            "comment": "**Added** keyword autocomplete and icons"
          },
          {
            "comment": "**Added** support for union default values"
          },
          {
            "comment": "**Formatter** Add support for spread model formatting"
          },
          {
            "comment": "add mkdirp to compilerHost"
          }
        ],
        "patch": [
          {
            "comment": "Add findChildModels and getProperty utility functions"
          },
          {
            "comment": "**Fix** Circular reference in `is` or `extends` now emit a diagnostic instead of crashing"
          },
          {
            "comment": "**Fix** Circular reference in `alias` now emit a diagnostic instead of crashing"
          },
          {
            "comment": "**Fix** Circular reference between template model and non template model causing unresolved types issues."
          },
          {
            "comment": "**Formatter** fix issues with empty model and interface with comments being moved outside."
          },
          {
            "comment": "**Formatter** fix crash when having a comment in anonymous empty model."
          },
          {
            "comment": "**Formatter** fix crash when using multi-line comment without each line starting with `*`."
          },
          {
            "comment": "**Formatter** Tweak formatting of interface mixes that overflow."
          },
          {
            "comment": "**Formatter** Keep single value decorator inline."
          },
          {
            "comment": "**Formatter** Keep empty line seperation in interface similar to namespace (Only keeps 1 max between operation)."
          },
          {
            "comment": "Add support for `interface` as a `@tag` decorator target"
          },
          {
            "comment": "Reintroduce @list decorator to assist with collection operations"
          },
          {
            "comment": "Improve getTypeName support for Unions and UnionVariants"
          }
        ]
      }
    },
    {
      "version": "0.24.1",
      "tag": "@cadl-lang/compiler_v0.24.1",
      "date": "Wed, 01 Dec 2021 22:56:11 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Fix issue where formatter would try to format a document with irrecoverable parse errors in certain cases"
          },
          {
            "comment": "**Fix** Wrong library import for the rest template"
          },
          {
            "comment": "Fix crash in language server"
          },
          {
            "comment": "Fix formatting bug with operations returning anonymous models"
          },
          {
            "comment": "Fix language server crashes in certain error cases"
          },
          {
            "comment": "Update README"
          }
        ]
      }
    },
    {
      "version": "0.24.0",
      "tag": "@cadl-lang/compiler_v0.24.0",
      "date": "Thu, 18 Nov 2021 13:58:15 GMT",
      "comments": {
        "minor": [
          {
            "comment": "**Added** `cadl install` command which shell out to `npm install`"
          },
          {
            "comment": "Remove @list decorator"
          },
          {
            "comment": "Show `@doc` info along with completions"
          }
        ],
        "patch": [
          {
            "comment": "**Fix** Logging of warning counts, showing error count"
          },
          {
            "comment": "Ensure interface is assigned for checked operations"
          },
          {
            "comment": "Add setDecoratorNamespace helper function"
          }
        ]
      }
    },
    {
      "version": "0.23.0",
      "tag": "@cadl-lang/compiler_v0.23.0",
      "date": "Thu, 11 Nov 2021 21:46:21 GMT",
      "comments": {
        "minor": [
          {
            "comment": "**Added** `duration` intrinsic type"
          },
          {
            "comment": "**Added** `--check` option to `cadl format` command to verify files are formatted"
          },
          {
            "comment": "**Added** log of the error and warning count at the end in case `cadl compile` failed."
          },
          {
            "comment": "**Added** Support for models with mutual references"
          },
          {
            "comment": "Add completion (\"IntelliSense\") support to language server"
          },
          {
            "comment": "`cadl init` generate `package.json` with `private: true`"
          }
        ],
        "patch": [
          {
            "comment": "Add Prettier formatting support for interface mixes"
          },
          {
            "comment": "Add new --import CLI parameter to add a global import via the command line"
          }
        ]
      }
    },
    {
      "version": "0.22.0",
      "tag": "@cadl-lang/compiler_v0.22.0",
      "date": "Thu, 28 Oct 2021 21:17:50 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Return non-zero exit code when compilation has errors"
          },
          {
            "comment": "Diagnostics are strongly defined and all have a code"
          },
          {
            "comment": "**Fix** `using` formatting"
          },
          {
            "comment": "**Tweak** formatter model properties with decorators"
          },
          {
            "comment": "**Improve** decorator formatting"
          }
        ],
        "minor": [
          {
            "comment": "**Added** logger functionality to log information"
          },
          {
            "comment": "Add `OmitDefaults` model to remove default values of a model"
          }
        ]
      }
    },
    {
      "version": "0.21.0",
      "tag": "@cadl-lang/compiler_v0.21.0",
      "date": "Fri, 15 Oct 2021 21:33:37 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Defensive code to prevent errors in decorators and onBuild from exiting the language server"
          },
          {
            "comment": "Fix options comment"
          },
          {
            "comment": "Update samples"
          },
          {
            "comment": "Fix binding JS file namespaces and namespace decorators referencing types in a later namespace."
          },
          {
            "comment": "fix using a namespace merged after current namespace"
          },
          {
            "comment": "Fix namespace synthesis in certain contexts"
          },
          {
            "comment": "Make nextLink optional in pageable response"
          },
          {
            "comment": "Stop running decorators and emitters in language server again, fix language server crash. "
          },
          {
            "comment": "regenerate samples"
          }
        ],
        "minor": [
          {
            "comment": "Add an API to clone a type"
          },
          {
            "comment": "Reverse decorator evaluation order"
          },
          {
            "comment": "**Added** Support for server default"
          },
          {
            "comment": "**Added** New library helper for strong diagnostics definitions"
          },
          {
            "comment": "**Added** New syntax to compiler for directive"
          },
          {
            "comment": "**Added** support for suppressing warning via #suppress directive"
          },
          {
            "comment": "Implement `interface`"
          },
          {
            "comment": "Add walker, colorization, printer for interfaces"
          },
          {
            "comment": "Surface decorator and emitter errors in IDE"
          },
          {
            "comment": "Add union declarations"
          }
        ]
      }
    },
    {
      "version": "0.20.0",
      "tag": "@cadl-lang/compiler_v0.20.0",
      "date": "Fri, 17 Sep 2021 00:49:37 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Fix issues with specs"
          },
          {
            "comment": "Update samples"
          },
          {
            "comment": "Ensure syntax nodes report correct and consistent source positions"
          },
          {
            "comment": "Fix bug that broke analyzing untitled documents in IDE"
          },
          {
            "comment": "Fix bug preventing using latest changes to document in IDE"
          },
          {
            "comment": "Update sample generation"
          }
        ],
        "minor": [
          {
            "comment": "Added `cadl init` command to scaffold new cadl project"
          },
          {
            "comment": "Added semantic walker"
          },
          {
            "comment": "Add IDE go-to definition support"
          },
          {
            "comment": "Implement cadl namespace, don't merge namespaces until checking"
          },
          {
            "comment": "Remove support for multiple inheritance"
          },
          {
            "comment": "Definition for `bytes` and new number types"
          }
        ]
      }
    },
    {
      "version": "0.19.0",
      "tag": "@cadl-lang/compiler_v0.19.0",
      "date": "Sat, 21 Aug 2021 00:04:02 GMT",
      "comments": {
        "minor": [
          {
            "comment": "Introduce naming convention `$name` for JavaScript-defined Cadl functions and decorators"
          }
        ],
        "patch": [
          {
            "comment": "Update test output"
          }
        ]
      }
    },
    {
      "version": "0.18.0",
      "tag": "@cadl-lang/compiler_v0.18.0",
      "date": "Fri, 13 Aug 2021 19:10:21 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Add support for discovering updatable properties using visibility"
          },
          {
            "comment": "Fix error in `cadl vs uninstall` command"
          }
        ],
        "minor": [
          {
            "comment": "Remove `cadl generate` command"
          }
        ]
      }
    },
    {
      "version": "0.17.0",
      "tag": "@cadl-lang/compiler_v0.17.0",
      "date": "Tue, 10 Aug 2021 20:23:04 GMT",
      "comments": {
        "minor": [
          {
            "comment": "Rename package to @cadl-lang/compiler"
          }
        ]
      }
    },
    {
      "version": "0.16.0",
      "tag": "@azure-tools/cadl_v0.16.0",
      "date": "Mon, 09 Aug 2021 21:14:12 GMT",
      "comments": {
        "patch": [
          {
            "comment": "**Update** to yargs 17 and update args parsing to use handlers logic to have full type safety"
          },
          {
            "comment": "Report errors for duplicate model and enum members"
          }
        ],
        "minor": [
          {
            "comment": "Add `compile --watch` option to watch files for changes and recompile"
          },
          {
            "comment": "Implement model is"
          }
        ]
      }
    },
    {
      "version": "0.15.0",
      "tag": "@azure-tools/cadl_v0.15.0",
      "date": "Mon, 02 Aug 2021 18:17:00 GMT",
      "comments": {
        "minor": [
          {
            "comment": "Rename ADL to Cadl"
          }
        ]
      }
    },
    {
      "version": "0.14.0",
      "tag": "@azure-tools/adl_v0.14.0",
      "date": "Wed, 28 Jul 2021 19:40:06 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Add service code generator module"
          },
          {
            "comment": "Allow more non-ascii characters in identifiers and normalize identifiers"
          },
          {
            "comment": "Use newer version of autorest from `adl generate`"
          }
        ],
        "minor": [
          {
            "comment": "Decorators can be put into namespaces using a .namespace property or a namespace export"
          }
        ]
      }
    },
    {
      "version": "0.13.0",
      "tag": "@azure-tools/adl_v0.13.0",
      "date": "Fri, 09 Jul 2021 20:21:06 GMT",
      "comments": {
        "patch": [
          {
            "comment": "**Update** Diagnostics code to be a string"
          },
          {
            "comment": "Formatter can recover from parsing error that don't affect the validity of the tree"
          },
          {
            "comment": "Use LSP to log messages from client to server"
          }
        ],
        "minor": [
          {
            "comment": "Add OptionalProperties<T> and withOptionalProperties decorator for creating model variations with all properties set to optional"
          },
          {
            "comment": "Add semantic analysis to language server"
          }
        ]
      }
    },
    {
      "version": "0.12.0",
      "tag": "@azure-tools/adl_v0.12.0",
      "date": "Thu, 24 Jun 2021 03:57:43 GMT",
      "comments": {
        "patch": [
          {
            "comment": "**Added** ADL Configuration file loading"
          },
          {
            "comment": "Added typechecker type navigation"
          },
          {
            "comment": "Add isStringType helper function"
          },
          {
            "comment": "Fix some edge cases in config file loading"
          },
          {
            "comment": "Add support for Visual Studio 2022"
          }
        ],
        "minor": [
          {
            "comment": "Require main.adl or adlMain in package.json"
          },
          {
            "comment": "Add mutator library which enables the programmatic addition of model properties, operation parameters, and operation return types"
          },
          {
            "comment": "Add semantic error recovery"
          }
        ]
      }
    },
    {
      "version": "0.11.0",
      "tag": "@azure-tools/adl_v0.11.0",
      "date": "Tue, 18 May 2021 23:43:31 GMT",
      "comments": {
        "patch": [
          {
            "comment": "**Fix** Throw diagnostic when main ADL file doesn't exists"
          },
          {
            "comment": "Fix TypeError after `adl vs` command"
          },
          {
            "comment": "**Fix** formatter handling string and number literal should keep as it is."
          },
          {
            "comment": "**Fix** Formatter not rendering template parameters of models."
          },
          {
            "comment": "**Fix** Don't format a file with parsing errors"
          },
          {
            "comment": "Work around npm 7+ Mac OS bug in `adl code install`"
          },
          {
            "comment": "Prefer local install of adl package when running global `adl`"
          }
        ],
        "minor": [
          {
            "comment": "**Added** format command to automatically format adl files"
          }
        ]
      }
    },
    {
      "version": "0.10.0",
      "tag": "@azure-tools/adl_v0.10.0",
      "date": "Thu, 06 May 2021 14:56:02 GMT",
      "comments": {
        "minor": [
          {
            "comment": "Implement alias and enum, remove model ="
          },
          {
            "comment": "Implement basic parser error recovery"
          },
          {
            "comment": "Add API to check if a node or any descendants have parse errors"
          }
        ],
        "patch": [
          {
            "comment": "Small parsing speed improvement when expecting one of N tokens."
          },
          {
            "comment": "Fix blockless namespaces not accumulating decls"
          },
          {
            "comment": "Allow leading +/- in numeric literals and require fractional digits"
          },
          {
            "comment": "Fix bugs with non-ascii identifiers"
          },
          {
            "comment": "Improve CLI experience for generate command"
          },
          {
            "comment": "Replace several internal compiler errors with diagnostics"
          },
          {
            "comment": "Do not allow multi-line non-triple-quoted string literals"
          },
          {
            "comment": "Fix parsing edge cases and optimize parsing slightly"
          }
        ]
      }
    },
    {
      "version": "0.9.0",
      "tag": "@azure-tools/adl_v0.9.0",
      "date": "Tue, 20 Apr 2021 15:23:29 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Fix issue where dynamic namespaces were not evaluated"
          },
          {
            "comment": "Virtualize writting to filesystem to enable programtic usage of adl"
          }
        ],
        "minor": [
          {
            "comment": "Fix parse errors from trailing commas; implement optional prefix | and &"
          }
        ]
      }
    },
    {
      "version": "0.8.0",
      "tag": "@azure-tools/adl_v0.8.0",
      "date": "Tue, 06 Apr 2021 01:23:07 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Add commands to install and uninstall Visual Studio extension"
          },
          {
            "comment": "Enable security and securityDefinitions metadata to be applied to emitted OpenAPI documents; add default ARM security details"
          },
          {
            "comment": "Add api-version parameter to all ARM operations"
          },
          {
            "comment": "Add operations endpoint for ARM services"
          },
          {
            "comment": "Enable creation of $refs to ARM common model and parameter definitions"
          },
          {
            "comment": "Add common ARM parameter definitions for resource operations"
          },
          {
            "comment": "remove parenless decorators"
          }
        ],
        "minor": [
          {
            "comment": "Implement npm libraries"
          },
          {
            "comment": "Implement library import with npm, abstract out rest, openapi, rpaas"
          }
        ]
      }
    },
    {
      "version": "0.7.0",
      "tag": "@azure-tools/adl_v0.7.0",
      "date": "Wed, 31 Mar 2021 22:00:43 GMT",
      "comments": {
        "minor": [
          {
            "comment": "Implement usings statements"
          },
          {
            "comment": "Implement imports"
          },
          {
            "comment": "Improved OpenAPI output for ARM services, including pluralized operation groups and operation tags"
          }
        ],
        "patch": [
          {
            "comment": "Add service-level metadata decorators: @serviceTitle, @serviceVersion, @produces, @consumes, and @armNamespace"
          },
          {
            "comment": "Add support for OpenAPI operation overloads using x-ms-paths"
          }
        ]
      }
    },
    {
      "version": "0.6.0",
      "tag": "@azure-tools/adl_v0.6.0",
      "date": "Fri, 26 Mar 2021 17:06:33 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Emit `readOnly: true` for model properties marked with `@visibility(\"read\")`"
          },
          {
            "comment": "The `visibility` decorator now accepts multiple values; the Swagger emitter will write these out as an `x-ms-mutability` field."
          },
          {
            "comment": "Adding sample generated controller for _____ service"
          },
          {
            "comment": "Add back post operation"
          },
          {
            "comment": "Add standard ARM operation and error model types"
          },
          {
            "comment": "Fix id lookup bug"
          },
          {
            "comment": "Initial check-in of adl spec and generated swagger for _____"
          },
          {
            "comment": "Update _____ spec with user comments."
          },
          {
            "comment": "Fixing formatting to match repo prettier config"
          },
          {
            "comment": "Add `@minValue` and `@maxValue` decorators for specifying the value range of numeric types"
          },
          {
            "comment": "Allow the use of recursive type references in model definitions"
          },
          {
            "comment": "Enable metadata and extensions to be applied to $ref'd schemas"
          },
          {
            "comment": "Add missing metadata for ARM library types"
          }
        ],
        "minor": [
          {
            "comment": "Implement namespace merging, blockless namespaces, and dotted namespaces"
          }
        ]
      }
    },
    {
      "version": "0.5.0",
      "tag": "@azure-tools/adl_v0.5.0",
      "date": "Tue, 23 Mar 2021 01:06:29 GMT",
      "comments": {
        "minor": [
          {
            "comment": "Add `time` intrinsic type"
          },
          {
            "comment": "Rename all date and time intrinsics: zonedDateTime, plainDate, and plainTime"
          },
          {
            "comment": "Add commands to install/uninstall VS Code extension"
          }
        ],
        "patch": [
          {
            "comment": "Automatically mark named enum types with `x-ms-enum` and `modelAsString: true`"
          }
        ]
      }
    },
    {
      "version": "0.4.0",
      "tag": "@azure-tools/adl_v0.4.0",
      "date": "Tue, 16 Mar 2021 23:13:42 GMT",
      "comments": {
        "minor": [
          {
            "comment": "Introduce language server and add live parse errors to VS Code"
          }
        ]
      }
    },
    {
      "version": "0.3.0",
      "tag": "@azure-tools/adl_v0.3.0",
      "date": "Thu, 11 Mar 2021 19:14:29 GMT",
      "comments": {
        "minor": [
          {
            "comment": "Add byte primitive type"
          },
          {
            "comment": "Add datetime primitive type"
          },
          {
            "comment": "Enable HTTP verb decorators to specify a subpath from the parent resource path"
          },
          {
            "comment": "Add float32 primitive type"
          },
          {
            "comment": "Replace `interface` syntax with `namespace` and `op` syntax"
          },
          {
            "comment": "Add new decorator @tags"
          },
          {
            "comment": "Add support for nested namespace definitions and scopes"
          },
          {
            "comment": "Add null intrinsic type, allow unions with it for x-nullable support in OpenAPI emitter"
          },
          {
            "comment": "Add response model types for many standard HTTP responses in rest.adl"
          },
          {
            "comment": "Renamed Ok<T> to OkResponse<T>"
          },
          {
            "comment": "Add syntax highlighting"
          }
        ],
        "none": [
          {
            "comment": "Implement extends, re-implement spread to copy properties, implement visibility framework, move to explicit bodies in responses, and fix various bugs."
          },
          {
            "comment": "Implement nostdlib option"
          }
        ],
        "patch": [
          {
            "comment": "Fix model Foo<T> extends T { }"
          },
          {
            "comment": "Fix resolution of declared parameters in resource sub-paths"
          },
          {
            "comment": "Always output a response description field to ensure valid swagger"
          },
          {
            "comment": "Added new gRPC to ADL examples"
          },
          {
            "comment": "Add back line and column tracking"
          },
          {
            "comment": "Support arrays of arrays and parenthesized expressions"
          },
          {
            "comment": "Remove hardcoded @autorest/core version"
          },
          {
            "comment": "Include source file path in parse error log"
          },
          {
            "comment": "Add body-boolean testserver sample"
          },
          {
            "comment": "Fix bug preventing empty string literals"
          },
          {
            "comment": "Refactor scanner to use less state"
          },
          {
            "comment": "Log source locations with all errors"
          },
          {
            "comment": "Support multiple content types for request bodies"
          }
        ]
      }
    },
    {
      "version": "0.2.1",
      "tag": "@azure-tools/adl_v0.2.1",
      "date": "Thu, 28 Jan 2021 21:30:01 GMT",
      "comments": {
        "patch": [
          {
            "comment": "Fixed standard library decorator module resolution"
          }
        ]
      }
    },
    {
      "version": "0.2.0",
      "tag": "@azure-tools/adl_v0.2.0",
      "date": "Wed, 27 Jan 2021 21:48:34 GMT",
      "comments": {
        "minor": [
          {
            "comment": "Initial ADL compiler preview release"
          }
        ]
      }
    }
  ]
}
