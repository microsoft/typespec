namespace Cadl.Http;

enum AuthType {
  http,
  apiKey,
  oauth2,
  openIdConnect,
}

/**
 * Basic authentication is a simple authentication scheme built into the HTTP protocol.
 * The client sends HTTP requests with the Authorization header that contains the word Basic word followed by a space and a base64-encoded string username:password.
 * For example, to authorize as demo / p@55w0rd the client would send
 * ```
 *  Authorization: Basic ZGVtbzpwQDU1dzByZA==
 * ```
 */
model BasicAuth {
  type: AuthType.http;
  scheme: "basic";
}

/**
 * Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens.
 * The name “Bearer authentication” can be understood as “give access to the bearer of this token.” The bearer token is a cryptic string, usually generated by the server in response to a login request.
 * The client must send this token in the Authorization header when making requests to protected resources:
 * ```
 *   Authorization: Bearer <token>
 * ```
 */
model BearerAuth {
  type: AuthType.http;
  scheme: "bearer";
}

enum ApiKeyLocation {
  header,
  query,
  cookie,
}

/**
 * An API key is a token that a client provides when making API calls. The key can be sent in the query string:
 * ```
 * GET /something?api_key=abcdef12345
 * ```
 *
 * or as a request header
 *
 * ```
 * GET /something HTTP/1.1
 * X-API-Key: abcdef12345
 * ```
 *
 * or as a cookie
 *
 * ```
 * GET /something HTTP/1.1
 * Cookie: X-API-KEY=abcdef12345
 * ```
 */
model ApiKeyAuth<TLocation extends ApiKeyLocation, TName extends string> {
  type: AuthType.apiKey;
  in: TLocation;
  name: TName;
}

/**
 * OAuth 2.0 is an authorization protocol that gives an API client limited access to user data on a web server.
 * OAuth relies on authentication scenarios called flows, which allow the resource owner (user) to share the protected content from the resource server without sharing their credentials.
 * For that purpose, an OAuth 2.0 server issues access tokens that the client applications can use to access protected resources on behalf of the resource owner.
 * For more information about OAuth 2.0, see oauth.net and RFC 6749.
 */
model OAuth2Auth<TFlows extends OAuth2Flow[]> {
  type: AuthType.oauth2;
  flows: TFlows;
}

enum OAuth2FlowType {
  authorizationCode,
  implicit,
  password,
  clientCredentials,
}

alias OAuth2Flow = AuthorizationCodeFlow | ImplicitFlow | PasswordFlow | ClientCredentialsFlow;

/**
 * Authorization Code flow
 */
model AuthorizationCodeFlow {
  type: OAuth2FlowType.authorizationCode;
  authorizationUrl: string;
  tokenUrl: string;
  refreshUrl?: string;
  scopes: string[];
}

/**
 * Implicit flow
 */
model ImplicitFlow {
  type: OAuth2FlowType.implicit;
  authorizationUrl: string;
  refreshUrl?: string;
  scopes: string[];
}

/**
 * Resource Owner Password flow
 */
model PasswordFlow {
  type: OAuth2FlowType.password;
  authorizationUrl: string;
  refreshUrl?: string;
  scopes: string[];
}

/**
 * Client credentials flow
 */
model ClientCredentialsFlow {
  type: OAuth2FlowType.clientCredentials;
  tokenUrl: string;
  refreshUrl?: string;
  scopes: string[];
}
