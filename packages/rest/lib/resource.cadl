import "./http.cadl";
import "../dist/src/index.js";
import "../dist/src/internal-decorators.js";

namespace Cadl.Rest.Resource;

using Cadl.Http;

@doc("The default error response for resource operations.")
model ResourceError {
  @doc("The error code.")
  code: int32;

  @doc("The error message.")
  message: string;
}

@doc("Dynamically gathers keys of the model type T.")
@copyResourceKeyParameters
model KeysOf<T> {}

@doc("Dynamically gathers parent keys of the model type T.")
@copyResourceKeyParameters("parent")
model ParentKeysOf<T> {}

@doc("Represents operation parameters for resource TResource.")
model ResourceParameters<TResource> {
  ...KeysOf<TResource>;
}

@doc("Represents collection operation parameters for resource TResource.")
model ResourceCollectionParameters<TResource> {
  ...ParentKeysOf<TResource>;
}

@Private.validateHasKey(TResource)
@Private.validateIsError(TError)
interface ResourceRead<TResource, TError> {
  @autoRoute
  @doc("Gets an instance of the resource.")
  @readsResource(TResource)
  get(...ResourceParameters<TResource>): TResource | TError;
}

@doc("Resource create operation completed successfully.")
model ResourceCreatedResponse<T> {
  ...CreatedResponse;
  @body body: T;
}

@friendlyName("{name}Update", TResource)
model ResourceCreateOrUpdateModel<TResource> is OptionalProperties<UpdateableProperties<DefaultKeyVisibility<TResource, "read">>> {}

interface ResourceCreateOrUpdate<TResource, TError> {
  @autoRoute
  @doc("Creates or update a instance of the resource.")
  @createsOrUpdatesResource(TResource)
  createOrUpdate(
    ...ResourceParameters<TResource>,
    @body resource: ResourceCreateOrUpdateModel<TResource>
  ): TResource | ResourceCreatedResponse<TResource> | TError;
}

@friendlyName("{name}Create", TResource)
model ResourceCreateModel<TResource> is UpdateableProperties<DefaultKeyVisibility<TResource, "read">> {}

interface ResourceCreate<TResource, TError> {
  @autoRoute
  @doc("Creates a new instance of the resource.")
  @createsResource(TResource)
  create(
    ...ResourceCollectionParameters<TResource>,
    @body resource: ResourceCreateModel<TResource>
  ): TResource | ResourceCreatedResponse<TResource> | TError;
}

@Private.validateHasKey(TResource)
@Private.validateIsError(TError)
interface ResourceUpdate<TResource, TError> {
  @autoRoute
  @doc("Updates an existing instance of the resource.")
  @updatesResource(TResource)
  update(
    ...ResourceParameters<TResource>,
    @body properties: ResourceCreateOrUpdateModel<TResource>
  ): TResource | TError;
}

@doc("Resource deleted successfully.")
model ResourceDeletedResponse {
  @doc("The status code.")
  @statusCode
  _: 200;
}

@Private.validateHasKey(TResource)
@Private.validateIsError(TError)
interface ResourceDelete<TResource, TError> {
  @autoRoute
  @doc("Deletes an existing instance of the resource.")
  @deletesResource(TResource)
  delete(...ResourceParameters<TResource>): ResourceDeletedResponse | TError;
}

@doc("Paged response")
model Page<T> {
  @doc("The items on this page")
  value: T[];

  @doc("The link to the next page of items")
  nextLink?: string;
}

interface ResourceList<TResource, TError> {
  @autoRoute
  @doc("Lists all instances of the resource.")
  @listsResource(TResource)
  list(...ResourceCollectionParameters<TResource>): Page<TResource> | TError;
}

@Private.validateHasKey(TResource)
@Private.validateIsError(TError)
interface ResourceInstanceOperations<TResource, TError>
  extends ResourceRead<TResource, TError>,
    ResourceUpdate<TResource, TError>,
    ResourceDelete<TResource, TError> {}

@Private.validateHasKey(TResource)
@Private.validateIsError(TError)
interface ResourceCollectionOperations<TResource, TError>
  extends ResourceCreate<TResource, TError>,
    ResourceList<TResource, TError> {}

@Private.validateHasKey(TResource)
@Private.validateIsError(TError)
interface ResourceOperations<TResource, TError>
  extends ResourceInstanceOperations<TResource, TError>,
    ResourceCollectionOperations<TResource, TError> {}

@Private.validateHasKey(TResource)
@Private.validateIsError(TError)
interface SingletonResourceRead<TSingleton, TResource, TError> {
  @autoRoute
  @doc("Gets the singleton resource.")
  @segmentOf(TSingleton)
  @readsResource(TSingleton)
  Get(...ResourceParameters<TResource>): TSingleton | TError;
}

@Private.validateHasKey(TResource)
@Private.validateIsError(TError)
interface SingletonResourceUpdate<TSingleton, TResource, TError> {
  @autoRoute
  @doc("Updates the singleton resource.")
  @segmentOf(TSingleton)
  @updatesResource(TSingleton)
  Update(
    ...ResourceParameters<TResource>,

    @body
    properties: ResourceCreateOrUpdateModel<TSingleton>
  ): TSingleton | TError;
}

interface SingletonResourceOperations<TSingleton, TResource, TError>
  extends SingletonResourceRead<TSingleton, TResource, TError>,
    SingletonResourceUpdate<TSingleton, TResource, TError> {}

@Private.validateHasKey(TResource)
@Private.validateIsError(TError)
interface ExtensionResourceRead<TExtension, TResource, TError> {
  @autoRoute
  @doc("Gets an instance of the extension resource.")
  @readsResource(TExtension)
  Get(...ResourceParameters<TResource>, ...ResourceParameters<TExtension>): TExtension | TError;
}

interface ExtensionResourceCreateOrUpdate<TExtension, TResource, TError> {
  @autoRoute
  @doc("Creates or update a instance of the extension resource.")
  @createsOrUpdatesResource(TExtension)
  CreateOrUpdate(
    ...ResourceParameters<TResource>,
    ...ResourceParameters<TExtension>,
    @body resource: ResourceCreateOrUpdateModel<TExtension>
  ): TExtension | ResourceCreatedResponse<TExtension> | TError;
}

interface ExtensionResourceCreate<TExtension, TResource, TError> {
  @autoRoute
  @doc("Creates a new instance of the extension resource.")
  @createsResource(TExtension)
  Create(
    ...ResourceParameters<TResource>,
    @body resource: ResourceCreateModel<TExtension>
  ): TExtension | ResourceCreatedResponse<TExtension> | TError;
}

interface ExtensionResourceUpdate<TExtension, TResource, TError> {
  @autoRoute
  @doc("Updates an existing instance of the extension resource.")
  @updatesResource(TExtension)
  Update(
    ...ResourceParameters<TResource>,
    ...ResourceParameters<TExtension>,

    @body
    properties: ResourceCreateOrUpdateModel<TExtension>
  ): TExtension | TError;
}

interface ExtensionResourceDelete<TExtension, TResource, TError> {
  @autoRoute
  @doc("Deletes an existing instance of the extension resource.")
  @deletesResource(TExtension)
  Delete(
    ...ResourceParameters<TResource>,
    ...ResourceParameters<TExtension>
  ): ResourceDeletedResponse | TError;
}

interface ExtensionResourceList<TExtension, TResource, TError> {
  @autoRoute
  @doc("Lists all instances of the extension resource.")
  @listsResource(TExtension)
  List(
    ...ResourceParameters<TResource>,
    ...ResourceCollectionParameters<TExtension>
  ): Page<TExtension> | TError;
}

interface ExtensionResourceInstanceOperations<TExtension, TResource, TError>
  extends ExtensionResourceRead<TExtension, TResource, TError>,
    ExtensionResourceUpdate<TExtension, TResource, TError>,
    ExtensionResourceDelete<TExtension, TResource, TError> {}

interface ExtensionResourceCollectionOperations<TExtension, TResource, TError>
  extends ExtensionResourceCreate<TExtension, TResource, TError>,
    ExtensionResourceList<TExtension, TResource, TError> {}

interface ExtensionResourceOperations<TExtension, TResource, TError>
  extends ExtensionResourceInstanceOperations<TExtension, TResource, TError>,
    ExtensionResourceCollectionOperations<TExtension, TResource, TError> {}
