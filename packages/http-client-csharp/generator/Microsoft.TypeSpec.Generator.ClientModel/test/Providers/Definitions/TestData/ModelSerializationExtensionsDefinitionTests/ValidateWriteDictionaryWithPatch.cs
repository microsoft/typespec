// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;

namespace Sample
{
    public partial class ModelSerializationExtensions
    {
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        public static void WriteDictionaryWithPatch<T>(this global::System.Text.Json.Utf8JsonWriter writer, global::System.ClientModel.Primitives.ModelReaderWriterOptions options, ref global::System.ClientModel.Primitives.JsonPatch patch, global::System.ReadOnlySpan<byte> propertyName, global::System.ReadOnlySpan<byte> prefix, global::System.Collections.Generic.IDictionary<string, T> dictionary, global::System.Action<global::System.Text.Json.Utf8JsonWriter, T, global::System.ClientModel.Primitives.ModelReaderWriterOptions> write, global::System.Func<T, global::System.ClientModel.Primitives.JsonPatch> getPatchFromItem)
        {
            if (!propertyName.IsEmpty)
            {
                writer.WritePropertyName(propertyName);
            }

            writer.WriteStartObject();
#if NET8_0_OR_GREATER
            const int maxPropertyNameLength = 256;
            global::System.Span<byte> buffer = stackalloc byte[maxPropertyNameLength];
#endif
            foreach (var item in dictionary)
            {
                if (((getPatchFromItem != null) && getPatchFromItem(item.Value).TryGetJson("$"u8, out global::System.ReadOnlyMemory<byte> patchedJson)))
                {
                    if (!patchedJson.IsEmpty)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteRawValue(patchedJson.Span);
                    }
                    continue;
                }

                bool patchContains;
#if NET8_0_OR_GREATER
                int bytesWritten = global::System.Text.Encoding.UTF8.GetBytes(item.Key, buffer);
                patchContains = (bytesWritten == maxPropertyNameLength) ? patch.Contains(prefix, global::System.Text.Encoding.UTF8.GetBytes(item.Key)) : patch.Contains(prefix, buffer.Slice(0, bytesWritten));
#else
                patchContains = patch.Contains(prefix, global::System.Text.Encoding.UTF8.GetBytes(item.Key));
#endif
                if (!patchContains)
                {
                    writer.WritePropertyName(item.Key);
                    write(writer, item.Value, options);
                }
            }

            patch.WriteTo(writer, prefix);
            writer.WriteEndObject();
        }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
    }
}
