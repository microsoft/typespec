// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text;
using System.Text.Json;
using Sample.Models;

namespace Sample
{
    public partial class DynamicModel
    {
        void global::System.ClientModel.Primitives.IJsonModel<global::Sample.Models.DynamicModel>.Write(global::System.Text.Json.Utf8JsonWriter writer, global::System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (Patch.Contains("$"u8))
            {
                writer.WriteRawValue(Patch.GetJson("$"u8));
                return;
            }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.

            writer.WriteStartObject();
            this.JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected virtual void JsonModelWriteCore(global::System.Text.Json.Utf8JsonWriter writer, global::System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            string format = (options.Format == "W") ? ((global::System.ClientModel.Primitives.IPersistableModel<global::Sample.Models.DynamicModel>)this).GetFormatFromOptions(options) : options.Format;
            if ((format != "J"))
            {
                throw new global::System.FormatException($"The model {nameof(global::Sample.Models.DynamicModel)} does not support writing '{format}' format.");
            }
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if ((global::Sample.Optional.IsCollectionDefined(Cats) && !Patch.Contains("$.cats"u8)))
            {
                writer.WritePropertyName("cats"u8);
                writer.WriteStartObject();
#if NET8_0_OR_GREATER
                global::System.Span<byte> buffer = stackalloc byte[256];
#endif
                foreach (var item in Cats)
                {
#if NET8_0_OR_GREATER
                    int bytesWritten = global::System.Text.Encoding.UTF8.GetBytes(item.Key.AsSpan(), buffer);
                    bool patchContains = (bytesWritten == 256) ? Patch.Contains("$.cats"u8, global::System.Text.Encoding.UTF8.GetBytes(item.Key)) : Patch.Contains("$.cats"u8, buffer.Slice(0, bytesWritten));
#else
                    bool patchContains = Patch.Contains("$.cats"u8, global::System.Text.Encoding.UTF8.GetBytes(item.Key));
#endif
                    if (!patchContains)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteObjectValue<global::Sample.Models.Cat>(item.Value, options);
                    }
                }

                Patch.WriteTo(writer, "$.cats"u8);
                writer.WriteEndObject();
            }
            if (!Patch.Contains("$.names"u8))
            {
                writer.WritePropertyName("names"u8);
                writer.WriteStartObject();
#if NET8_0_OR_GREATER
                global::System.Span<byte> buffer = stackalloc byte[256];
#endif
                foreach (var item in Names)
                {
#if NET8_0_OR_GREATER
                    int bytesWritten = global::System.Text.Encoding.UTF8.GetBytes(item.Key.AsSpan(), buffer);
                    bool patchContains = (bytesWritten == 256) ? Patch.Contains("$.names"u8, global::System.Text.Encoding.UTF8.GetBytes(item.Key)) : Patch.Contains("$.names"u8, buffer.Slice(0, bytesWritten));
#else
                    bool patchContains = Patch.Contains("$.names"u8, global::System.Text.Encoding.UTF8.GetBytes(item.Key));
#endif
                    if (!patchContains)
                    {
                        writer.WritePropertyName(item.Key);
                        if ((item.Value == null))
                        {
                            writer.WriteNullValue();
                            continue;
                        }
                        writer.WriteStringValue(item.Value);
                    }
                }

                Patch.WriteTo(writer, "$.names"u8);
                writer.WriteEndObject();
            }
            if ((global::Sample.Optional.IsCollectionDefined(OptionalNames) && !Patch.Contains("$.optionalNames"u8)))
            {
                writer.WritePropertyName("optionalNames"u8);
                writer.WriteStartObject();
#if NET8_0_OR_GREATER
                global::System.Span<byte> buffer = stackalloc byte[256];
#endif
                foreach (var item in OptionalNames)
                {
#if NET8_0_OR_GREATER
                    int bytesWritten = global::System.Text.Encoding.UTF8.GetBytes(item.Key.AsSpan(), buffer);
                    bool patchContains = (bytesWritten == 256) ? Patch.Contains("$.optionalNames"u8, global::System.Text.Encoding.UTF8.GetBytes(item.Key)) : Patch.Contains("$.optionalNames"u8, buffer.Slice(0, bytesWritten));
#else
                    bool patchContains = Patch.Contains("$.optionalNames"u8, global::System.Text.Encoding.UTF8.GetBytes(item.Key));
#endif
                    if (!patchContains)
                    {
                        writer.WritePropertyName(item.Key);
                        if ((item.Value == null))
                        {
                            writer.WriteNullValue();
                            continue;
                        }
                        writer.WriteStringValue(item.Value);
                    }
                }

                Patch.WriteTo(writer, "$.optionalNames"u8);
                writer.WriteEndObject();
            }

            Patch.WriteTo(writer);
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        }

        global::System.BinaryData global::System.ClientModel.Primitives.IPersistableModel<global::Sample.Models.DynamicModel>.Write(global::System.ClientModel.Primitives.ModelReaderWriterOptions options) => this.PersistableModelWriteCore(options);
    }
}
