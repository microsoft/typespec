// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;
using System.Collections.Generic;
using Sample.Models;

namespace Sample
{
    public partial class TestClient
    {
        internal global::System.ClientModel.Primitives.PipelineMessage CreateSampleOpRequest(global::System.Collections.Generic.IEnumerable<string> p1Explode, global::System.Collections.Generic.IEnumerable<string> p1, global::System.Collections.Generic.IEnumerable<int> p2Explode, global::System.Collections.Generic.IEnumerable<int> p2, global::System.Collections.Generic.IDictionary<string, int> p3Explode, global::System.Collections.Generic.IDictionary<string, int> p3, global::System.Collections.Generic.IEnumerable<global::Sample.Models.Foo> p4Explode, global::System.Collections.Generic.IEnumerable<global::Sample.Models.IntFoo> p5Explode, global::System.Collections.Generic.IDictionary<string, global::Sample.Models.Foo> p6Explode, global::System.Collections.Generic.IDictionary<string, global::Sample.Models.IntFoo> p7Explode, global::System.Collections.Generic.IEnumerable<global::Sample.Models.FloatFoo> p8Explode, global::System.Collections.Generic.IEnumerable<global::Sample.Models.DoubleFoo> p9Explode, string optionalParam, global::System.ClientModel.Primitives.RequestOptions options)
        {
            global::Sample.ClientUriBuilder uri = new global::Sample.ClientUriBuilder();
            uri.Reset(_endpoint);
            if (((p1Explode != null) && !((p1Explode is global::Sample.ChangeTrackingList<string> changeTrackingList) && changeTrackingList.IsUndefined)))
            {
                foreach (var @param in p1Explode)
                {
                    uri.AppendQuery("p1Explode", @param, true);
                }
            }
            if (((p1 != null) && !((p1 is global::Sample.ChangeTrackingList<string> changeTrackingList0) && changeTrackingList0.IsUndefined)))
            {
                uri.AppendQueryDelimited("p1", p1, "|", null, true);
            }
            if (((p2Explode != null) && !((p2Explode is global::Sample.ChangeTrackingList<int> changeTrackingList1) && changeTrackingList1.IsUndefined)))
            {
                foreach (var @param in p2Explode)
                {
                    uri.AppendQuery("p2Explode", @param, true);
                }
            }
            if (((p2 != null) && !((p2 is global::Sample.ChangeTrackingList<int> changeTrackingList2) && changeTrackingList2.IsUndefined)))
            {
                uri.AppendQueryDelimited("p2", p2, " ", null, true);
            }
            if ((optionalParam != null))
            {
                uri.AppendQuery("optionalParam", optionalParam, true);
            }
            if (((p3Explode != null) && !((p3Explode is global::Sample.ChangeTrackingDictionary<string, int> changeTrackingDictionary) && changeTrackingDictionary.IsUndefined)))
            {
                foreach (var @param in p3Explode)
                {
                    uri.AppendQuery(@param.Key, @param.Value, true);
                }
            }
            if (((p3 != null) && !((p3 is global::Sample.ChangeTrackingDictionary<string, int> changeTrackingDictionary0) && changeTrackingDictionary0.IsUndefined)))
            {
                global::System.Collections.Generic.List<object> list = new global::System.Collections.Generic.List<object>();
                foreach (var @param in p3)
                {
                    list.Add(@param.Key);
                    list.Add(@param.Value);
                }
                uri.AppendQueryDelimited("p3", list, ",", null, true);
            }
            if (((p4Explode != null) && !((p4Explode is global::Sample.ChangeTrackingList<global::Sample.Models.Foo> changeTrackingList3) && changeTrackingList3.IsUndefined)))
            {
                foreach (var @param in p4Explode)
                {
                    uri.AppendQuery("p4Explode", @param.ToSerialString(), true);
                }
            }
            if (((p5Explode != null) && !((p5Explode is global::Sample.ChangeTrackingList<global::Sample.Models.IntFoo> changeTrackingList4) && changeTrackingList4.IsUndefined)))
            {
                foreach (var @param in p5Explode)
                {
                    uri.AppendQuery("p5Explode", ((int)@param), true);
                }
            }
            if (((p6Explode != null) && !((p6Explode is global::Sample.ChangeTrackingDictionary<string, global::Sample.Models.Foo> changeTrackingDictionary1) && changeTrackingDictionary1.IsUndefined)))
            {
                foreach (var @param in p6Explode)
                {
                    uri.AppendQuery(@param.Key, @param.ToSerialString(), true);
                }
            }
            if (((p7Explode != null) && !((p7Explode is global::Sample.ChangeTrackingDictionary<string, global::Sample.Models.IntFoo> changeTrackingDictionary2) && changeTrackingDictionary2.IsUndefined)))
            {
                foreach (var @param in p7Explode)
                {
                    uri.AppendQuery(@param.Key, ((int)@param), true);
                }
            }
            if (((p8Explode != null) && !((p8Explode is global::Sample.ChangeTrackingList<global::Sample.Models.FloatFoo> changeTrackingList5) && changeTrackingList5.IsUndefined)))
            {
                foreach (var @param in p8Explode)
                {
                    uri.AppendQuery("p8Explode", ((float)@param), true);
                }
            }
            if (((p9Explode != null) && !((p9Explode is global::Sample.ChangeTrackingList<global::Sample.Models.DoubleFoo> changeTrackingList6) && changeTrackingList6.IsUndefined)))
            {
                foreach (var @param in p9Explode)
                {
                    uri.AppendQuery("p9Explode", ((double)@param), true);
                }
            }
            global::System.ClientModel.Primitives.PipelineMessage message = Pipeline.CreateMessage(uri.ToUri(), "GET", PipelineMessageClassifier200);
            global::System.ClientModel.Primitives.PipelineRequest request = message.Request;
            message.Apply(options);
            return message;
        }
    }
}
