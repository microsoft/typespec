// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Microsoft.Generator.CSharp.Expressions;
using Microsoft.Generator.CSharp.Providers;
using Microsoft.Generator.CSharp.Snippets;
using Microsoft.Generator.CSharp.Statements;
using Moq;
using NUnit.Framework;

namespace Microsoft.Generator.CSharp.Tests
{
    public class CodeWriterExtensionTests
    {
        private readonly string _mocksFolder = "Mocks";
        private readonly string _licenseString = "// License string";
        private readonly string _autoGenerated = "// <auto-generated/>";
        private readonly string _nullableDisable = "#nullable disable";
        private string? _header;

        [OneTimeSetUp]
        public void Setup()
        {
            Mock<ApiTypes> apiTypes = new Mock<ApiTypes>();
            Mock<ExtensibleSnippets> extensibleSnippets = new Mock<ExtensibleSnippets>();
            apiTypes.SetupGet(x => x.ResponseParameterName).Returns("result");

            string outputFolder = "./outputFolder";
            string projectPath = outputFolder;

            _header = new StringBuilder()
                .Append(_licenseString).Append(CodeWriterTests.NewLine)
                .Append(CodeWriterTests.NewLine)
                .Append(_autoGenerated).Append(CodeWriterTests.NewLine)
                .Append(CodeWriterTests.NewLine)
                .Append(_nullableDisable).Append(CodeWriterTests.NewLine)
                .Append(CodeWriterTests.NewLine)
                .ToString();

            var configFilePath = Path.Combine(AppContext.BaseDirectory, _mocksFolder);
            // initialize the singleton instance of the plugin
            _ = new MockCodeModelPlugin(new GeneratorContext(Configuration.Load(configFilePath)));
        }

        // Test that an exception is not thrown when the extension methods are null.
        [Test]
        public void NoExtensionMethods()
        {
            using var writer = new CodeWriter();
            Assert.IsNotNull(writer);
        }

        // Test the Write method for a cast expression using the default implementation.
        [TestCase(typeof(int), 22.2, "((int)22.2)")]
        [TestCase(typeof(double), 22, "((double)22)")]
        [TestCase(typeof(string), 22, "((string)22)")]
        public void TestWriteValueExpression_DefaultCastExpression(Type type, object inner, string expectedWritten)
        {
            var castExpression = new CastExpression(Snippet.Literal(inner), type);
            using var codeWriter = new CodeWriter();
            castExpression.Write(codeWriter);

            var sb = new StringBuilder();
            sb.Append(_header);
            sb.Append(expectedWritten);

            Assert.AreEqual(sb.ToString(), codeWriter.ToString());
        }

        // Test the Write method for a custom expression.
        [Test]
        public void TestWriteValueExpression_CustomExpression()
        {
            var mockCastExpression = new MockExpression();
            using var codeWriter = new CodeWriter();
            mockCastExpression.Write(codeWriter);

            var sb = new StringBuilder();
            sb.Append(_header);
            sb.Append("Custom implementation");

            Assert.AreEqual(sb.ToString(), codeWriter.ToString());
        }

        // Test the Write method for a CollectionInitializerExpression using the default implementation.
        [TestCase("foo", "{ \"foo\" }")]
        [TestCase("bar", "{ \"bar\" }")]
        public void TestWriteValueExpression_DefaultCollectionInitializerExpression(string literal, string expectedWritten)
        {
            var stringLiteralExpression = Snippet.Literal(literal);
            CollectionInitializerExpression expression = new CollectionInitializerExpression(stringLiteralExpression);
            using var codeWriter = new CodeWriter();
            expression.Write(codeWriter);

            var sb = new StringBuilder();
            sb.Append(_header);
            sb.Append(expectedWritten);

            Assert.AreEqual(sb.ToString(), codeWriter.ToString());
        }
    }
}
