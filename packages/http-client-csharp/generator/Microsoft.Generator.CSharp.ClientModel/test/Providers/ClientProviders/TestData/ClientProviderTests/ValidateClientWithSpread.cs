// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading.Tasks;
using sample.namespace.Models;

namespace sample.namespace
{
    /// <summary></summary>
    public partial class TestClient
    {
        /// <summary>
        /// [Protocol Method] CreateMessage description
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="global::System.ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="global::System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual global::System.ClientModel.ClientResult CreateMessage(global::System.ClientModel.BinaryContent content, global::System.ClientModel.Primitives.RequestOptions options)
        {
            global::sample.namespace.Argument.AssertNotNull(content, nameof(content));

            using global::System.ClientModel.Primitives.PipelineMessage message = this.CreateCreateMessageRequest(content, options);
            return global::System.ClientModel.ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] CreateMessage description
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="global::System.ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="global::System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async global::System.Threading.Tasks.Task<global::System.ClientModel.ClientResult> CreateMessageAsync(global::System.ClientModel.BinaryContent content, global::System.ClientModel.Primitives.RequestOptions options)
        {
            global::sample.namespace.Argument.AssertNotNull(content, nameof(content));

            using global::System.ClientModel.Primitives.PipelineMessage message = this.CreateCreateMessageRequest(content, options);
            return global::System.ClientModel.ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> CreateMessage description. </summary>
        /// <param name="p1"> Description for p1. </param>
        /// <exception cref="global::System.ArgumentNullException"> <paramref name="p1"/> is null. </exception>
        /// <exception cref="global::System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual global::System.ClientModel.ClientResult CreateMessage(string p1)
        {
            global::sample.namespace.Argument.AssertNotNull(p1, nameof(p1));

            global::sample.namespace.Models.SpreadModel spreadModel = new global::sample.namespace.Models.SpreadModel(p1, null);
            return this.CreateMessage(spreadModel, null);
        }

        /// <summary> CreateMessage description. </summary>
        /// <param name="p1"> Description for p1. </param>
        /// <exception cref="global::System.ArgumentNullException"> <paramref name="p1"/> is null. </exception>
        /// <exception cref="global::System.ClientModel.ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async global::System.Threading.Tasks.Task<global::System.ClientModel.ClientResult> CreateMessageAsync(string p1)
        {
            global::sample.namespace.Argument.AssertNotNull(p1, nameof(p1));

            global::sample.namespace.Models.SpreadModel spreadModel = new global::sample.namespace.Models.SpreadModel(p1, null);
            return await this.CreateMessageAsync(spreadModel, null).ConfigureAwait(false);
        }
    }
}
