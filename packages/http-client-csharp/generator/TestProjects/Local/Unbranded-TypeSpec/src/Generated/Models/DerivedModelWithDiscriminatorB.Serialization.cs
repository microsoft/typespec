// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace UnbrandedTypeSpec.Models
{
    /// <summary></summary>
    public partial class DerivedModelWithDiscriminatorB : IJsonModel<DerivedModelWithDiscriminatorB>
    {
        internal DerivedModelWithDiscriminatorB(string discriminatorProperty, string optionalPropertyOnBase, int requiredPropertyOnBase, IDictionary<string, BinaryData> serializedAdditionalRawData, int requiredInt) : base(discriminatorProperty, optionalPropertyOnBase, requiredPropertyOnBase, serializedAdditionalRawData)
        {
            RequiredInt = requiredInt;
        }

        internal DerivedModelWithDiscriminatorB()
        {
        }

        void IJsonModel<DerivedModelWithDiscriminatorB>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DerivedModelWithDiscriminatorB>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DerivedModelWithDiscriminatorB)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("requiredInt"u8);
            writer.WriteNumberValue(RequiredInt);
        }

        DerivedModelWithDiscriminatorB IJsonModel<DerivedModelWithDiscriminatorB>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (DerivedModelWithDiscriminatorB)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BaseModelWithDiscriminator JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DerivedModelWithDiscriminatorB>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DerivedModelWithDiscriminatorB)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDerivedModelWithDiscriminatorB(document.RootElement, options);
        }

        internal static DerivedModelWithDiscriminatorB DeserializeDerivedModelWithDiscriminatorB(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int requiredInt = default;
            string discriminatorProperty = default;
            string optionalPropertyOnBase = default;
            int requiredPropertyOnBase = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("requiredInt"u8))
                {
                    requiredInt = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("discriminatorProperty"u8))
                {
                    discriminatorProperty = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("optionalPropertyOnBase"u8))
                {
                    optionalPropertyOnBase = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("requiredPropertyOnBase"u8))
                {
                    requiredPropertyOnBase = prop.Value.GetInt32();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new DerivedModelWithDiscriminatorB(discriminatorProperty, optionalPropertyOnBase, requiredPropertyOnBase, serializedAdditionalRawData, requiredInt);
        }

        BinaryData IPersistableModel<DerivedModelWithDiscriminatorB>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DerivedModelWithDiscriminatorB>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(DerivedModelWithDiscriminatorB)} does not support writing '{options.Format}' format.");
            }
        }

        DerivedModelWithDiscriminatorB IPersistableModel<DerivedModelWithDiscriminatorB>.Create(BinaryData data, ModelReaderWriterOptions options) => (DerivedModelWithDiscriminatorB)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BaseModelWithDiscriminator PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DerivedModelWithDiscriminatorB>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeDerivedModelWithDiscriminatorB(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DerivedModelWithDiscriminatorB)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DerivedModelWithDiscriminatorB>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="derivedModelWithDiscriminatorB"> The <see cref="DerivedModelWithDiscriminatorB"/> to serialize into <see cref="BinaryContent"/>. </param>
        public static implicit operator BinaryContent(DerivedModelWithDiscriminatorB derivedModelWithDiscriminatorB)
        {
            throw new NotImplementedException("Not implemented");
        }

        /// <param name="result"> The <see cref="ClientResult"/> to deserialize the <see cref="DerivedModelWithDiscriminatorB"/> from. </param>
        public static explicit operator DerivedModelWithDiscriminatorB(ClientResult result)
        {
            throw new NotImplementedException("Not implemented");
        }
    }
}
