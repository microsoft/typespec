// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading.Tasks;
using UnbrandedTypeSpec.Models;

namespace UnbrandedTypeSpec
{
    /// <summary></summary>
    public partial class UnbrandedTypeSpecClient
    {
        private readonly Uri _endpoint;
        private const string AuthorizationHeader = "my-api-key";
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly ApiKeyCredential _keyCredential;

        /// <summary> Initializes a new instance of UnbrandedTypeSpecClient for mocking. </summary>
        protected UnbrandedTypeSpecClient()
        {
        }

        /// <summary> Initializes a new instance of UnbrandedTypeSpecClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="keyCredential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="keyCredential"/> is null. </exception>
        public UnbrandedTypeSpecClient(Uri endpoint, ApiKeyCredential keyCredential) : this(endpoint, keyCredential, new UnbrandedTypeSpecClientOptions())
        {
        }

        /// <summary> Initializes a new instance of UnbrandedTypeSpecClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="keyCredential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="keyCredential"/> is null. </exception>
        public UnbrandedTypeSpecClient(Uri endpoint, ApiKeyCredential keyCredential, UnbrandedTypeSpecClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(keyCredential, nameof(keyCredential));

            options ??= new UnbrandedTypeSpecClientOptions();

            _endpoint = endpoint;
            _keyCredential = keyCredential;
            Pipeline = ClientPipeline.Create(options, Array.Empty<PipelinePolicy>(), new PipelinePolicy[] { ApiKeyAuthenticationPolicy.CreateHeaderApiKeyPolicy(_keyCredential, AuthorizationHeader) }, Array.Empty<PipelinePolicy>());
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] Return hi
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="headParameter"></param>
        /// <param name="queryParameter"></param>
        /// <param name="optionalQuery"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="headParameter"/> or <paramref name="queryParameter"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooSayHi(string headParameter, string queryParameter, string optionalQuery, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method SayHi.");
                Argument.AssertNotNull(headParameter, nameof(headParameter));
                Argument.AssertNotNull(queryParameter, nameof(queryParameter));

                using PipelineMessage message = CreateSayHiRequest(headParameter, queryParameter, optionalQuery, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method SayHi: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method SayHi.");
            }
        }

        /// <summary>
        /// [Protocol Method] Return hi
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="headParameter"></param>
        /// <param name="queryParameter"></param>
        /// <param name="optionalQuery"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="headParameter"/> or <paramref name="queryParameter"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooSayHiAsync(string headParameter, string queryParameter, string optionalQuery, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method SayHiAsync.");
                Argument.AssertNotNull(headParameter, nameof(headParameter));
                Argument.AssertNotNull(queryParameter, nameof(queryParameter));

                using PipelineMessage message = CreateSayHiRequest(headParameter, queryParameter, optionalQuery, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method SayHiAsync: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method SayHiAsync.");
            }
        }

        /// <summary> Return hi. </summary>
        /// <param name="headParameter"></param>
        /// <param name="queryParameter"></param>
        /// <param name="optionalQuery"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="headParameter"/> or <paramref name="queryParameter"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Thing> FooSayHi(string headParameter, string queryParameter, string optionalQuery)
        {
            Argument.AssertNotNull(headParameter, nameof(headParameter));
            Argument.AssertNotNull(queryParameter, nameof(queryParameter));

            ClientResult result = FooSayHi(headParameter, queryParameter, optionalQuery, null);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> Return hi. </summary>
        /// <param name="headParameter"></param>
        /// <param name="queryParameter"></param>
        /// <param name="optionalQuery"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="headParameter"/> or <paramref name="queryParameter"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Thing>> FooSayHiAsync(string headParameter, string queryParameter, string optionalQuery)
        {
            Argument.AssertNotNull(headParameter, nameof(headParameter));
            Argument.AssertNotNull(queryParameter, nameof(queryParameter));

            ClientResult result = await FooSayHiAsync(headParameter, queryParameter, optionalQuery, null).ConfigureAwait(false);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Return hi again
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/> or <paramref name="p2"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooHelloAgain(string p1, string p2, BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method HelloAgain.");
                Argument.AssertNotNull(p1, nameof(p1));
                Argument.AssertNotNull(p2, nameof(p2));

                using PipelineMessage message = CreateHelloAgainRequest(p1, p2, content, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method HelloAgain: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method HelloAgain.");
            }
        }

        /// <summary>
        /// [Protocol Method] Return hi again
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/> or <paramref name="p2"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooHelloAgainAsync(string p1, string p2, BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method HelloAgainAsync.");
                Argument.AssertNotNull(p1, nameof(p1));
                Argument.AssertNotNull(p2, nameof(p2));

                using PipelineMessage message = CreateHelloAgainRequest(p1, p2, content, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method HelloAgainAsync: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method HelloAgainAsync.");
            }
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <param name="action"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/>, <paramref name="p2"/> or <paramref name="action"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<RoundTripModel> FooHelloAgain(string p1, string p2, RoundTripModel action)
        {
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(p2, nameof(p2));
            Argument.AssertNotNull(action, nameof(action));

            ClientResult result = FooHelloAgain(p1, p2, action, null);
            return ClientResult.FromValue((RoundTripModel)result, result.GetRawResponse());
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <param name="action"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/>, <paramref name="p2"/> or <paramref name="action"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<RoundTripModel>> FooHelloAgainAsync(string p1, string p2, RoundTripModel action)
        {
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(p2, nameof(p2));
            Argument.AssertNotNull(action, nameof(action));

            ClientResult result = await FooHelloAgainAsync(p1, p2, action, null).ConfigureAwait(false);
            return ClientResult.FromValue((RoundTripModel)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Return hi again
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/> or <paramref name="p2"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooNoContentType(string p1, string p2, BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method NoContentType.");
                Argument.AssertNotNull(p1, nameof(p1));
                Argument.AssertNotNull(p2, nameof(p2));

                using PipelineMessage message = CreateNoContentTypeRequest(p1, p2, content, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method NoContentType: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method NoContentType.");
            }
        }

        /// <summary>
        /// [Protocol Method] Return hi again
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/> or <paramref name="p2"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooNoContentTypeAsync(string p1, string p2, BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method NoContentTypeAsync.");
                Argument.AssertNotNull(p1, nameof(p1));
                Argument.AssertNotNull(p2, nameof(p2));

                using PipelineMessage message = CreateNoContentTypeRequest(p1, p2, content, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method NoContentTypeAsync: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method NoContentTypeAsync.");
            }
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <param name="action"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/>, <paramref name="p2"/> or <paramref name="action"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<RoundTripModel> FooNoContentType(string p1, string p2, RoundTripModel action)
        {
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(p2, nameof(p2));
            Argument.AssertNotNull(action, nameof(action));

            ClientResult result = FooNoContentType(p1, p2, action, null);
            return ClientResult.FromValue((RoundTripModel)result, result.GetRawResponse());
        }

        /// <summary> Return hi again. </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <param name="action"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="p1"/>, <paramref name="p2"/> or <paramref name="action"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<RoundTripModel>> FooNoContentTypeAsync(string p1, string p2, RoundTripModel action)
        {
            Argument.AssertNotNull(p1, nameof(p1));
            Argument.AssertNotNull(p2, nameof(p2));
            Argument.AssertNotNull(action, nameof(action));

            ClientResult result = await FooNoContentTypeAsync(p1, p2, action, null).ConfigureAwait(false);
            return ClientResult.FromValue((RoundTripModel)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Return hi in demo2
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooHelloDemo2(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method HelloDemo2.");
                using PipelineMessage message = CreateHelloDemo2Request(options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method HelloDemo2: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method HelloDemo2.");
            }
        }

        /// <summary>
        /// [Protocol Method] Return hi in demo2
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooHelloDemo2Async(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method HelloDemo2Async.");
                using PipelineMessage message = CreateHelloDemo2Request(options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method HelloDemo2Async: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method HelloDemo2Async.");
            }
        }

        /// <summary> Return hi in demo2. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Thing> FooHelloDemo2()
        {
            ClientResult result = FooHelloDemo2(null);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> Return hi in demo2. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Thing>> FooHelloDemo2Async()
        {
            ClientResult result = await FooHelloDemo2Async(null).ConfigureAwait(false);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Create with literal value
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooCreateLiteral(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method CreateLiteral.");
                using PipelineMessage message = CreateCreateLiteralRequest(content, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method CreateLiteral: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method CreateLiteral.");
            }
        }

        /// <summary>
        /// [Protocol Method] Create with literal value
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooCreateLiteralAsync(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method CreateLiteralAsync.");
                using PipelineMessage message = CreateCreateLiteralRequest(content, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method CreateLiteralAsync: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method CreateLiteralAsync.");
            }
        }

        /// <summary> Create with literal value. </summary>
        /// <param name="body"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Thing> FooCreateLiteral(Thing body)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = FooCreateLiteral(body, null);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> Create with literal value. </summary>
        /// <param name="body"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Thing>> FooCreateLiteralAsync(Thing body)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = await FooCreateLiteralAsync(body, null).ConfigureAwait(false);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Send literal parameters
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooHelloLiteral(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method HelloLiteral.");
                using PipelineMessage message = CreateHelloLiteralRequest(options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method HelloLiteral: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method HelloLiteral.");
            }
        }

        /// <summary>
        /// [Protocol Method] Send literal parameters
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooHelloLiteralAsync(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method HelloLiteralAsync.");
                using PipelineMessage message = CreateHelloLiteralRequest(options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method HelloLiteralAsync: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method HelloLiteralAsync.");
            }
        }

        /// <summary> Send literal parameters. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Thing> FooHelloLiteral()
        {
            ClientResult result = FooHelloLiteral(null);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> Send literal parameters. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Thing>> FooHelloLiteralAsync()
        {
            ClientResult result = await FooHelloLiteralAsync(null).ConfigureAwait(false);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] top level method
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="action"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="action"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooTopAction(DateTimeOffset action, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method TopAction.");
                Argument.AssertNotNull(action, nameof(action));

                using PipelineMessage message = CreateTopActionRequest(action, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method TopAction: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TopAction.");
            }
        }

        /// <summary>
        /// [Protocol Method] top level method
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="action"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="action"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooTopActionAsync(DateTimeOffset action, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method TopActionAsync.");
                Argument.AssertNotNull(action, nameof(action));

                using PipelineMessage message = CreateTopActionRequest(action, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method TopActionAsync: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TopActionAsync.");
            }
        }

        /// <summary> top level method. </summary>
        /// <param name="action"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="action"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Thing> FooTopAction(DateTimeOffset action)
        {
            Argument.AssertNotNull(action, nameof(action));

            ClientResult result = FooTopAction(action, null);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> top level method. </summary>
        /// <param name="action"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="action"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Thing>> FooTopActionAsync(DateTimeOffset action)
        {
            Argument.AssertNotNull(action, nameof(action));

            ClientResult result = await FooTopActionAsync(action, null).ConfigureAwait(false);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] top level method2
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooTopAction2(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method TopAction2.");
                using PipelineMessage message = CreateTopAction2Request(options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method TopAction2: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TopAction2.");
            }
        }

        /// <summary>
        /// [Protocol Method] top level method2
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooTopAction2Async(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method TopAction2Async.");
                using PipelineMessage message = CreateTopAction2Request(options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method TopAction2Async: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method TopAction2Async.");
            }
        }

        /// <summary> top level method2. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Thing> FooTopAction2()
        {
            ClientResult result = FooTopAction2(null);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> top level method2. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Thing>> FooTopAction2Async()
        {
            ClientResult result = await FooTopAction2Async(null).ConfigureAwait(false);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] top level patch
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooPatchAction(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method PatchAction.");
                using PipelineMessage message = CreatePatchActionRequest(content, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method PatchAction: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method PatchAction.");
            }
        }

        /// <summary>
        /// [Protocol Method] top level patch
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooPatchActionAsync(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method PatchActionAsync.");
                using PipelineMessage message = CreatePatchActionRequest(content, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method PatchActionAsync: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method PatchActionAsync.");
            }
        }

        /// <summary> top level patch. </summary>
        /// <param name="body"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Thing> FooPatchAction(Thing body)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = FooPatchAction(body, null);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> top level patch. </summary>
        /// <param name="body"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Thing>> FooPatchActionAsync(Thing body)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = await FooPatchActionAsync(body, null).ConfigureAwait(false);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] body parameter without body decorator
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooAnonymousBody(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method AnonymousBody.");
                using PipelineMessage message = CreateAnonymousBodyRequest(options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method AnonymousBody: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method AnonymousBody.");
            }
        }

        /// <summary>
        /// [Protocol Method] body parameter without body decorator
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooAnonymousBodyAsync(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method AnonymousBodyAsync.");
                using PipelineMessage message = CreateAnonymousBodyRequest(options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method AnonymousBodyAsync: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method AnonymousBodyAsync.");
            }
        }

        /// <summary> body parameter without body decorator. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Thing> FooAnonymousBody()
        {
            ClientResult result = FooAnonymousBody(null);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> body parameter without body decorator. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Thing>> FooAnonymousBodyAsync()
        {
            ClientResult result = await FooAnonymousBodyAsync(null).ConfigureAwait(false);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Model can have its friendly name
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooFriendlyModel(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method FriendlyModel.");
                using PipelineMessage message = CreateFriendlyModelRequest(options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method FriendlyModel: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method FriendlyModel.");
            }
        }

        /// <summary>
        /// [Protocol Method] Model can have its friendly name
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooFriendlyModelAsync(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method FriendlyModelAsync.");
                using PipelineMessage message = CreateFriendlyModelRequest(options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method FriendlyModelAsync: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method FriendlyModelAsync.");
            }
        }

        /// <summary> Model can have its friendly name. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Friend> FooFriendlyModel()
        {
            ClientResult result = FooFriendlyModel(null);
            return ClientResult.FromValue((Friend)result, result.GetRawResponse());
        }

        /// <summary> Model can have its friendly name. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Friend>> FooFriendlyModelAsync()
        {
            ClientResult result = await FooFriendlyModelAsync(null).ConfigureAwait(false);
            return ClientResult.FromValue((Friend)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] addTimeHeader
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="repeatabilityFirstSent"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooAddTimeHeader(DateTimeOffset repeatabilityFirstSent, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method AddTimeHeader.");
                using PipelineMessage message = CreateAddTimeHeaderRequest(repeatabilityFirstSent, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method AddTimeHeader: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method AddTimeHeader.");
            }
        }

        /// <summary>
        /// [Protocol Method] addTimeHeader
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="repeatabilityFirstSent"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooAddTimeHeaderAsync(DateTimeOffset repeatabilityFirstSent, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method AddTimeHeaderAsync.");
                using PipelineMessage message = CreateAddTimeHeaderRequest(repeatabilityFirstSent, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method AddTimeHeaderAsync: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method AddTimeHeaderAsync.");
            }
        }

        /// <summary> addTimeHeader. </summary>
        /// <param name="repeatabilityFirstSent"></param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult FooAddTimeHeader(DateTimeOffset repeatabilityFirstSent)
        {
            return FooAddTimeHeader(repeatabilityFirstSent, null);
        }

        /// <summary> addTimeHeader. </summary>
        /// <param name="repeatabilityFirstSent"></param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> FooAddTimeHeaderAsync(DateTimeOffset repeatabilityFirstSent)
        {
            return await FooAddTimeHeaderAsync(repeatabilityFirstSent, null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Model can have its projected name
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooProjectedNameModel(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method ProjectedNameModel.");
                using PipelineMessage message = CreateProjectedNameModelRequest(options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method ProjectedNameModel: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method ProjectedNameModel.");
            }
        }

        /// <summary>
        /// [Protocol Method] Model can have its projected name
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooProjectedNameModelAsync(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method ProjectedNameModelAsync.");
                using PipelineMessage message = CreateProjectedNameModelRequest(options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method ProjectedNameModelAsync: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method ProjectedNameModelAsync.");
            }
        }

        /// <summary> Model can have its projected name. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<ProjectedModel> FooProjectedNameModel()
        {
            ClientResult result = FooProjectedNameModel(null);
            return ClientResult.FromValue((ProjectedModel)result, result.GetRawResponse());
        }

        /// <summary> Model can have its projected name. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<ProjectedModel>> FooProjectedNameModelAsync()
        {
            ClientResult result = await FooProjectedNameModelAsync(null).ConfigureAwait(false);
            return ClientResult.FromValue((ProjectedModel)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] return anonymous model
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooReturnsAnonymousModel(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method ReturnsAnonymousModel.");
                using PipelineMessage message = CreateReturnsAnonymousModelRequest(options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method ReturnsAnonymousModel: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method ReturnsAnonymousModel.");
            }
        }

        /// <summary>
        /// [Protocol Method] return anonymous model
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooReturnsAnonymousModelAsync(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method ReturnsAnonymousModelAsync.");
                using PipelineMessage message = CreateReturnsAnonymousModelRequest(options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method ReturnsAnonymousModelAsync: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method ReturnsAnonymousModelAsync.");
            }
        }

        /// <summary> return anonymous model. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<ReturnsAnonymousModelResponse> FooReturnsAnonymousModel()
        {
            ClientResult result = FooReturnsAnonymousModel(null);
            return ClientResult.FromValue((ReturnsAnonymousModelResponse)result, result.GetRawResponse());
        }

        /// <summary> return anonymous model. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<ReturnsAnonymousModelResponse>> FooReturnsAnonymousModelAsync()
        {
            ClientResult result = await FooReturnsAnonymousModelAsync(null).ConfigureAwait(false);
            return ClientResult.FromValue((ReturnsAnonymousModelResponse)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] get extensible enum
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accept"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accept"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooGetUnknownValue(string accept, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method GetUnknownValue.");
                Argument.AssertNotNull(accept, nameof(accept));

                using PipelineMessage message = CreateGetUnknownValueRequest(accept, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method GetUnknownValue: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method GetUnknownValue.");
            }
        }

        /// <summary>
        /// [Protocol Method] get extensible enum
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accept"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accept"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooGetUnknownValueAsync(string accept, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method GetUnknownValueAsync.");
                Argument.AssertNotNull(accept, nameof(accept));

                using PipelineMessage message = CreateGetUnknownValueRequest(accept, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method GetUnknownValueAsync: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method GetUnknownValueAsync.");
            }
        }

        /// <summary> get extensible enum. </summary>
        /// <param name="accept"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="accept"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<string> FooGetUnknownValue(string accept)
        {
            Argument.AssertNotNull(accept, nameof(accept));

            ClientResult result = FooGetUnknownValue(accept, null);
            return ClientResult.FromValue(result.GetRawResponse().Content.ToString(), result.GetRawResponse());
        }

        /// <summary> get extensible enum. </summary>
        /// <param name="accept"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="accept"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<string>> FooGetUnknownValueAsync(string accept)
        {
            Argument.AssertNotNull(accept, nameof(accept));

            ClientResult result = await FooGetUnknownValueAsync(accept, null).ConfigureAwait(false);
            return ClientResult.FromValue(result.GetRawResponse().Content.ToString(), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] When set protocol false and convenient true, then the protocol method should be internal
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooInternalProtocol(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method InternalProtocol.");
                using PipelineMessage message = CreateInternalProtocolRequest(content, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method InternalProtocol: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method InternalProtocol.");
            }
        }

        /// <summary>
        /// [Protocol Method] When set protocol false and convenient true, then the protocol method should be internal
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooInternalProtocolAsync(BinaryContent content, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method InternalProtocolAsync.");
                using PipelineMessage message = CreateInternalProtocolRequest(content, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method InternalProtocolAsync: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method InternalProtocolAsync.");
            }
        }

        /// <summary> When set protocol false and convenient true, then the protocol method should be internal. </summary>
        /// <param name="body"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult<Thing> FooInternalProtocol(Thing body)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = FooInternalProtocol(body, null);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary> When set protocol false and convenient true, then the protocol method should be internal. </summary>
        /// <param name="body"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult<Thing>> FooInternalProtocolAsync(Thing body)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = await FooInternalProtocolAsync(body, null).ConfigureAwait(false);
            return ClientResult.FromValue((Thing)result, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] When set protocol false and convenient true, the convenient method should be generated even it has the same signature as protocol one
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooStillConvenient(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method StillConvenient.");
                using PipelineMessage message = CreateStillConvenientRequest(options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method StillConvenient: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method StillConvenient.");
            }
        }

        /// <summary>
        /// [Protocol Method] When set protocol false and convenient true, the convenient method should be generated even it has the same signature as protocol one
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooStillConvenientAsync(RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method StillConvenientAsync.");
                using PipelineMessage message = CreateStillConvenientRequest(options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method StillConvenientAsync: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method StillConvenientAsync.");
            }
        }

        /// <summary> When set protocol false and convenient true, the convenient method should be generated even it has the same signature as protocol one. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult FooStillConvenient()
        {
            return FooStillConvenient(null);
        }

        /// <summary> When set protocol false and convenient true, the convenient method should be generated even it has the same signature as protocol one. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> FooStillConvenientAsync()
        {
            return await FooStillConvenientAsync(null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] head as boolean.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult FooHeadAsBoolean(string id, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method HeadAsBoolean.");
                Argument.AssertNotNull(id, nameof(id));

                using PipelineMessage message = CreateHeadAsBooleanRequest(id, options);
                return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method HeadAsBoolean: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method HeadAsBoolean.");
            }
        }

        /// <summary>
        /// [Protocol Method] head as boolean.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="id"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> FooHeadAsBooleanAsync(string id, RequestOptions options)
        {
            try
            {
                System.Console.WriteLine("Entering method HeadAsBooleanAsync.");
                Argument.AssertNotNull(id, nameof(id));

                using PipelineMessage message = CreateHeadAsBooleanRequest(id, options);
                return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"An exception was thrown in method HeadAsBooleanAsync: {ex}");
                throw;
            }
            finally
            {
                System.Console.WriteLine("Exiting method HeadAsBooleanAsync.");
            }
        }

        /// <summary> head as boolean. </summary>
        /// <param name="id"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult FooHeadAsBoolean(string id)
        {
            Argument.AssertNotNull(id, nameof(id));

            return FooHeadAsBoolean(id, null);
        }

        /// <summary> head as boolean. </summary>
        /// <param name="id"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> FooHeadAsBooleanAsync(string id)
        {
            Argument.AssertNotNull(id, nameof(id));

            return await FooHeadAsBooleanAsync(id, null).ConfigureAwait(false);
        }
    }
}
