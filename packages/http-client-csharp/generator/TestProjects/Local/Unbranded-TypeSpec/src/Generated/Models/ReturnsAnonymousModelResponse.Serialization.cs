// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace UnbrandedTypeSpec.Models
{
    public partial class ReturnsAnonymousModelResponse : System.ClientModel.Primitives.IJsonModel<ReturnsAnonymousModelResponse>
    {
        private IDictionary<string, System.BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ReturnsAnonymousModelResponse"/>. </summary>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ReturnsAnonymousModelResponse(IDictionary<string, System.BinaryData> serializedAdditionalRawData)
        {
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void System.ClientModel.Primitives.IJsonModel<ReturnsAnonymousModelResponse>.Write(System.Text.Json.Utf8JsonWriter writer, System.ClientModel.Primitives.ModelReaderWriterOptions options) => WriteCore(writer, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ReturnsAnonymousModelResponse System.ClientModel.Primitives.IJsonModel<ReturnsAnonymousModelResponse>.Create(ref System.Text.Json.Utf8JsonReader reader, System.ClientModel.Primitives.ModelReaderWriterOptions options) => CreateCore(ref reader, options);

        /// <param name="options"> The client options for reading and writing models. </param>
        System.BinaryData System.ClientModel.Primitives.IPersistableModel<ReturnsAnonymousModelResponse>.Write(System.ClientModel.Primitives.ModelReaderWriterOptions options) => WriteCore(options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ReturnsAnonymousModelResponse System.ClientModel.Primitives.IPersistableModel<ReturnsAnonymousModelResponse>.Create(System.BinaryData data, System.ClientModel.Primitives.ModelReaderWriterOptions options) => CreateCore(data, options);

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void WriteCore(System.Text.Json.Utf8JsonWriter writer, System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((System.ClientModel.Primitives.IPersistableModel<ReturnsAnonymousModelResponse>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ReturnsAnonymousModelResponse)} does not support writing '{format}' format.");
            }
            writer.WriteStartObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
                    #if NET6_0_OR_GREATER

                        writer.WriteRawValue(item.Value);
                    #else

                        using (System.Text.Json.JsonDocument document = System.Text.Json.JsonDocument.Parse(item.Value))
                        {
                            System.Text.Json.JsonSerializer.Serialize(writer, document.RootElement);
                        }
                    #endif
                }
            }
            writer.WriteEndObject();
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ReturnsAnonymousModelResponse CreateCore(ref System.Text.Json.Utf8JsonReader reader, System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((System.ClientModel.Primitives.IPersistableModel<ReturnsAnonymousModelResponse>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ReturnsAnonymousModelResponse)} does not support reading '{format}' format.");
            }
            using System.Text.Json.JsonDocument document = System.Text.Json.JsonDocument.ParseValue(ref reader);
            return ReturnsAnonymousModelResponse.DeserializeReturnsAnonymousModelResponse(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options. </param>
        internal static ReturnsAnonymousModelResponse DeserializeReturnsAnonymousModelResponse(System.Text.Json.JsonElement element, System.ClientModel.Primitives.ModelReaderWriterOptions options = null)
        {
            options ??= new System.ClientModel.Primitives.ModelReaderWriterOptions("W");

            if (element.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, System.BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, System.BinaryData> rawDataDictionary = new Dictionary<string, System.BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(prop.Name, System.BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ReturnsAnonymousModelResponse(serializedAdditionalRawData);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual System.BinaryData WriteCore(System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((System.ClientModel.Primitives.IPersistableModel<ReturnsAnonymousModelResponse>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J": 
                    return System.ClientModel.Primitives.ModelReaderWriter.Write(this, options);
                default: 
                    throw new FormatException($"The model {nameof(ReturnsAnonymousModelResponse)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ReturnsAnonymousModelResponse CreateCore(System.BinaryData data, System.ClientModel.Primitives.ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((System.ClientModel.Primitives.IPersistableModel<ReturnsAnonymousModelResponse>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J": 
                {
                    using System.Text.Json.JsonDocument document = System.Text.Json.JsonDocument.Parse(data);
                    return ReturnsAnonymousModelResponse.DeserializeReturnsAnonymousModelResponse(document.RootElement, options);
                }
                default: 
                    throw new FormatException($"The model {nameof(ReturnsAnonymousModelResponse)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string System.ClientModel.Primitives.IPersistableModel<ReturnsAnonymousModelResponse>.GetFormatFromOptions(System.ClientModel.Primitives.ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The result to deserialize the model from. </param>
        internal static ReturnsAnonymousModelResponse FromResponse(System.ClientModel.Primitives.PipelineResponse response)
        {
            using var document = System.Text.Json.JsonDocument.Parse(response.Content);
            return ReturnsAnonymousModelResponse.DeserializeReturnsAnonymousModelResponse(document.RootElement);
        }

        /// <summary> Convert into a <see cref="System.ClientModel.BinaryContent"/>. </summary>
        internal virtual System.ClientModel.BinaryContent ToBinaryContent()
        {
            return System.ClientModel.BinaryContent.Create<ReturnsAnonymousModelResponse>(this, new System.ClientModel.Primitives.ModelReaderWriterOptions("W"));
        }
    }
}
