// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using UnbrandedTypeSpec;

namespace UnbrandedTypeSpec.Models
{
    /// <summary></summary>
    public partial class ModelWithBaseModelWithoutRequired : IJsonModel<ModelWithBaseModelWithoutRequired>
    {
        internal ModelWithBaseModelWithoutRequired(int? optional, IDictionary<string, BinaryData> serializedAdditionalRawData, string name, string address) : base(optional, serializedAdditionalRawData)
        {
            Name = name;
            Address = address;
        }

        internal ModelWithBaseModelWithoutRequired()
        {
        }

        void IJsonModel<ModelWithBaseModelWithoutRequired>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ModelWithBaseModelWithoutRequired>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ModelWithBaseModelWithoutRequired)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            if (UnbrandedTypeSpec.Optional.IsDefined(Address))
            {
                writer.WritePropertyName("address"u8);
                writer.WriteStringValue(Address);
            }
        }

        ModelWithBaseModelWithoutRequired IJsonModel<ModelWithBaseModelWithoutRequired>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (ModelWithBaseModelWithoutRequired)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BaseModelWithoutRequired JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ModelWithBaseModelWithoutRequired>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ModelWithBaseModelWithoutRequired)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeModelWithBaseModelWithoutRequired(document.RootElement, options);
        }

        internal static ModelWithBaseModelWithoutRequired DeserializeModelWithBaseModelWithoutRequired(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int? optional = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = new ChangeTrackingDictionary<string, BinaryData>();
            string name = default;
            string address = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("optional"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        optional = null;
                        continue;
                    }
                    optional = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("name"u8))
                {
                    name = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("address"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        address = null;
                        continue;
                    }
                    address = prop.Value.GetString();
                    continue;
                }
            }
            return new ModelWithBaseModelWithoutRequired(optional, serializedAdditionalRawData, name, address);
        }

        BinaryData IPersistableModel<ModelWithBaseModelWithoutRequired>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ModelWithBaseModelWithoutRequired>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ModelWithBaseModelWithoutRequired)} does not support writing '{options.Format}' format.");
            }
        }

        ModelWithBaseModelWithoutRequired IPersistableModel<ModelWithBaseModelWithoutRequired>.Create(BinaryData data, ModelReaderWriterOptions options) => (ModelWithBaseModelWithoutRequired)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BaseModelWithoutRequired PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ModelWithBaseModelWithoutRequired>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeModelWithBaseModelWithoutRequired(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ModelWithBaseModelWithoutRequired)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ModelWithBaseModelWithoutRequired>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="modelWithBaseModelWithoutRequired"> The <see cref="ModelWithBaseModelWithoutRequired"/> to serialize into <see cref="BinaryContent"/>. </param>
        public static implicit operator BinaryContent(ModelWithBaseModelWithoutRequired modelWithBaseModelWithoutRequired)
        {
            return BinaryContent.Create(modelWithBaseModelWithoutRequired, ModelSerializationExtensions.WireOptions);
        }

        /// <param name="result"> The <see cref="ClientResult"/> to deserialize the <see cref="ModelWithBaseModelWithoutRequired"/> from. </param>
        public static explicit operator ModelWithBaseModelWithoutRequired(ClientResult result)
        {
            using PipelineResponse response = result.GetRawResponse();
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeModelWithBaseModelWithoutRequired(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
