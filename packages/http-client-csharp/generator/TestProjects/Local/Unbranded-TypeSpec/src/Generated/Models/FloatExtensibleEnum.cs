// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace UnbrandedTypeSpec.Models
{
    public readonly partial struct FloatExtensibleEnum : IEquatable<FloatExtensibleEnum>
    {
        private readonly float _value;
        private const float OneDotOneValue = 1.1F;
        private const float TwoDotTwoValue = 2.2F;
        private const float FourDotFourValue = 4.4F;

        /// <summary> Initializes a new instance of <see cref="FloatExtensibleEnum"/>. </summary>
        /// <param name="value"></param>
        public FloatExtensibleEnum(float value)
        {
            _value = value;
        }

        public static FloatExtensibleEnum OneDotOne { get; } = new FloatExtensibleEnum(OneDotOneValue);

        public static FloatExtensibleEnum TwoDotTwo { get; } = new FloatExtensibleEnum(TwoDotTwoValue);

        public static FloatExtensibleEnum FourDotFour { get; } = new FloatExtensibleEnum(FourDotFourValue);

        /// <summary> Determines if two <see cref="FloatExtensibleEnum"/> values are the same. </summary>
        /// <param name="left"></param>
        /// <param name="right"></param>
        public static bool operator ==(FloatExtensibleEnum left, FloatExtensibleEnum right) => left.Equals(right);

        /// <summary> Determines if two <see cref="FloatExtensibleEnum"/> values are not the same. </summary>
        /// <param name="left"></param>
        /// <param name="right"></param>
        public static bool operator !=(FloatExtensibleEnum left, FloatExtensibleEnum right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="FloatExtensibleEnum"/>. </summary>
        /// <param name="value"></param>
        public static implicit operator FloatExtensibleEnum(float value) => new FloatExtensibleEnum(value);

        /// <param name="obj"></param>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FloatExtensibleEnum other && Equals(other);

        /// <param name="other"></param>
        public bool Equals(FloatExtensibleEnum other) => Equals(_value, other._value);

        public override int GetHashCode() => _value.GetHashCode();

        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);

        internal float ToSerialSingle() => _value;
    }
}
