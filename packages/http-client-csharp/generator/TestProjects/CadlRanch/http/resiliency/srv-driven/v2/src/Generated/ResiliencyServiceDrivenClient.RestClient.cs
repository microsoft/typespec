// <auto-generated/>

#nullable disable

using System.ClientModel.Primitives;

namespace Resiliency.SrvDriven.V2
{
    /// <summary></summary>
    public partial class ResiliencyServiceDrivenClient
    {
        private static PipelineMessageClassifier _pipelineMessageClassifier204;

        private static PipelineMessageClassifier PipelineMessageClassifier204 => _pipelineMessageClassifier204 = PipelineMessageClassifier.Create(stackalloc ushort[] { 204 });

        internal PipelineMessage CreateAddOperationRequest(RequestOptions options)
        {
            PipelineMessage message = Pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier204;
            PipelineRequest request = message.Request;
            request.Method = "DELETE";
            ClientUriBuilder uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/resiliency/service-driven/client:v2/service:", false);
            uri.AppendPath(_serviceDeploymentVersion, true);
            uri.AppendPath("/api-version:", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/add-operation", false);
            request.Uri = uri.ToUri();
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateFromNoneRequest(string newParameter, RequestOptions options)
        {
            PipelineMessage message = Pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier204;
            PipelineRequest request = message.Request;
            request.Method = "HEAD";
            ClientUriBuilder uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/resiliency/service-driven/client:v2/service:", false);
            uri.AppendPath(_serviceDeploymentVersion, true);
            uri.AppendPath("/api-version:", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/add-optional-param/from-none", false);
            if (newParameter != null)
            {
                uri.AppendQuery("new-parameter", newParameter, true);
            }
            request.Uri = uri.ToUri();
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateFromOneRequiredRequest(string parameter, string newParameter, RequestOptions options)
        {
            PipelineMessage message = Pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier204;
            PipelineRequest request = message.Request;
            request.Method = "GET";
            ClientUriBuilder uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/resiliency/service-driven/client:v2/service:", false);
            uri.AppendPath(_serviceDeploymentVersion, true);
            uri.AppendPath("/api-version:", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/add-optional-param/from-one-required", false);
            uri.AppendQuery("parameter", parameter, true);
            if (newParameter != null)
            {
                uri.AppendQuery("new-parameter", newParameter, true);
            }
            request.Uri = uri.ToUri();
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateFromOneOptionalRequest(string parameter, string newParameter, RequestOptions options)
        {
            PipelineMessage message = Pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier204;
            PipelineRequest request = message.Request;
            request.Method = "GET";
            ClientUriBuilder uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/resiliency/service-driven/client:v2/service:", false);
            uri.AppendPath(_serviceDeploymentVersion, true);
            uri.AppendPath("/api-version:", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/add-optional-param/from-one-optional", false);
            if (parameter != null)
            {
                uri.AppendQuery("parameter", parameter, true);
            }
            if (newParameter != null)
            {
                uri.AppendQuery("new-parameter", newParameter, true);
            }
            request.Uri = uri.ToUri();
            message.Apply(options);
            return message;
        }
    }
}
