// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;

namespace Resiliency.SrvDriven.V2
{
    public partial class ResiliencyServiceDrivenClient
    {
        protected ResiliencyServiceDrivenClient() => throw null;

        public ResiliencyServiceDrivenClient(Uri endpoint, string serviceDeploymentVersion) : this(endpoint, serviceDeploymentVersion, new ResiliencyServiceDrivenClientOptions()) => throw null;

        public ResiliencyServiceDrivenClient(Uri endpoint, string serviceDeploymentVersion, ResiliencyServiceDrivenClientOptions options) => throw null;

        public ClientPipeline Pipeline => throw null;

        public virtual ClientResult AddOperation(RequestOptions options) => throw null;

        public virtual Task<ClientResult> AddOperationAsync(RequestOptions options) => throw null;

        public virtual ClientResult AddOperation() => throw null;

        public virtual Task<ClientResult> AddOperationAsync(CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult FromNone(string newParameter, RequestOptions options) => throw null;

        public virtual Task<ClientResult> FromNoneAsync(string newParameter, RequestOptions options) => throw null;

        public virtual ClientResult FromNone(string newParameter = null) => throw null;

        public virtual Task<ClientResult> FromNoneAsync(string newParameter = null, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult FromOneRequired(string parameter, string newParameter, RequestOptions options) => throw null;

        public virtual Task<ClientResult> FromOneRequiredAsync(string parameter, string newParameter, RequestOptions options) => throw null;

        public virtual ClientResult FromOneRequired(string parameter, string newParameter = null) => throw null;

        public virtual Task<ClientResult> FromOneRequiredAsync(string parameter, string newParameter = null, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult FromOneOptional(string parameter, string newParameter, RequestOptions options) => throw null;

        public virtual Task<ClientResult> FromOneOptionalAsync(string parameter, string newParameter, RequestOptions options) => throw null;

        public virtual ClientResult FromOneOptional(string parameter = null, string newParameter = null) => throw null;

        public virtual Task<ClientResult> FromOneOptionalAsync(string parameter = null, string newParameter = null, CancellationToken cancellationToken = default) => throw null;
    }
}
