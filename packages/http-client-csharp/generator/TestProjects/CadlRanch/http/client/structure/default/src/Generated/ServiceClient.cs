// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Client.Structure.Service.Models;

namespace Client.Structure.Service
{
    /// <summary></summary>
    public partial class ServiceClient
    {
        private readonly Uri _endpoint;
        private readonly ClientType _client;
        private Baz _cachedBaz;
        private Qux _cachedQux;
        private Foo _cachedFoo;
        private Bar _cachedBar;

        /// <summary> Initializes a new instance of ServiceClient for mocking. </summary>
        protected ServiceClient()
        {
        }

        /// <summary> Initializes a new instance of ServiceClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="client"> Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public ServiceClient(Uri endpoint, ClientType client) : this(endpoint, client, new ServiceClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ServiceClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="client"> Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public ServiceClient(Uri endpoint, ClientType client, ServiceClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));

            options ??= new ServiceClientOptions();

            _endpoint = endpoint;
            _client = client;
            Pipeline = ClientPipeline.Create(options, Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>());
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] one
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult One(RequestOptions options)
        {
            using PipelineMessage message = CreateOneRequest(options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] one
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> OneAsync(RequestOptions options)
        {
            using PipelineMessage message = CreateOneRequest(options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> one. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult One()
        {
            return One(null);
        }

        /// <summary> one. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> OneAsync()
        {
            return await OneAsync(null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] two
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult Two(RequestOptions options)
        {
            using PipelineMessage message = CreateTwoRequest(options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] two
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> TwoAsync(RequestOptions options)
        {
            using PipelineMessage message = CreateTwoRequest(options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> two. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult Two()
        {
            return Two(null);
        }

        /// <summary> two. </summary>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> TwoAsync()
        {
            return await TwoAsync(null).ConfigureAwait(false);
        }

        /// <summary> Initializes a new instance of Baz. </summary>
        public virtual Baz GetBazClient()
        {
            return Volatile.Read(ref _cachedBaz) ?? Interlocked.CompareExchange(ref _cachedBaz, new Baz(Pipeline, _endpoint, _client), null) ?? _cachedBaz;
        }

        /// <summary> Initializes a new instance of Qux. </summary>
        public virtual Qux GetQuxClient()
        {
            return Volatile.Read(ref _cachedQux) ?? Interlocked.CompareExchange(ref _cachedQux, new Qux(Pipeline, _endpoint, _client), null) ?? _cachedQux;
        }

        /// <summary> Initializes a new instance of Foo. </summary>
        public virtual Foo GetFooClient()
        {
            return Volatile.Read(ref _cachedFoo) ?? Interlocked.CompareExchange(ref _cachedFoo, new Foo(Pipeline, _endpoint, _client), null) ?? _cachedFoo;
        }

        /// <summary> Initializes a new instance of Bar. </summary>
        public virtual Bar GetBarClient()
        {
            return Volatile.Read(ref _cachedBar) ?? Interlocked.CompareExchange(ref _cachedBar, new Bar(Pipeline, _endpoint, _client), null) ?? _cachedBar;
        }
    }
}
