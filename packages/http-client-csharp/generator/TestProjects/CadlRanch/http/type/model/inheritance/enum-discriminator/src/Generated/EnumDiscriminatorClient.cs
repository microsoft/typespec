// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading.Tasks;
using _Type.Model.Inheritance.EnumDiscriminator.Models;

namespace _Type.Model.Inheritance.EnumDiscriminator
{
    public partial class EnumDiscriminatorClient
    {
        public EnumDiscriminatorClient() : this(new Uri("http://localhost:3000"), new EnumDiscriminatorClientOptions()) => throw null;

        public EnumDiscriminatorClient(Uri endpoint, EnumDiscriminatorClientOptions options) => throw null;

        public ClientPipeline Pipeline => throw null;

        public virtual ClientResult GetExtensibleModel(RequestOptions options) => throw null;

        public virtual Task<ClientResult> GetExtensibleModelAsync(RequestOptions options) => throw null;

        public virtual ClientResult<Dog> GetExtensibleModel() => throw null;

        public virtual Task<ClientResult<Dog>> GetExtensibleModelAsync() => throw null;

        public virtual ClientResult PutExtensibleModel(BinaryContent content, RequestOptions options) => throw null;

        public virtual Task<ClientResult> PutExtensibleModelAsync(BinaryContent content, RequestOptions options) => throw null;

        public virtual ClientResult PutExtensibleModel(Dog input) => throw null;

        public virtual Task<ClientResult> PutExtensibleModelAsync(Dog input) => throw null;

        public virtual ClientResult GetExtensibleModelMissingDiscriminator(RequestOptions options) => throw null;

        public virtual Task<ClientResult> GetExtensibleModelMissingDiscriminatorAsync(RequestOptions options) => throw null;

        public virtual ClientResult<Dog> GetExtensibleModelMissingDiscriminator() => throw null;

        public virtual Task<ClientResult<Dog>> GetExtensibleModelMissingDiscriminatorAsync() => throw null;

        public virtual ClientResult GetExtensibleModelWrongDiscriminator(RequestOptions options) => throw null;

        public virtual Task<ClientResult> GetExtensibleModelWrongDiscriminatorAsync(RequestOptions options) => throw null;

        public virtual ClientResult<Dog> GetExtensibleModelWrongDiscriminator() => throw null;

        public virtual Task<ClientResult<Dog>> GetExtensibleModelWrongDiscriminatorAsync() => throw null;

        public virtual ClientResult GetFixedModel(RequestOptions options) => throw null;

        public virtual Task<ClientResult> GetFixedModelAsync(RequestOptions options) => throw null;

        public virtual ClientResult<Snake> GetFixedModel() => throw null;

        public virtual Task<ClientResult<Snake>> GetFixedModelAsync() => throw null;

        public virtual ClientResult PutFixedModel(BinaryContent content, RequestOptions options) => throw null;

        public virtual Task<ClientResult> PutFixedModelAsync(BinaryContent content, RequestOptions options) => throw null;

        public virtual ClientResult PutFixedModel(Snake input) => throw null;

        public virtual Task<ClientResult> PutFixedModelAsync(Snake input) => throw null;

        public virtual ClientResult GetFixedModelMissingDiscriminator(RequestOptions options) => throw null;

        public virtual Task<ClientResult> GetFixedModelMissingDiscriminatorAsync(RequestOptions options) => throw null;

        public virtual ClientResult<Snake> GetFixedModelMissingDiscriminator() => throw null;

        public virtual Task<ClientResult<Snake>> GetFixedModelMissingDiscriminatorAsync() => throw null;

        public virtual ClientResult GetFixedModelWrongDiscriminator(RequestOptions options) => throw null;

        public virtual Task<ClientResult> GetFixedModelWrongDiscriminatorAsync(RequestOptions options) => throw null;

        public virtual ClientResult<Snake> GetFixedModelWrongDiscriminator() => throw null;

        public virtual Task<ClientResult<Snake>> GetFixedModelWrongDiscriminatorAsync() => throw null;
    }
}
