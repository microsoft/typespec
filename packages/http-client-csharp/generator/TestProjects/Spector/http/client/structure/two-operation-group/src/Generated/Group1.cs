// <auto-generated/>

#nullable disable

using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;

namespace Client.Structure.TwoOperationGroup
{
    public partial class Group1
    {
        protected Group1() => throw null;

        public ClientPipeline Pipeline => throw null;

        /// <summary> One. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult One(RequestOptions options) => throw null;

        /// <summary> One. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> OneAsync(RequestOptions options) => throw null;

        /// <summary> One. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        public virtual ClientResult One(CancellationToken cancellationToken = default) => throw null;

        /// <summary> One. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        public virtual Task<ClientResult> OneAsync(CancellationToken cancellationToken = default) => throw null;

        /// <summary> Three. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult Three(RequestOptions options) => throw null;

        /// <summary> Three. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> ThreeAsync(RequestOptions options) => throw null;

        /// <summary> Three. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        public virtual ClientResult Three(CancellationToken cancellationToken = default) => throw null;

        /// <summary> Three. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        public virtual Task<ClientResult> ThreeAsync(CancellationToken cancellationToken = default) => throw null;

        /// <summary> Four. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult Four(RequestOptions options) => throw null;

        /// <summary> Four. </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> FourAsync(RequestOptions options) => throw null;

        /// <summary> Four. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        public virtual ClientResult Four(CancellationToken cancellationToken = default) => throw null;

        /// <summary> Four. </summary>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        public virtual Task<ClientResult> FourAsync(CancellationToken cancellationToken = default) => throw null;
    }
}
