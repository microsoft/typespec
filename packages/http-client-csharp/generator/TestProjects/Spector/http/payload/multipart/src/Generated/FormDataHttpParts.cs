// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading.Tasks;
using Payload.MultiPart._FormData.HttpParts.ContentType;
using Payload.MultiPart._FormData.HttpParts.NonString;

namespace Payload.MultiPart._FormData.HttpParts
{
    public partial class FormDataHttpParts
    {
        protected FormDataHttpParts() => throw null;

        public ClientPipeline Pipeline => throw null;

        /// <summary> Test content-type: multipart/form-data for mixed scenarios. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="contentType"> The contentType to use which has the multipart/form-data boundary. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult JsonArrayAndFileArray(BinaryContent content, string contentType, RequestOptions options = null) => throw null;

        /// <summary> Test content-type: multipart/form-data for mixed scenarios. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="contentType"> The contentType to use which has the multipart/form-data boundary. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> JsonArrayAndFileArrayAsync(BinaryContent content, string contentType, RequestOptions options = null) => throw null;

        /// <summary> Initializes a new instance of FormDataHttpPartsContentType. </summary>
        public virtual FormDataHttpPartsContentType GetFormDataHttpPartsContentTypeClient() => throw null;

        /// <summary> Initializes a new instance of FormDataHttpPartsNonString. </summary>
        public virtual FormDataHttpPartsNonString GetFormDataHttpPartsNonStringClient() => throw null;
    }
}
