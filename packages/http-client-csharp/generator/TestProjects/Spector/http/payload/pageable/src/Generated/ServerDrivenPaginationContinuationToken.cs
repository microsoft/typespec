// <auto-generated/>

#nullable disable

using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using Payload.Pageable;

namespace Payload.Pageable._ServerDrivenPagination.ContinuationToken
{
    public partial class ServerDrivenPaginationContinuationToken
    {
        protected ServerDrivenPaginationContinuationToken() => throw null;

        public ClientPipeline Pipeline => throw null;

        public virtual ClientResult RequestQueryResponseBody(string token, string foo, string bar, RequestOptions options) => throw null;

        public virtual Task<ClientResult> RequestQueryResponseBodyAsync(string token, string foo, string bar, RequestOptions options) => throw null;

        public virtual ClientResult<RequestQueryResponseBodyResponse> RequestQueryResponseBody(string token = null, string foo = null, string bar = null, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult<RequestQueryResponseBodyResponse>> RequestQueryResponseBodyAsync(string token = null, string foo = null, string bar = null, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult RequestHeaderResponseBody(string token, string foo, string bar, RequestOptions options) => throw null;

        public virtual Task<ClientResult> RequestHeaderResponseBodyAsync(string token, string foo, string bar, RequestOptions options) => throw null;

        public virtual ClientResult<RequestHeaderResponseBodyResponse> RequestHeaderResponseBody(string token = null, string foo = null, string bar = null, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult<RequestHeaderResponseBodyResponse>> RequestHeaderResponseBodyAsync(string token = null, string foo = null, string bar = null, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult RequestQueryResponseHeader(string token, string foo, string bar, RequestOptions options) => throw null;

        public virtual Task<ClientResult> RequestQueryResponseHeaderAsync(string token, string foo, string bar, RequestOptions options) => throw null;

        public virtual ClientResult<RequestQueryResponseHeaderResponse> RequestQueryResponseHeader(string token = null, string foo = null, string bar = null, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult<RequestQueryResponseHeaderResponse>> RequestQueryResponseHeaderAsync(string token = null, string foo = null, string bar = null, CancellationToken cancellationToken = default) => throw null;

        public virtual ClientResult RequestHeaderResponseHeader(string token, string foo, string bar, RequestOptions options) => throw null;

        public virtual Task<ClientResult> RequestHeaderResponseHeaderAsync(string token, string foo, string bar, RequestOptions options) => throw null;

        public virtual ClientResult<RequestHeaderResponseHeaderResponse> RequestHeaderResponseHeader(string token = null, string foo = null, string bar = null, CancellationToken cancellationToken = default) => throw null;

        public virtual Task<ClientResult<RequestHeaderResponseHeaderResponse>> RequestHeaderResponseHeaderAsync(string token = null, string foo = null, string bar = null, CancellationToken cancellationToken = default) => throw null;
    }
}
