// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Threading;
using Payload.Pageable._ServerDrivenPagination;

namespace Payload.Pageable
{
    /// <summary> Test for pageable payload. </summary>
    public partial class PageableClient
    {
        private readonly Uri _endpoint;
        private ServerDrivenPagination _cachedServerDrivenPagination;

        /// <summary> Initializes a new instance of PageableClient. </summary>
        public PageableClient() : this(new Uri("http://localhost:3000"), new PageableClientOptions())
        {
        }

        /// <summary> Initializes a new instance of PageableClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public PageableClient(Uri endpoint, PageableClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));

            options ??= new PageableClientOptions();

            _endpoint = endpoint;
            Pipeline = ClientPipeline.Create(options, Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>());
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary> Initializes a new instance of ServerDrivenPagination. </summary>
        public virtual ServerDrivenPagination GetServerDrivenPaginationClient()
        {
            return Volatile.Read(ref _cachedServerDrivenPagination) ?? Interlocked.CompareExchange(ref _cachedServerDrivenPagination, new ServerDrivenPagination(Pipeline, _endpoint), null) ?? _cachedServerDrivenPagination;
        }
    }
}
