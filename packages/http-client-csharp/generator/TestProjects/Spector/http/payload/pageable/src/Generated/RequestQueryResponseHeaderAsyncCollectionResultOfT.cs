// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Threading.Tasks;
using Payload.Pageable._ServerDrivenPagination.ContinuationToken;

namespace Payload.Pageable
{
    internal partial class RequestQueryResponseHeaderAsyncCollectionResultOfT : AsyncCollectionResult<Pet>
    {
        private readonly ServerDrivenPaginationContinuationToken _client;
        private readonly string _token;
        private readonly string _foo;
        private readonly string _bar;
        private readonly RequestOptions _options;

        public RequestQueryResponseHeaderAsyncCollectionResultOfT(ServerDrivenPaginationContinuationToken client, string token, string foo, string bar, RequestOptions options)
        {
            _client = client;
            _token = token;
            _foo = foo;
            _bar = bar;
            _options = options;
        }

        public override async IAsyncEnumerable<ClientResult> GetRawPagesAsync()
        {
            PipelineMessage message = _client.CreateRequestQueryResponseHeaderRequest(_token, _foo, _bar, _options);
            string nextToken = null;
            while (true)
            {
                ClientResult result = ClientResult.FromResponse(await _client.Pipeline.ProcessMessageAsync(message, _options).ConfigureAwait(false));
                yield return result;

                if (result.GetRawResponse().Headers.TryGetValue("nextToken", out string value))
                {
                    nextToken = value;
                }
                else
                {
                    yield break;
                }
                message = _client.CreateRequestQueryResponseHeaderRequest(nextToken, _foo, _bar, _options);
            }
        }

        public override ContinuationToken GetContinuationToken(ClientResult page)
        {
            if (page.GetRawResponse().Headers.TryGetValue("nextToken", out string value))
            {
                return ContinuationToken.FromBytes(BinaryData.FromString(value));
            }
            else
            {
                return null;
            }
        }

        protected override async IAsyncEnumerable<Pet> GetValuesFromPageAsync(ClientResult page)
        {
            foreach (Pet item in ((RequestQueryResponseHeaderResponse)page).Pets)
            {
                yield return item;
                await Task.Yield();
            }
        }
    }
}
