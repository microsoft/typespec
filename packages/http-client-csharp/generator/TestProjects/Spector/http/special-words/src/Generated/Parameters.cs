// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;

namespace SpecialWords
{
    public partial class Parameters
    {
        protected Parameters() => throw null;

        public ClientPipeline Pipeline => throw null;

        /// <summary> WithAnd. </summary>
        /// <param name="and"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="and"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="and"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithAnd(string @and, RequestOptions options) => throw null;

        /// <summary> WithAnd. </summary>
        /// <param name="and"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="and"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="and"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithAndAsync(string @and, RequestOptions options) => throw null;

        /// <summary> WithAnd. </summary>
        /// <param name="and"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="and"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="and"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithAnd(string @and, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithAnd. </summary>
        /// <param name="and"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="and"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="and"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithAndAsync(string @and, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithAs. </summary>
        /// <param name="as"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="as"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="as"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithAs(string @as, RequestOptions options) => throw null;

        /// <summary> WithAs. </summary>
        /// <param name="as"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="as"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="as"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithAsAsync(string @as, RequestOptions options) => throw null;

        /// <summary> WithAs. </summary>
        /// <param name="as"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="as"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="as"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithAs(string @as, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithAs. </summary>
        /// <param name="as"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="as"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="as"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithAsAsync(string @as, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithAssert. </summary>
        /// <param name="assert"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assert"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assert"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithAssert(string assert, RequestOptions options) => throw null;

        /// <summary> WithAssert. </summary>
        /// <param name="assert"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assert"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assert"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithAssertAsync(string assert, RequestOptions options) => throw null;

        /// <summary> WithAssert. </summary>
        /// <param name="assert"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assert"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assert"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithAssert(string assert, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithAssert. </summary>
        /// <param name="assert"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assert"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assert"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithAssertAsync(string assert, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithAsync. </summary>
        /// <param name="async"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="async"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="async"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithAsync(string @async, RequestOptions options) => throw null;

        /// <summary> WithAsync. </summary>
        /// <param name="async"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="async"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="async"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithAsyncAsync(string @async, RequestOptions options) => throw null;

        /// <summary> WithAsync. </summary>
        /// <param name="async"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="async"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="async"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithAsync(string @async, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithAsync. </summary>
        /// <param name="async"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="async"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="async"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithAsyncAsync(string @async, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithAwait. </summary>
        /// <param name="await"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="await"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="await"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithAwait(string @await, RequestOptions options) => throw null;

        /// <summary> WithAwait. </summary>
        /// <param name="await"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="await"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="await"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithAwaitAsync(string @await, RequestOptions options) => throw null;

        /// <summary> WithAwait. </summary>
        /// <param name="await"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="await"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="await"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithAwait(string @await, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithAwait. </summary>
        /// <param name="await"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="await"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="await"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithAwaitAsync(string @await, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithBreak. </summary>
        /// <param name="break"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="break"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="break"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithBreak(string @break, RequestOptions options) => throw null;

        /// <summary> WithBreak. </summary>
        /// <param name="break"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="break"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="break"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithBreakAsync(string @break, RequestOptions options) => throw null;

        /// <summary> WithBreak. </summary>
        /// <param name="break"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="break"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="break"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithBreak(string @break, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithBreak. </summary>
        /// <param name="break"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="break"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="break"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithBreakAsync(string @break, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithClass. </summary>
        /// <param name="class"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="class"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="class"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithClass(string @class, RequestOptions options) => throw null;

        /// <summary> WithClass. </summary>
        /// <param name="class"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="class"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="class"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithClassAsync(string @class, RequestOptions options) => throw null;

        /// <summary> WithClass. </summary>
        /// <param name="class"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="class"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="class"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithClass(string @class, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithClass. </summary>
        /// <param name="class"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="class"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="class"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithClassAsync(string @class, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithConstructor. </summary>
        /// <param name="constructor"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="constructor"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="constructor"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithConstructor(string constructor, RequestOptions options) => throw null;

        /// <summary> WithConstructor. </summary>
        /// <param name="constructor"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="constructor"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="constructor"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithConstructorAsync(string constructor, RequestOptions options) => throw null;

        /// <summary> WithConstructor. </summary>
        /// <param name="constructor"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="constructor"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="constructor"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithConstructor(string constructor, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithConstructor. </summary>
        /// <param name="constructor"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="constructor"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="constructor"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithConstructorAsync(string constructor, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithContinue. </summary>
        /// <param name="continue"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="continue"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="continue"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithContinue(string @continue, RequestOptions options) => throw null;

        /// <summary> WithContinue. </summary>
        /// <param name="continue"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="continue"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="continue"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithContinueAsync(string @continue, RequestOptions options) => throw null;

        /// <summary> WithContinue. </summary>
        /// <param name="continue"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="continue"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="continue"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithContinue(string @continue, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithContinue. </summary>
        /// <param name="continue"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="continue"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="continue"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithContinueAsync(string @continue, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithDef. </summary>
        /// <param name="def"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="def"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="def"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithDef(string def, RequestOptions options) => throw null;

        /// <summary> WithDef. </summary>
        /// <param name="def"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="def"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="def"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithDefAsync(string def, RequestOptions options) => throw null;

        /// <summary> WithDef. </summary>
        /// <param name="def"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="def"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="def"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithDef(string def, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithDef. </summary>
        /// <param name="def"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="def"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="def"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithDefAsync(string def, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithDel. </summary>
        /// <param name="del"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="del"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="del"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithDel(string del, RequestOptions options) => throw null;

        /// <summary> WithDel. </summary>
        /// <param name="del"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="del"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="del"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithDelAsync(string del, RequestOptions options) => throw null;

        /// <summary> WithDel. </summary>
        /// <param name="del"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="del"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="del"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithDel(string del, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithDel. </summary>
        /// <param name="del"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="del"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="del"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithDelAsync(string del, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithElif. </summary>
        /// <param name="elif"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="elif"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="elif"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithElif(string elif, RequestOptions options) => throw null;

        /// <summary> WithElif. </summary>
        /// <param name="elif"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="elif"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="elif"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithElifAsync(string elif, RequestOptions options) => throw null;

        /// <summary> WithElif. </summary>
        /// <param name="elif"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="elif"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="elif"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithElif(string elif, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithElif. </summary>
        /// <param name="elif"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="elif"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="elif"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithElifAsync(string elif, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithElse. </summary>
        /// <param name="else"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="else"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="else"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithElse(string @else, RequestOptions options) => throw null;

        /// <summary> WithElse. </summary>
        /// <param name="else"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="else"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="else"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithElseAsync(string @else, RequestOptions options) => throw null;

        /// <summary> WithElse. </summary>
        /// <param name="else"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="else"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="else"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithElse(string @else, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithElse. </summary>
        /// <param name="else"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="else"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="else"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithElseAsync(string @else, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithExcept. </summary>
        /// <param name="except"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="except"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="except"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithExcept(string except, RequestOptions options) => throw null;

        /// <summary> WithExcept. </summary>
        /// <param name="except"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="except"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="except"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithExceptAsync(string except, RequestOptions options) => throw null;

        /// <summary> WithExcept. </summary>
        /// <param name="except"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="except"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="except"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithExcept(string except, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithExcept. </summary>
        /// <param name="except"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="except"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="except"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithExceptAsync(string except, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithExec. </summary>
        /// <param name="exec"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exec"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="exec"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithExec(string exec, RequestOptions options) => throw null;

        /// <summary> WithExec. </summary>
        /// <param name="exec"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exec"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="exec"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithExecAsync(string exec, RequestOptions options) => throw null;

        /// <summary> WithExec. </summary>
        /// <param name="exec"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exec"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="exec"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithExec(string exec, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithExec. </summary>
        /// <param name="exec"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exec"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="exec"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithExecAsync(string exec, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithFinally. </summary>
        /// <param name="finally"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="finally"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="finally"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithFinally(string @finally, RequestOptions options) => throw null;

        /// <summary> WithFinally. </summary>
        /// <param name="finally"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="finally"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="finally"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithFinallyAsync(string @finally, RequestOptions options) => throw null;

        /// <summary> WithFinally. </summary>
        /// <param name="finally"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="finally"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="finally"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithFinally(string @finally, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithFinally. </summary>
        /// <param name="finally"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="finally"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="finally"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithFinallyAsync(string @finally, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithFor. </summary>
        /// <param name="for"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="for"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="for"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithFor(string @for, RequestOptions options) => throw null;

        /// <summary> WithFor. </summary>
        /// <param name="for"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="for"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="for"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithForAsync(string @for, RequestOptions options) => throw null;

        /// <summary> WithFor. </summary>
        /// <param name="for"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="for"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="for"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithFor(string @for, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithFor. </summary>
        /// <param name="for"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="for"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="for"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithForAsync(string @for, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithFrom. </summary>
        /// <param name="from"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="from"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="from"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithFrom(string @from, RequestOptions options) => throw null;

        /// <summary> WithFrom. </summary>
        /// <param name="from"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="from"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="from"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithFromAsync(string @from, RequestOptions options) => throw null;

        /// <summary> WithFrom. </summary>
        /// <param name="from"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="from"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="from"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithFrom(string @from, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithFrom. </summary>
        /// <param name="from"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="from"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="from"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithFromAsync(string @from, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithGlobal. </summary>
        /// <param name="global"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="global"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="global"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithGlobal(string @global, RequestOptions options) => throw null;

        /// <summary> WithGlobal. </summary>
        /// <param name="global"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="global"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="global"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithGlobalAsync(string @global, RequestOptions options) => throw null;

        /// <summary> WithGlobal. </summary>
        /// <param name="global"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="global"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="global"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithGlobal(string @global, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithGlobal. </summary>
        /// <param name="global"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="global"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="global"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithGlobalAsync(string @global, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithIf. </summary>
        /// <param name="if"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="if"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="if"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithIf(string @if, RequestOptions options) => throw null;

        /// <summary> WithIf. </summary>
        /// <param name="if"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="if"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="if"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithIfAsync(string @if, RequestOptions options) => throw null;

        /// <summary> WithIf. </summary>
        /// <param name="if"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="if"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="if"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithIf(string @if, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithIf. </summary>
        /// <param name="if"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="if"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="if"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithIfAsync(string @if, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithImport. </summary>
        /// <param name="import"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="import"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="import"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithImport(string import, RequestOptions options) => throw null;

        /// <summary> WithImport. </summary>
        /// <param name="import"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="import"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="import"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithImportAsync(string import, RequestOptions options) => throw null;

        /// <summary> WithImport. </summary>
        /// <param name="import"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="import"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="import"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithImport(string import, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithImport. </summary>
        /// <param name="import"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="import"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="import"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithImportAsync(string import, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithIn. </summary>
        /// <param name="in"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="in"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="in"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithIn(string @in, RequestOptions options) => throw null;

        /// <summary> WithIn. </summary>
        /// <param name="in"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="in"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="in"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithInAsync(string @in, RequestOptions options) => throw null;

        /// <summary> WithIn. </summary>
        /// <param name="in"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="in"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="in"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithIn(string @in, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithIn. </summary>
        /// <param name="in"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="in"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="in"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithInAsync(string @in, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithIs. </summary>
        /// <param name="is"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="is"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="is"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithIs(string @is, RequestOptions options) => throw null;

        /// <summary> WithIs. </summary>
        /// <param name="is"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="is"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="is"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithIsAsync(string @is, RequestOptions options) => throw null;

        /// <summary> WithIs. </summary>
        /// <param name="is"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="is"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="is"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithIs(string @is, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithIs. </summary>
        /// <param name="is"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="is"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="is"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithIsAsync(string @is, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithLambda. </summary>
        /// <param name="lambda"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="lambda"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="lambda"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithLambda(string lambda, RequestOptions options) => throw null;

        /// <summary> WithLambda. </summary>
        /// <param name="lambda"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="lambda"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="lambda"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithLambdaAsync(string lambda, RequestOptions options) => throw null;

        /// <summary> WithLambda. </summary>
        /// <param name="lambda"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="lambda"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="lambda"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithLambda(string lambda, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithLambda. </summary>
        /// <param name="lambda"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="lambda"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="lambda"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithLambdaAsync(string lambda, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithNot. </summary>
        /// <param name="not"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="not"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="not"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithNot(string @not, RequestOptions options) => throw null;

        /// <summary> WithNot. </summary>
        /// <param name="not"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="not"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="not"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithNotAsync(string @not, RequestOptions options) => throw null;

        /// <summary> WithNot. </summary>
        /// <param name="not"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="not"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="not"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithNot(string @not, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithNot. </summary>
        /// <param name="not"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="not"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="not"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithNotAsync(string @not, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithOr. </summary>
        /// <param name="or"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="or"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="or"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithOr(string @or, RequestOptions options) => throw null;

        /// <summary> WithOr. </summary>
        /// <param name="or"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="or"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="or"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithOrAsync(string @or, RequestOptions options) => throw null;

        /// <summary> WithOr. </summary>
        /// <param name="or"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="or"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="or"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithOr(string @or, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithOr. </summary>
        /// <param name="or"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="or"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="or"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithOrAsync(string @or, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithPass. </summary>
        /// <param name="pass"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pass"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="pass"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithPass(string pass, RequestOptions options) => throw null;

        /// <summary> WithPass. </summary>
        /// <param name="pass"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pass"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="pass"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithPassAsync(string pass, RequestOptions options) => throw null;

        /// <summary> WithPass. </summary>
        /// <param name="pass"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pass"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="pass"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithPass(string pass, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithPass. </summary>
        /// <param name="pass"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pass"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="pass"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithPassAsync(string pass, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithRaise. </summary>
        /// <param name="raise"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="raise"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="raise"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithRaise(string raise, RequestOptions options) => throw null;

        /// <summary> WithRaise. </summary>
        /// <param name="raise"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="raise"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="raise"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithRaiseAsync(string raise, RequestOptions options) => throw null;

        /// <summary> WithRaise. </summary>
        /// <param name="raise"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="raise"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="raise"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithRaise(string raise, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithRaise. </summary>
        /// <param name="raise"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="raise"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="raise"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithRaiseAsync(string raise, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithReturn. </summary>
        /// <param name="return"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="return"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="return"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithReturn(string @return, RequestOptions options) => throw null;

        /// <summary> WithReturn. </summary>
        /// <param name="return"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="return"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="return"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithReturnAsync(string @return, RequestOptions options) => throw null;

        /// <summary> WithReturn. </summary>
        /// <param name="return"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="return"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="return"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithReturn(string @return, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithReturn. </summary>
        /// <param name="return"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="return"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="return"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithReturnAsync(string @return, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithTry. </summary>
        /// <param name="try"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="try"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="try"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithTry(string @try, RequestOptions options) => throw null;

        /// <summary> WithTry. </summary>
        /// <param name="try"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="try"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="try"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithTryAsync(string @try, RequestOptions options) => throw null;

        /// <summary> WithTry. </summary>
        /// <param name="try"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="try"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="try"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithTry(string @try, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithTry. </summary>
        /// <param name="try"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="try"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="try"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithTryAsync(string @try, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithWhile. </summary>
        /// <param name="while"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="while"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="while"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithWhile(string @while, RequestOptions options) => throw null;

        /// <summary> WithWhile. </summary>
        /// <param name="while"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="while"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="while"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithWhileAsync(string @while, RequestOptions options) => throw null;

        /// <summary> WithWhile. </summary>
        /// <param name="while"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="while"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="while"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithWhile(string @while, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithWhile. </summary>
        /// <param name="while"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="while"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="while"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithWhileAsync(string @while, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithWith. </summary>
        /// <param name="with"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="with"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="with"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithWith(string @with, RequestOptions options) => throw null;

        /// <summary> WithWith. </summary>
        /// <param name="with"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="with"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="with"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithWithAsync(string @with, RequestOptions options) => throw null;

        /// <summary> WithWith. </summary>
        /// <param name="with"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="with"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="with"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithWith(string @with, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithWith. </summary>
        /// <param name="with"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="with"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="with"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithWithAsync(string @with, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithYield. </summary>
        /// <param name="yield"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="yield"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="yield"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithYield(string @yield, RequestOptions options) => throw null;

        /// <summary> WithYield. </summary>
        /// <param name="yield"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="yield"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="yield"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithYieldAsync(string @yield, RequestOptions options) => throw null;

        /// <summary> WithYield. </summary>
        /// <param name="yield"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="yield"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="yield"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithYield(string @yield, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithYield. </summary>
        /// <param name="yield"></param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="yield"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="yield"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithYieldAsync(string @yield, CancellationToken cancellationToken = default) => throw null;

        /// <summary> WithCancellationToken. </summary>
        /// <param name="cancellationToken"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cancellationToken"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="cancellationToken"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult WithCancellationToken(string cancellationToken, RequestOptions options) => throw null;

        /// <summary> WithCancellationToken. </summary>
        /// <param name="cancellationToken"></param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cancellationToken"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="cancellationToken"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Task<ClientResult> WithCancellationTokenAsync(string cancellationToken, RequestOptions options) => throw null;

        /// <summary> WithCancellationToken. </summary>
        /// <param name="cancellationToken"></param>
        /// <param name="cancellationToken0"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cancellationToken"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="cancellationToken"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ClientResult WithCancellationToken(string cancellationToken, CancellationToken cancellationToken0 = default) => throw null;

        /// <summary> WithCancellationToken. </summary>
        /// <param name="cancellationToken"></param>
        /// <param name="cancellationToken0"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cancellationToken"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="cancellationToken"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Task<ClientResult> WithCancellationTokenAsync(string cancellationToken, CancellationToken cancellationToken0 = default) => throw null;
    }
}
