// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace _Type.Property.ValueTypes
{
    public readonly partial struct ExtendedEnum : IEquatable<ExtendedEnum>
    {
        public ExtendedEnum(string value) => throw null;

        public static ExtendedEnum EnumValue2 => throw null;

        /// <summary> Determines if two <see cref="ExtendedEnum"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(ExtendedEnum left, ExtendedEnum right) => throw null;

        /// <summary> Determines if two <see cref="ExtendedEnum"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(ExtendedEnum left, ExtendedEnum right) => throw null;

        /// <summary> Converts a string to a <see cref="ExtendedEnum"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ExtendedEnum(string value) => throw null;

        /// <summary></summary>
        /// <param name="obj"> The object to compare. </param>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => throw null;

        /// <summary></summary>
        /// <param name="other"> The instance to compare. </param>
        public bool Equals(ExtendedEnum other) => throw null;

        /// <summary></summary>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => throw null;

        /// <summary></summary>
        public override string ToString() => throw null;
    }
}
