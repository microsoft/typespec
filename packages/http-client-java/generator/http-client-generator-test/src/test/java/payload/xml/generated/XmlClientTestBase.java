// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package payload.xml.generated;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.util.Configuration;
import payload.xml.ModelWithArrayOfModelValueClient;
import payload.xml.ModelWithAttributesValueClient;
import payload.xml.ModelWithDictionaryValueClient;
import payload.xml.ModelWithEmptyArrayValueClient;
import payload.xml.ModelWithEncodedNamesValueClient;
import payload.xml.ModelWithOptionalFieldValueClient;
import payload.xml.ModelWithRenamedArraysValueClient;
import payload.xml.ModelWithRenamedFieldsValueClient;
import payload.xml.ModelWithSimpleArraysValueClient;
import payload.xml.ModelWithTextValueClient;
import payload.xml.ModelWithUnwrappedArrayValueClient;
import payload.xml.SimpleModelValueClient;
import payload.xml.XmlClientBuilder;

class XmlClientTestBase extends TestProxyTestBase {
    protected SimpleModelValueClient simpleModelValueClient;

    protected ModelWithSimpleArraysValueClient modelWithSimpleArraysValueClient;

    protected ModelWithArrayOfModelValueClient modelWithArrayOfModelValueClient;

    protected ModelWithOptionalFieldValueClient modelWithOptionalFieldValueClient;

    protected ModelWithAttributesValueClient modelWithAttributesValueClient;

    protected ModelWithUnwrappedArrayValueClient modelWithUnwrappedArrayValueClient;

    protected ModelWithRenamedArraysValueClient modelWithRenamedArraysValueClient;

    protected ModelWithRenamedFieldsValueClient modelWithRenamedFieldsValueClient;

    protected ModelWithEmptyArrayValueClient modelWithEmptyArrayValueClient;

    protected ModelWithTextValueClient modelWithTextValueClient;

    protected ModelWithDictionaryValueClient modelWithDictionaryValueClient;

    protected ModelWithEncodedNamesValueClient modelWithEncodedNamesValueClient;

    @Override
    protected void beforeTest() {
        XmlClientBuilder simpleModelValueClientbuilder = new XmlClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            simpleModelValueClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        simpleModelValueClient = simpleModelValueClientbuilder.buildSimpleModelValueClient();

        XmlClientBuilder modelWithSimpleArraysValueClientbuilder = new XmlClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            modelWithSimpleArraysValueClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        modelWithSimpleArraysValueClient
            = modelWithSimpleArraysValueClientbuilder.buildModelWithSimpleArraysValueClient();

        XmlClientBuilder modelWithArrayOfModelValueClientbuilder = new XmlClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            modelWithArrayOfModelValueClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        modelWithArrayOfModelValueClient
            = modelWithArrayOfModelValueClientbuilder.buildModelWithArrayOfModelValueClient();

        XmlClientBuilder modelWithOptionalFieldValueClientbuilder = new XmlClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            modelWithOptionalFieldValueClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        modelWithOptionalFieldValueClient
            = modelWithOptionalFieldValueClientbuilder.buildModelWithOptionalFieldValueClient();

        XmlClientBuilder modelWithAttributesValueClientbuilder = new XmlClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            modelWithAttributesValueClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        modelWithAttributesValueClient = modelWithAttributesValueClientbuilder.buildModelWithAttributesValueClient();

        XmlClientBuilder modelWithUnwrappedArrayValueClientbuilder = new XmlClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            modelWithUnwrappedArrayValueClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        modelWithUnwrappedArrayValueClient
            = modelWithUnwrappedArrayValueClientbuilder.buildModelWithUnwrappedArrayValueClient();

        XmlClientBuilder modelWithRenamedArraysValueClientbuilder = new XmlClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            modelWithRenamedArraysValueClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        modelWithRenamedArraysValueClient
            = modelWithRenamedArraysValueClientbuilder.buildModelWithRenamedArraysValueClient();

        XmlClientBuilder modelWithRenamedFieldsValueClientbuilder = new XmlClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            modelWithRenamedFieldsValueClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        modelWithRenamedFieldsValueClient
            = modelWithRenamedFieldsValueClientbuilder.buildModelWithRenamedFieldsValueClient();

        XmlClientBuilder modelWithEmptyArrayValueClientbuilder = new XmlClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            modelWithEmptyArrayValueClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        modelWithEmptyArrayValueClient = modelWithEmptyArrayValueClientbuilder.buildModelWithEmptyArrayValueClient();

        XmlClientBuilder modelWithTextValueClientbuilder = new XmlClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            modelWithTextValueClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        modelWithTextValueClient = modelWithTextValueClientbuilder.buildModelWithTextValueClient();

        XmlClientBuilder modelWithDictionaryValueClientbuilder = new XmlClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            modelWithDictionaryValueClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        modelWithDictionaryValueClient = modelWithDictionaryValueClientbuilder.buildModelWithDictionaryValueClient();

        XmlClientBuilder modelWithEncodedNamesValueClientbuilder = new XmlClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            modelWithEncodedNamesValueClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        modelWithEncodedNamesValueClient
            = modelWithEncodedNamesValueClientbuilder.buildModelWithEncodedNamesValueClient();

    }
}
