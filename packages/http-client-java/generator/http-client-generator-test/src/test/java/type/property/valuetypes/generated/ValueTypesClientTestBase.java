// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package type.property.valuetypes.generated;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.util.Configuration;
import type.property.valuetypes.BooleanLiteralClient;
import type.property.valuetypes.BooleanOperationClient;
import type.property.valuetypes.BytesClient;
import type.property.valuetypes.CollectionsIntClient;
import type.property.valuetypes.CollectionsModelClient;
import type.property.valuetypes.CollectionsStringClient;
import type.property.valuetypes.DatetimeOperationClient;
import type.property.valuetypes.Decimal128Client;
import type.property.valuetypes.DecimalClient;
import type.property.valuetypes.DictionaryStringClient;
import type.property.valuetypes.DurationOperationClient;
import type.property.valuetypes.EnumClient;
import type.property.valuetypes.ExtensibleEnumClient;
import type.property.valuetypes.FloatLiteralClient;
import type.property.valuetypes.FloatOperationClient;
import type.property.valuetypes.IntClient;
import type.property.valuetypes.IntLiteralClient;
import type.property.valuetypes.ModelClient;
import type.property.valuetypes.NeverClient;
import type.property.valuetypes.StringLiteralClient;
import type.property.valuetypes.StringOperationClient;
import type.property.valuetypes.UnionEnumValueClient;
import type.property.valuetypes.UnionFloatLiteralClient;
import type.property.valuetypes.UnionIntLiteralClient;
import type.property.valuetypes.UnionStringLiteralClient;
import type.property.valuetypes.UnknownArrayClient;
import type.property.valuetypes.UnknownDictClient;
import type.property.valuetypes.UnknownIntClient;
import type.property.valuetypes.UnknownStringClient;
import type.property.valuetypes.ValueTypesClientBuilder;

class ValueTypesClientTestBase extends TestProxyTestBase {
    protected BooleanOperationClient booleanOperationClient;

    protected StringOperationClient stringOperationClient;

    protected BytesClient bytesClient;

    protected IntClient intClient;

    protected FloatOperationClient floatOperationClient;

    protected DecimalClient decimalClient;

    protected Decimal128Client decimal128Client;

    protected DatetimeOperationClient datetimeOperationClient;

    protected DurationOperationClient durationOperationClient;

    protected EnumClient enumClient;

    protected ExtensibleEnumClient extensibleEnumClient;

    protected ModelClient modelClient;

    protected CollectionsStringClient collectionsStringClient;

    protected CollectionsIntClient collectionsIntClient;

    protected CollectionsModelClient collectionsModelClient;

    protected DictionaryStringClient dictionaryStringClient;

    protected NeverClient neverClient;

    protected UnknownStringClient unknownStringClient;

    protected UnknownIntClient unknownIntClient;

    protected UnknownDictClient unknownDictClient;

    protected UnknownArrayClient unknownArrayClient;

    protected StringLiteralClient stringLiteralClient;

    protected IntLiteralClient intLiteralClient;

    protected FloatLiteralClient floatLiteralClient;

    protected BooleanLiteralClient booleanLiteralClient;

    protected UnionStringLiteralClient unionStringLiteralClient;

    protected UnionIntLiteralClient unionIntLiteralClient;

    protected UnionFloatLiteralClient unionFloatLiteralClient;

    protected UnionEnumValueClient unionEnumValueClient;

    @Override
    protected void beforeTest() {
        ValueTypesClientBuilder booleanOperationClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            booleanOperationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        booleanOperationClient = booleanOperationClientbuilder.buildBooleanOperationClient();

        ValueTypesClientBuilder stringOperationClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            stringOperationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        stringOperationClient = stringOperationClientbuilder.buildStringOperationClient();

        ValueTypesClientBuilder bytesClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            bytesClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        bytesClient = bytesClientbuilder.buildBytesClient();

        ValueTypesClientBuilder intClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            intClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        intClient = intClientbuilder.buildIntClient();

        ValueTypesClientBuilder floatOperationClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            floatOperationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        floatOperationClient = floatOperationClientbuilder.buildFloatOperationClient();

        ValueTypesClientBuilder decimalClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            decimalClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        decimalClient = decimalClientbuilder.buildDecimalClient();

        ValueTypesClientBuilder decimal128Clientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            decimal128Clientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        decimal128Client = decimal128Clientbuilder.buildDecimal128Client();

        ValueTypesClientBuilder datetimeOperationClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            datetimeOperationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        datetimeOperationClient = datetimeOperationClientbuilder.buildDatetimeOperationClient();

        ValueTypesClientBuilder durationOperationClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            durationOperationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        durationOperationClient = durationOperationClientbuilder.buildDurationOperationClient();

        ValueTypesClientBuilder enumClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            enumClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        enumClient = enumClientbuilder.buildEnumClient();

        ValueTypesClientBuilder extensibleEnumClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            extensibleEnumClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        extensibleEnumClient = extensibleEnumClientbuilder.buildExtensibleEnumClient();

        ValueTypesClientBuilder modelClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            modelClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        modelClient = modelClientbuilder.buildModelClient();

        ValueTypesClientBuilder collectionsStringClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            collectionsStringClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        collectionsStringClient = collectionsStringClientbuilder.buildCollectionsStringClient();

        ValueTypesClientBuilder collectionsIntClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            collectionsIntClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        collectionsIntClient = collectionsIntClientbuilder.buildCollectionsIntClient();

        ValueTypesClientBuilder collectionsModelClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            collectionsModelClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        collectionsModelClient = collectionsModelClientbuilder.buildCollectionsModelClient();

        ValueTypesClientBuilder dictionaryStringClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            dictionaryStringClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        dictionaryStringClient = dictionaryStringClientbuilder.buildDictionaryStringClient();

        ValueTypesClientBuilder neverClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            neverClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        neverClient = neverClientbuilder.buildNeverClient();

        ValueTypesClientBuilder unknownStringClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            unknownStringClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        unknownStringClient = unknownStringClientbuilder.buildUnknownStringClient();

        ValueTypesClientBuilder unknownIntClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            unknownIntClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        unknownIntClient = unknownIntClientbuilder.buildUnknownIntClient();

        ValueTypesClientBuilder unknownDictClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            unknownDictClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        unknownDictClient = unknownDictClientbuilder.buildUnknownDictClient();

        ValueTypesClientBuilder unknownArrayClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            unknownArrayClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        unknownArrayClient = unknownArrayClientbuilder.buildUnknownArrayClient();

        ValueTypesClientBuilder stringLiteralClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            stringLiteralClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        stringLiteralClient = stringLiteralClientbuilder.buildStringLiteralClient();

        ValueTypesClientBuilder intLiteralClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            intLiteralClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        intLiteralClient = intLiteralClientbuilder.buildIntLiteralClient();

        ValueTypesClientBuilder floatLiteralClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            floatLiteralClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        floatLiteralClient = floatLiteralClientbuilder.buildFloatLiteralClient();

        ValueTypesClientBuilder booleanLiteralClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            booleanLiteralClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        booleanLiteralClient = booleanLiteralClientbuilder.buildBooleanLiteralClient();

        ValueTypesClientBuilder unionStringLiteralClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            unionStringLiteralClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        unionStringLiteralClient = unionStringLiteralClientbuilder.buildUnionStringLiteralClient();

        ValueTypesClientBuilder unionIntLiteralClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            unionIntLiteralClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        unionIntLiteralClient = unionIntLiteralClientbuilder.buildUnionIntLiteralClient();

        ValueTypesClientBuilder unionFloatLiteralClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            unionFloatLiteralClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        unionFloatLiteralClient = unionFloatLiteralClientbuilder.buildUnionFloatLiteralClient();

        ValueTypesClientBuilder unionEnumValueClientbuilder = new ValueTypesClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            unionEnumValueClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        unionEnumValueClient = unionEnumValueClientbuilder.buildUnionEnumValueClient();

    }
}
