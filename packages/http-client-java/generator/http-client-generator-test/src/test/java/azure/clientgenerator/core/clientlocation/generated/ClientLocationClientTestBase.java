// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.clientgenerator.core.clientlocation.generated;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import azure.clientgenerator.core.clientlocation.ArchiveOperationsClient;
import azure.clientgenerator.core.clientlocation.ClientLocationClient;
import azure.clientgenerator.core.clientlocation.ClientLocationClientBuilder;
import azure.clientgenerator.core.clientlocation.MoveToExistingSubAdminOperationsClient;
import azure.clientgenerator.core.clientlocation.MoveToExistingSubUserOperationsClient;
import azure.clientgenerator.core.clientlocation.MoveToNewSubProductOperationsClient;
import azure.clientgenerator.core.clientlocation.MoveToRootResourceOperationsClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.util.Configuration;

class ClientLocationClientTestBase extends TestProxyTestBase {
    protected ClientLocationClient clientLocationClient;

    protected MoveToExistingSubAdminOperationsClient moveToExistingSubAdminOperationsClient;

    protected MoveToExistingSubUserOperationsClient moveToExistingSubUserOperationsClient;

    protected MoveToNewSubProductOperationsClient moveToNewSubProductOperationsClient;

    protected MoveToRootResourceOperationsClient moveToRootResourceOperationsClient;

    protected ArchiveOperationsClient archiveOperationsClient;

    @Override
    protected void beforeTest() {
        ClientLocationClientBuilder clientLocationClientbuilder = new ClientLocationClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            clientLocationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        clientLocationClient = clientLocationClientbuilder.buildClient();

        ClientLocationClientBuilder moveToExistingSubAdminOperationsClientbuilder = new ClientLocationClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            moveToExistingSubAdminOperationsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        moveToExistingSubAdminOperationsClient
            = moveToExistingSubAdminOperationsClientbuilder.buildMoveToExistingSubAdminOperationsClient();

        ClientLocationClientBuilder moveToExistingSubUserOperationsClientbuilder = new ClientLocationClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            moveToExistingSubUserOperationsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        moveToExistingSubUserOperationsClient
            = moveToExistingSubUserOperationsClientbuilder.buildMoveToExistingSubUserOperationsClient();

        ClientLocationClientBuilder moveToNewSubProductOperationsClientbuilder = new ClientLocationClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            moveToNewSubProductOperationsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        moveToNewSubProductOperationsClient
            = moveToNewSubProductOperationsClientbuilder.buildMoveToNewSubProductOperationsClient();

        ClientLocationClientBuilder moveToRootResourceOperationsClientbuilder = new ClientLocationClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            moveToRootResourceOperationsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        moveToRootResourceOperationsClient
            = moveToRootResourceOperationsClientbuilder.buildMoveToRootResourceOperationsClient();

        ClientLocationClientBuilder archiveOperationsClientbuilder = new ClientLocationClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            archiveOperationsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        archiveOperationsClient = archiveOperationsClientbuilder.buildArchiveOperationsClient();

    }
}
