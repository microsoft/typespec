// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.clientgenerator.core.clientinitialization.generated;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import azure.clientgenerator.core.clientinitialization.HeaderParamClient;
import azure.clientgenerator.core.clientinitialization.HeaderParamClientBuilder;
import azure.clientgenerator.core.clientinitialization.MixedParamsClient;
import azure.clientgenerator.core.clientinitialization.MixedParamsClientBuilder;
import azure.clientgenerator.core.clientinitialization.MultipleParamsClient;
import azure.clientgenerator.core.clientinitialization.MultipleParamsClientBuilder;
import azure.clientgenerator.core.clientinitialization.ParamAliasClient;
import azure.clientgenerator.core.clientinitialization.ParamAliasClientBuilder;
import azure.clientgenerator.core.clientinitialization.PathParamClient;
import azure.clientgenerator.core.clientinitialization.PathParamClientBuilder;
import azure.clientgenerator.core.clientinitialization.parentclient.ChildClient;
import azure.clientgenerator.core.clientinitialization.parentclient.ChildClientBuilder;
import azure.clientgenerator.core.clientinitialization.parentclient.ParentClient;
import azure.clientgenerator.core.clientinitialization.parentclient.ParentClientBuilder;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.util.Configuration;

class HeaderParamClientTestBase extends TestProxyTestBase {
    protected HeaderParamClient headerParamClient;

    protected MultipleParamsClient multipleParamsClient;

    protected MixedParamsClient mixedParamsClient;

    protected PathParamClient pathParamClient;

    protected ParamAliasClient paramAliasClient;

    protected ChildClient childClient;

    protected ParentClient parentClient;

    @Override
    protected void beforeTest() {
        HeaderParamClientBuilder headerParamClientbuilder = new HeaderParamClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .name(Configuration.getGlobalConfiguration().get("NAME", "name"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            headerParamClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        headerParamClient = headerParamClientbuilder.buildClient();

        MultipleParamsClientBuilder multipleParamsClientbuilder = new MultipleParamsClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .name(Configuration.getGlobalConfiguration().get("NAME", "name"))
            .region(Configuration.getGlobalConfiguration().get("REGION", "region"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            multipleParamsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        multipleParamsClient = multipleParamsClientbuilder.buildClient();

        MixedParamsClientBuilder mixedParamsClientbuilder = new MixedParamsClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .name(Configuration.getGlobalConfiguration().get("NAME", "name"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            mixedParamsClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        mixedParamsClient = mixedParamsClientbuilder.buildClient();

        PathParamClientBuilder pathParamClientbuilder = new PathParamClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .blobName(Configuration.getGlobalConfiguration().get("BLOBNAME", "blobname"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            pathParamClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        pathParamClient = pathParamClientbuilder.buildClient();

        ParamAliasClientBuilder paramAliasClientbuilder = new ParamAliasClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .blobName(Configuration.getGlobalConfiguration().get("BLOBNAME", "blobname"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            paramAliasClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        paramAliasClient = paramAliasClientbuilder.buildClient();

        ChildClientBuilder childClientbuilder = new ChildClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .blobName(Configuration.getGlobalConfiguration().get("BLOBNAME", "blobname"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            childClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        childClient = childClientbuilder.buildClient();

        ParentClientBuilder parentClientbuilder = new ParentClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            parentClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        parentClient = parentClientbuilder.buildClient();

    }
}
