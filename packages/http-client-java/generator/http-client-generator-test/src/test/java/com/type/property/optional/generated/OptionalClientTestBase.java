// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.type.property.optional.generated;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.util.Configuration;
import com.type.property.optional.BooleanLiteralClient;
import com.type.property.optional.BytesClient;
import com.type.property.optional.CollectionsByteClient;
import com.type.property.optional.CollectionsModelClient;
import com.type.property.optional.DatetimeOperationClient;
import com.type.property.optional.DurationOperationClient;
import com.type.property.optional.FloatLiteralClient;
import com.type.property.optional.IntLiteralClient;
import com.type.property.optional.OptionalClientBuilder;
import com.type.property.optional.PlainDateClient;
import com.type.property.optional.PlainTimeClient;
import com.type.property.optional.RequiredAndOptionalClient;
import com.type.property.optional.StringLiteralClient;
import com.type.property.optional.StringOperationClient;
import com.type.property.optional.UnionFloatLiteralClient;
import com.type.property.optional.UnionIntLiteralClient;
import com.type.property.optional.UnionStringLiteralClient;

class OptionalClientTestBase extends TestProxyTestBase {
    protected StringOperationClient stringOperationClient;

    protected BytesClient bytesClient;

    protected DatetimeOperationClient datetimeOperationClient;

    protected DurationOperationClient durationOperationClient;

    protected PlainDateClient plainDateClient;

    protected PlainTimeClient plainTimeClient;

    protected CollectionsByteClient collectionsByteClient;

    protected CollectionsModelClient collectionsModelClient;

    protected StringLiteralClient stringLiteralClient;

    protected IntLiteralClient intLiteralClient;

    protected FloatLiteralClient floatLiteralClient;

    protected BooleanLiteralClient booleanLiteralClient;

    protected UnionStringLiteralClient unionStringLiteralClient;

    protected UnionIntLiteralClient unionIntLiteralClient;

    protected UnionFloatLiteralClient unionFloatLiteralClient;

    protected RequiredAndOptionalClient requiredAndOptionalClient;

    @Override
    protected void beforeTest() {
        OptionalClientBuilder stringOperationClientbuilder = new OptionalClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            stringOperationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        stringOperationClient = stringOperationClientbuilder.buildStringOperationClient();

        OptionalClientBuilder bytesClientbuilder = new OptionalClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            bytesClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        bytesClient = bytesClientbuilder.buildBytesClient();

        OptionalClientBuilder datetimeOperationClientbuilder = new OptionalClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            datetimeOperationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        datetimeOperationClient = datetimeOperationClientbuilder.buildDatetimeOperationClient();

        OptionalClientBuilder durationOperationClientbuilder = new OptionalClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            durationOperationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        durationOperationClient = durationOperationClientbuilder.buildDurationOperationClient();

        OptionalClientBuilder plainDateClientbuilder = new OptionalClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            plainDateClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        plainDateClient = plainDateClientbuilder.buildPlainDateClient();

        OptionalClientBuilder plainTimeClientbuilder = new OptionalClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            plainTimeClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        plainTimeClient = plainTimeClientbuilder.buildPlainTimeClient();

        OptionalClientBuilder collectionsByteClientbuilder = new OptionalClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            collectionsByteClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        collectionsByteClient = collectionsByteClientbuilder.buildCollectionsByteClient();

        OptionalClientBuilder collectionsModelClientbuilder = new OptionalClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            collectionsModelClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        collectionsModelClient = collectionsModelClientbuilder.buildCollectionsModelClient();

        OptionalClientBuilder stringLiteralClientbuilder = new OptionalClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            stringLiteralClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        stringLiteralClient = stringLiteralClientbuilder.buildStringLiteralClient();

        OptionalClientBuilder intLiteralClientbuilder = new OptionalClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            intLiteralClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        intLiteralClient = intLiteralClientbuilder.buildIntLiteralClient();

        OptionalClientBuilder floatLiteralClientbuilder = new OptionalClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            floatLiteralClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        floatLiteralClient = floatLiteralClientbuilder.buildFloatLiteralClient();

        OptionalClientBuilder booleanLiteralClientbuilder = new OptionalClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            booleanLiteralClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        booleanLiteralClient = booleanLiteralClientbuilder.buildBooleanLiteralClient();

        OptionalClientBuilder unionStringLiteralClientbuilder = new OptionalClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            unionStringLiteralClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        unionStringLiteralClient = unionStringLiteralClientbuilder.buildUnionStringLiteralClient();

        OptionalClientBuilder unionIntLiteralClientbuilder = new OptionalClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            unionIntLiteralClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        unionIntLiteralClient = unionIntLiteralClientbuilder.buildUnionIntLiteralClient();

        OptionalClientBuilder unionFloatLiteralClientbuilder = new OptionalClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            unionFloatLiteralClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        unionFloatLiteralClient = unionFloatLiteralClientbuilder.buildUnionFloatLiteralClient();

        OptionalClientBuilder requiredAndOptionalClientbuilder = new OptionalClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.RECORD) {
            requiredAndOptionalClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        requiredAndOptionalClient = requiredAndOptionalClientbuilder.buildRequiredAndOptionalClient();

    }
}
