// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package payload.xml;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.client.traits.ConfigurationTrait;
import com.azure.core.client.traits.EndpointTrait;
import com.azure.core.client.traits.HttpTrait;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.AddHeadersPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.ClientOptions;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.builder.ClientBuilderUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.JacksonAdapter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import payload.xml.implementation.XmlClientImpl;

/**
 * A builder for creating a new instance of the XmlClient type.
 */
@ServiceClientBuilder(
    serviceClients = {
        SimpleModelValueClient.class,
        ModelWithSimpleArraysValueClient.class,
        ModelWithArrayOfModelValueClient.class,
        ModelWithOptionalFieldValueClient.class,
        ModelWithAttributesValueClient.class,
        ModelWithUnwrappedArrayValueClient.class,
        ModelWithRenamedArraysValueClient.class,
        ModelWithRenamedFieldsValueClient.class,
        ModelWithEmptyArrayValueClient.class,
        ModelWithTextValueClient.class,
        ModelWithDictionaryValueClient.class,
        ModelWithEncodedNamesValueClient.class,
        SimpleModelValueAsyncClient.class,
        ModelWithSimpleArraysValueAsyncClient.class,
        ModelWithArrayOfModelValueAsyncClient.class,
        ModelWithOptionalFieldValueAsyncClient.class,
        ModelWithAttributesValueAsyncClient.class,
        ModelWithUnwrappedArrayValueAsyncClient.class,
        ModelWithRenamedArraysValueAsyncClient.class,
        ModelWithRenamedFieldsValueAsyncClient.class,
        ModelWithEmptyArrayValueAsyncClient.class,
        ModelWithTextValueAsyncClient.class,
        ModelWithDictionaryValueAsyncClient.class,
        ModelWithEncodedNamesValueAsyncClient.class })
public final class XmlClientBuilder
    implements HttpTrait<XmlClientBuilder>, ConfigurationTrait<XmlClientBuilder>, EndpointTrait<XmlClientBuilder> {
    @Generated
    private static final String SDK_NAME = "name";

    @Generated
    private static final String SDK_VERSION = "version";

    @Generated
    private static final Map<String, String> PROPERTIES = CoreUtils.getProperties("payload-xml.properties");

    @Generated
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /**
     * Create an instance of the XmlClientBuilder.
     */
    @Generated
    public XmlClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * The HTTP client used to send the request.
     */
    @Generated
    private HttpClient httpClient;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public XmlClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The HTTP pipeline to send requests through.
     */
    @Generated
    private HttpPipeline pipeline;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public XmlClientBuilder pipeline(HttpPipeline pipeline) {
        if (this.pipeline != null && pipeline == null) {
            LOGGER.atInfo().log("HttpPipeline is being set to 'null' when it was previously configured.");
        }
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    @Generated
    private HttpLogOptions httpLogOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public XmlClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The client options such as application ID and custom headers to set on a request.
     */
    @Generated
    private ClientOptions clientOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public XmlClientBuilder clientOptions(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        return this;
    }

    /*
     * The retry options to configure retry policy for failed requests.
     */
    @Generated
    private RetryOptions retryOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public XmlClientBuilder retryOptions(RetryOptions retryOptions) {
        this.retryOptions = retryOptions;
        return this;
    }

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public XmlClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        Objects.requireNonNull(customPolicy, "'customPolicy' cannot be null.");
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /*
     * The configuration store that is used during construction of the service client.
     */
    @Generated
    private Configuration configuration;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public XmlClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The service endpoint
     */
    @Generated
    private String endpoint;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public XmlClientBuilder endpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if applicable.
     */
    @Generated
    private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     * 
     * @param retryPolicy the retryPolicy value.
     * @return the XmlClientBuilder.
     */
    @Generated
    public XmlClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /**
     * Builds an instance of XmlClientImpl with the provided parameters.
     * 
     * @return an instance of XmlClientImpl.
     */
    @Generated
    private XmlClientImpl buildInnerClient() {
        this.validateClient();
        HttpPipeline localPipeline = (pipeline != null) ? pipeline : createHttpPipeline();
        String localEndpoint = (endpoint != null) ? endpoint : "http://localhost:3000";
        XmlClientImpl client
            = new XmlClientImpl(localPipeline, JacksonAdapter.createDefaultSerializerAdapter(), localEndpoint);
        return client;
    }

    @Generated
    private void validateClient() {
        // This method is invoked from 'buildInnerClient'/'buildClient' method.
        // Developer can customize this method, to validate that the necessary conditions are met for the new client.
    }

    @Generated
    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration
            = (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        HttpLogOptions localHttpLogOptions = this.httpLogOptions == null ? new HttpLogOptions() : this.httpLogOptions;
        ClientOptions localClientOptions = this.clientOptions == null ? new ClientOptions() : this.clientOptions;
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        String clientName = PROPERTIES.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, "UnknownVersion");
        String applicationId = CoreUtils.getApplicationId(localClientOptions, localHttpLogOptions);
        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));
        policies.add(new RequestIdPolicy());
        policies.add(new AddHeadersFromContextPolicy());
        HttpHeaders headers = CoreUtils.createHttpHeadersFromClientOptions(localClientOptions);
        if (headers != null) {
            policies.add(new AddHeadersPolicy(headers));
        }
        this.pipelinePolicies.stream()
            .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(ClientBuilderUtil.validateAndGetRetryPolicy(retryPolicy, retryOptions, new RetryPolicy()));
        policies.add(new AddDatePolicy());
        this.pipelinePolicies.stream()
            .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
        HttpPipeline httpPipeline = new HttpPipelineBuilder().policies(policies.toArray(new HttpPipelinePolicy[0]))
            .httpClient(httpClient)
            .clientOptions(localClientOptions)
            .build();
        return httpPipeline;
    }

    /**
     * Builds an instance of SimpleModelValueAsyncClient class.
     * 
     * @return an instance of SimpleModelValueAsyncClient.
     */
    @Generated
    public SimpleModelValueAsyncClient buildSimpleModelValueAsyncClient() {
        return new SimpleModelValueAsyncClient(buildInnerClient().getSimpleModelValues());
    }

    /**
     * Builds an instance of ModelWithSimpleArraysValueAsyncClient class.
     * 
     * @return an instance of ModelWithSimpleArraysValueAsyncClient.
     */
    @Generated
    public ModelWithSimpleArraysValueAsyncClient buildModelWithSimpleArraysValueAsyncClient() {
        return new ModelWithSimpleArraysValueAsyncClient(buildInnerClient().getModelWithSimpleArraysValues());
    }

    /**
     * Builds an instance of ModelWithArrayOfModelValueAsyncClient class.
     * 
     * @return an instance of ModelWithArrayOfModelValueAsyncClient.
     */
    @Generated
    public ModelWithArrayOfModelValueAsyncClient buildModelWithArrayOfModelValueAsyncClient() {
        return new ModelWithArrayOfModelValueAsyncClient(buildInnerClient().getModelWithArrayOfModelValues());
    }

    /**
     * Builds an instance of ModelWithOptionalFieldValueAsyncClient class.
     * 
     * @return an instance of ModelWithOptionalFieldValueAsyncClient.
     */
    @Generated
    public ModelWithOptionalFieldValueAsyncClient buildModelWithOptionalFieldValueAsyncClient() {
        return new ModelWithOptionalFieldValueAsyncClient(buildInnerClient().getModelWithOptionalFieldValues());
    }

    /**
     * Builds an instance of ModelWithAttributesValueAsyncClient class.
     * 
     * @return an instance of ModelWithAttributesValueAsyncClient.
     */
    @Generated
    public ModelWithAttributesValueAsyncClient buildModelWithAttributesValueAsyncClient() {
        return new ModelWithAttributesValueAsyncClient(buildInnerClient().getModelWithAttributesValues());
    }

    /**
     * Builds an instance of ModelWithUnwrappedArrayValueAsyncClient class.
     * 
     * @return an instance of ModelWithUnwrappedArrayValueAsyncClient.
     */
    @Generated
    public ModelWithUnwrappedArrayValueAsyncClient buildModelWithUnwrappedArrayValueAsyncClient() {
        return new ModelWithUnwrappedArrayValueAsyncClient(buildInnerClient().getModelWithUnwrappedArrayValues());
    }

    /**
     * Builds an instance of ModelWithRenamedArraysValueAsyncClient class.
     * 
     * @return an instance of ModelWithRenamedArraysValueAsyncClient.
     */
    @Generated
    public ModelWithRenamedArraysValueAsyncClient buildModelWithRenamedArraysValueAsyncClient() {
        return new ModelWithRenamedArraysValueAsyncClient(buildInnerClient().getModelWithRenamedArraysValues());
    }

    /**
     * Builds an instance of ModelWithRenamedFieldsValueAsyncClient class.
     * 
     * @return an instance of ModelWithRenamedFieldsValueAsyncClient.
     */
    @Generated
    public ModelWithRenamedFieldsValueAsyncClient buildModelWithRenamedFieldsValueAsyncClient() {
        return new ModelWithRenamedFieldsValueAsyncClient(buildInnerClient().getModelWithRenamedFieldsValues());
    }

    /**
     * Builds an instance of ModelWithEmptyArrayValueAsyncClient class.
     * 
     * @return an instance of ModelWithEmptyArrayValueAsyncClient.
     */
    @Generated
    public ModelWithEmptyArrayValueAsyncClient buildModelWithEmptyArrayValueAsyncClient() {
        return new ModelWithEmptyArrayValueAsyncClient(buildInnerClient().getModelWithEmptyArrayValues());
    }

    /**
     * Builds an instance of ModelWithTextValueAsyncClient class.
     * 
     * @return an instance of ModelWithTextValueAsyncClient.
     */
    @Generated
    public ModelWithTextValueAsyncClient buildModelWithTextValueAsyncClient() {
        return new ModelWithTextValueAsyncClient(buildInnerClient().getModelWithTextValues());
    }

    /**
     * Builds an instance of ModelWithDictionaryValueAsyncClient class.
     * 
     * @return an instance of ModelWithDictionaryValueAsyncClient.
     */
    @Generated
    public ModelWithDictionaryValueAsyncClient buildModelWithDictionaryValueAsyncClient() {
        return new ModelWithDictionaryValueAsyncClient(buildInnerClient().getModelWithDictionaryValues());
    }

    /**
     * Builds an instance of ModelWithEncodedNamesValueAsyncClient class.
     * 
     * @return an instance of ModelWithEncodedNamesValueAsyncClient.
     */
    @Generated
    public ModelWithEncodedNamesValueAsyncClient buildModelWithEncodedNamesValueAsyncClient() {
        return new ModelWithEncodedNamesValueAsyncClient(buildInnerClient().getModelWithEncodedNamesValues());
    }

    /**
     * Builds an instance of SimpleModelValueClient class.
     * 
     * @return an instance of SimpleModelValueClient.
     */
    @Generated
    public SimpleModelValueClient buildSimpleModelValueClient() {
        return new SimpleModelValueClient(buildInnerClient().getSimpleModelValues());
    }

    /**
     * Builds an instance of ModelWithSimpleArraysValueClient class.
     * 
     * @return an instance of ModelWithSimpleArraysValueClient.
     */
    @Generated
    public ModelWithSimpleArraysValueClient buildModelWithSimpleArraysValueClient() {
        return new ModelWithSimpleArraysValueClient(buildInnerClient().getModelWithSimpleArraysValues());
    }

    /**
     * Builds an instance of ModelWithArrayOfModelValueClient class.
     * 
     * @return an instance of ModelWithArrayOfModelValueClient.
     */
    @Generated
    public ModelWithArrayOfModelValueClient buildModelWithArrayOfModelValueClient() {
        return new ModelWithArrayOfModelValueClient(buildInnerClient().getModelWithArrayOfModelValues());
    }

    /**
     * Builds an instance of ModelWithOptionalFieldValueClient class.
     * 
     * @return an instance of ModelWithOptionalFieldValueClient.
     */
    @Generated
    public ModelWithOptionalFieldValueClient buildModelWithOptionalFieldValueClient() {
        return new ModelWithOptionalFieldValueClient(buildInnerClient().getModelWithOptionalFieldValues());
    }

    /**
     * Builds an instance of ModelWithAttributesValueClient class.
     * 
     * @return an instance of ModelWithAttributesValueClient.
     */
    @Generated
    public ModelWithAttributesValueClient buildModelWithAttributesValueClient() {
        return new ModelWithAttributesValueClient(buildInnerClient().getModelWithAttributesValues());
    }

    /**
     * Builds an instance of ModelWithUnwrappedArrayValueClient class.
     * 
     * @return an instance of ModelWithUnwrappedArrayValueClient.
     */
    @Generated
    public ModelWithUnwrappedArrayValueClient buildModelWithUnwrappedArrayValueClient() {
        return new ModelWithUnwrappedArrayValueClient(buildInnerClient().getModelWithUnwrappedArrayValues());
    }

    /**
     * Builds an instance of ModelWithRenamedArraysValueClient class.
     * 
     * @return an instance of ModelWithRenamedArraysValueClient.
     */
    @Generated
    public ModelWithRenamedArraysValueClient buildModelWithRenamedArraysValueClient() {
        return new ModelWithRenamedArraysValueClient(buildInnerClient().getModelWithRenamedArraysValues());
    }

    /**
     * Builds an instance of ModelWithRenamedFieldsValueClient class.
     * 
     * @return an instance of ModelWithRenamedFieldsValueClient.
     */
    @Generated
    public ModelWithRenamedFieldsValueClient buildModelWithRenamedFieldsValueClient() {
        return new ModelWithRenamedFieldsValueClient(buildInnerClient().getModelWithRenamedFieldsValues());
    }

    /**
     * Builds an instance of ModelWithEmptyArrayValueClient class.
     * 
     * @return an instance of ModelWithEmptyArrayValueClient.
     */
    @Generated
    public ModelWithEmptyArrayValueClient buildModelWithEmptyArrayValueClient() {
        return new ModelWithEmptyArrayValueClient(buildInnerClient().getModelWithEmptyArrayValues());
    }

    /**
     * Builds an instance of ModelWithTextValueClient class.
     * 
     * @return an instance of ModelWithTextValueClient.
     */
    @Generated
    public ModelWithTextValueClient buildModelWithTextValueClient() {
        return new ModelWithTextValueClient(buildInnerClient().getModelWithTextValues());
    }

    /**
     * Builds an instance of ModelWithDictionaryValueClient class.
     * 
     * @return an instance of ModelWithDictionaryValueClient.
     */
    @Generated
    public ModelWithDictionaryValueClient buildModelWithDictionaryValueClient() {
        return new ModelWithDictionaryValueClient(buildInnerClient().getModelWithDictionaryValues());
    }

    /**
     * Builds an instance of ModelWithEncodedNamesValueClient class.
     * 
     * @return an instance of ModelWithEncodedNamesValueClient.
     */
    @Generated
    public ModelWithEncodedNamesValueClient buildModelWithEncodedNamesValueClient() {
        return new ModelWithEncodedNamesValueClient(buildInnerClient().getModelWithEncodedNamesValues());
    }

    private static final ClientLogger LOGGER = new ClientLogger(XmlClientBuilder.class);
}
