// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package payload.pageable.serverdrivenpagination.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The LinkResponseLinks model.
 */
@Immutable
public final class LinkResponseLinks implements JsonSerializable<LinkResponseLinks> {
    /*
     * The next property.
     */
    @Generated
    private String next;

    /*
     * The prev property.
     */
    @Generated
    private String prev;

    /*
     * The first property.
     */
    @Generated
    private String first;

    /*
     * The last property.
     */
    @Generated
    private String last;

    /**
     * Creates an instance of LinkResponseLinks class.
     */
    @Generated
    private LinkResponseLinks() {
    }

    /**
     * Get the next property: The next property.
     * 
     * @return the next value.
     */
    @Generated
    public String getNext() {
        return this.next;
    }

    /**
     * Get the prev property: The prev property.
     * 
     * @return the prev value.
     */
    @Generated
    public String getPrev() {
        return this.prev;
    }

    /**
     * Get the first property: The first property.
     * 
     * @return the first value.
     */
    @Generated
    public String getFirst() {
        return this.first;
    }

    /**
     * Get the last property: The last property.
     * 
     * @return the last value.
     */
    @Generated
    public String getLast() {
        return this.last;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("next", this.next);
        jsonWriter.writeStringField("prev", this.prev);
        jsonWriter.writeStringField("first", this.first);
        jsonWriter.writeStringField("last", this.last);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinkResponseLinks from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinkResponseLinks if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LinkResponseLinks.
     */
    @Generated
    public static LinkResponseLinks fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LinkResponseLinks deserializedLinkResponseLinks = new LinkResponseLinks();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("next".equals(fieldName)) {
                    deserializedLinkResponseLinks.next = reader.getString();
                } else if ("prev".equals(fieldName)) {
                    deserializedLinkResponseLinks.prev = reader.getString();
                } else if ("first".equals(fieldName)) {
                    deserializedLinkResponseLinks.first = reader.getString();
                } else if ("last".equals(fieldName)) {
                    deserializedLinkResponseLinks.last = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinkResponseLinks;
        });
    }
}
