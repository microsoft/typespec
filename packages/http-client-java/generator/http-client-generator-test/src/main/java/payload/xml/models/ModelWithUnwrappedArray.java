// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package payload.xml.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlSerializable;
import com.azure.xml.XmlToken;
import com.azure.xml.XmlWriter;
import java.util.ArrayList;
import java.util.List;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

/**
 * Contains fields of wrapped and unwrapped arrays of primitive types.
 */
@Immutable
public final class ModelWithUnwrappedArray implements XmlSerializable<ModelWithUnwrappedArray> {
    /*
     * The colors property.
     */
    @Generated
    private final List<String> colors = new ArrayList<>();

    /*
     * The counts property.
     */
    @Generated
    private final List<Integer> counts;

    /**
     * Creates an instance of ModelWithUnwrappedArray class.
     * 
     * @param colors the colors value to set.
     * @param counts the counts value to set.
     */
    @Generated
    public ModelWithUnwrappedArray(List<String> colors, List<Integer> counts) {
        this.colors = colors;
        this.counts = counts;
    }

    /**
     * Get the colors property: The colors property.
     * 
     * @return the colors value.
     */
    @Generated
    public List<String> getColors() {
        return this.colors;
    }

    /**
     * Get the counts property: The counts property.
     * 
     * @return the counts value.
     */
    @Generated
    public List<Integer> getCounts() {
        if (this.counts == null) {
            this.counts = new ArrayList<>();
        }
        return this.counts;
    }

    @Generated
    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        return toXml(xmlWriter, null);
    }

    @Generated
    @Override
    public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
        rootElementName
            = rootElementName == null || rootElementName.isEmpty() ? "ModelWithUnwrappedArray" : rootElementName;
        xmlWriter.writeStartElement(rootElementName);
        if (this.counts != null) {
            xmlWriter.writeStartElement("counts");
            for (int element : this.counts) {
                xmlWriter.writeIntElement("int32", element);
            }
            xmlWriter.writeEndElement();
        }
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of ModelWithUnwrappedArray from the XmlReader.
     * 
     * @param xmlReader The XmlReader being read.
     * @return An instance of ModelWithUnwrappedArray if the XmlReader was pointing to an instance of it, or null if it
     * was pointing to XML null.
     * @throws IllegalStateException If the deserialized XML object was missing any required properties.
     * @throws XMLStreamException If an error occurs while reading the ModelWithUnwrappedArray.
     */
    @Generated
    public static ModelWithUnwrappedArray fromXml(XmlReader xmlReader) throws XMLStreamException {
        return fromXml(xmlReader, null);
    }

    /**
     * Reads an instance of ModelWithUnwrappedArray from the XmlReader.
     * 
     * @param xmlReader The XmlReader being read.
     * @param rootElementName Optional root element name to override the default defined by the model. Used to support
     * cases where the model can deserialize from different root element names.
     * @return An instance of ModelWithUnwrappedArray if the XmlReader was pointing to an instance of it, or null if it
     * was pointing to XML null.
     * @throws IllegalStateException If the deserialized XML object was missing any required properties.
     * @throws XMLStreamException If an error occurs while reading the ModelWithUnwrappedArray.
     */
    @Generated
    public static ModelWithUnwrappedArray fromXml(XmlReader xmlReader, String rootElementName)
        throws XMLStreamException {
        String finalRootElementName
            = rootElementName == null || rootElementName.isEmpty() ? "ModelWithUnwrappedArray" : rootElementName;
        return xmlReader.readObject(finalRootElementName, reader -> {
            List<Integer> counts = null;
            List<String> colors = null;
            while (reader.nextElement() != XmlToken.END_ELEMENT) {
                QName elementName = reader.getElementName();

                if ("counts".equals(elementName.getLocalPart())) {
                    while (reader.nextElement() != XmlToken.END_ELEMENT) {
                        elementName = reader.getElementName();
                        if ("int32".equals(elementName.getLocalPart())) {
                            if (counts == null) {
                                counts = new ArrayList<>();
                            }
                            counts.add(reader.getIntElement());
                        } else {
                            reader.skipElement();
                        }
                    }
                } else {
                    reader.skipElement();
                }
            }
            return new ModelWithUnwrappedArray(colors, counts);
        });
    }
}
