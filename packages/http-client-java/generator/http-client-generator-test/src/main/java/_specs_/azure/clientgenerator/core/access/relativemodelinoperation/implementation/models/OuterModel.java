// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package _specs_.azure.clientgenerator.core.access.relativemodelinoperation.implementation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Used in internal operations, should be generated but not exported.
 */
@Immutable
public final class OuterModel extends BaseModel {
    /*
     * The inner property.
     */
    @Generated
    private final InnerModel inner;

    /**
     * Creates an instance of OuterModel class.
     * 
     * @param name the name value to set.
     * @param inner the inner value to set.
     */
    @Generated
    private OuterModel(String name, InnerModel inner) {
        super(name);
        this.inner = inner;
    }

    /**
     * Get the inner property: The inner property.
     * 
     * @return the inner value.
     */
    @Generated
    public InnerModel getInner() {
        return this.inner;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeJsonField("inner", this.inner);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OuterModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OuterModel if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OuterModel.
     */
    @Generated
    public static OuterModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            InnerModel inner = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("inner".equals(fieldName)) {
                    inner = InnerModel.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new OuterModel(name, inner);
        });
    }
}
