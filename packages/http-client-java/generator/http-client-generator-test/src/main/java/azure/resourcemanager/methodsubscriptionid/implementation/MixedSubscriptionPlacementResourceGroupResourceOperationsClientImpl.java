// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.resourcemanager.methodsubscriptionid.implementation;

import azure.resourcemanager.methodsubscriptionid.fluent.MixedSubscriptionPlacementResourceGroupResourceOperationsClient;
import azure.resourcemanager.methodsubscriptionid.fluent.models.ResourceGroupResourceInner;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * MixedSubscriptionPlacementResourceGroupResourceOperationsClient.
 */
public final class MixedSubscriptionPlacementResourceGroupResourceOperationsClientImpl
    implements MixedSubscriptionPlacementResourceGroupResourceOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final MixedSubscriptionPlacementResourceGroupResourceOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final MethodSubscriptionIdClientImpl client;

    /**
     * Initializes an instance of MixedSubscriptionPlacementResourceGroupResourceOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    MixedSubscriptionPlacementResourceGroupResourceOperationsClientImpl(MethodSubscriptionIdClientImpl client) {
        this.service = RestProxy.create(MixedSubscriptionPlacementResourceGroupResourceOperationsService.class,
            client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * MethodSubscriptionIdClientMixedSubscriptionPlacementResourceGroupResourceOperations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MethodSubscriptionIdClientMixedSubscriptionPlacementResourceGroupResourceOperations")
    public interface MixedSubscriptionPlacementResourceGroupResourceOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.MethodSubscriptionId/resourceGroupResources/{resourceGroupResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceGroupResourceInner>> getByResourceGroup(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceGroupResourceName") String resourceGroupResourceName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.MethodSubscriptionId/resourceGroupResources/{resourceGroupResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ResourceGroupResourceInner> getByResourceGroupSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceGroupResourceName") String resourceGroupResourceName,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.MethodSubscriptionId/resourceGroupResources/{resourceGroupResourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceGroupResourceInner>> put(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceGroupResourceName") String resourceGroupResourceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ResourceGroupResourceInner resource, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.MethodSubscriptionId/resourceGroupResources/{resourceGroupResourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ResourceGroupResourceInner> putSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceGroupResourceName") String resourceGroupResourceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ResourceGroupResourceInner resource, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.MethodSubscriptionId/resourceGroupResources/{resourceGroupResourceName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceGroupResourceName") String resourceGroupResourceName, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.MethodSubscriptionId/resourceGroupResources/{resourceGroupResourceName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<Void> deleteSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceGroupResourceName") String resourceGroupResourceName, Context context);
    }

    /**
     * Get a ResourceGroupResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGroupResourceName The name of the ResourceGroupResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ResourceGroupResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ResourceGroupResourceInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String resourceGroupResourceName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, resourceGroupResourceName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a ResourceGroupResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGroupResourceName The name of the ResourceGroupResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ResourceGroupResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceGroupResourceInner> getByResourceGroupAsync(String resourceGroupName,
        String resourceGroupResourceName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, resourceGroupResourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a ResourceGroupResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGroupResourceName The name of the ResourceGroupResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ResourceGroupResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ResourceGroupResourceInner> getByResourceGroupWithResponse(String resourceGroupName,
        String resourceGroupResourceName, Context context) {
        final String accept = "application/json";
        return service.getByResourceGroupSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, resourceGroupResourceName, accept, context);
    }

    /**
     * Get a ResourceGroupResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGroupResourceName The name of the ResourceGroupResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ResourceGroupResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResourceGroupResourceInner getByResourceGroup(String resourceGroupName, String resourceGroupResourceName) {
        return getByResourceGroupWithResponse(resourceGroupName, resourceGroupResourceName, Context.NONE).getValue();
    }

    /**
     * Create a ResourceGroupResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGroupResourceName The name of the ResourceGroupResource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete tracked resource types can be created by aliasing this type using a specific property type along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ResourceGroupResourceInner>> putWithResponseAsync(String resourceGroupName,
        String resourceGroupResourceName, ResourceGroupResourceInner resource) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.put(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, resourceGroupResourceName, contentType, accept,
                resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a ResourceGroupResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGroupResourceName The name of the ResourceGroupResource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete tracked resource types can be created by aliasing this type using a specific property type on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceGroupResourceInner> putAsync(String resourceGroupName, String resourceGroupResourceName,
        ResourceGroupResourceInner resource) {
        return putWithResponseAsync(resourceGroupName, resourceGroupResourceName, resource)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create a ResourceGroupResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGroupResourceName The name of the ResourceGroupResource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete tracked resource types can be created by aliasing this type using a specific property type along
     * with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ResourceGroupResourceInner> putWithResponse(String resourceGroupName,
        String resourceGroupResourceName, ResourceGroupResourceInner resource, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.putSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, resourceGroupResourceName, contentType, accept, resource, context);
    }

    /**
     * Create a ResourceGroupResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGroupResourceName The name of the ResourceGroupResource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete tracked resource types can be created by aliasing this type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResourceGroupResourceInner put(String resourceGroupName, String resourceGroupResourceName,
        ResourceGroupResourceInner resource) {
        return putWithResponse(resourceGroupName, resourceGroupResourceName, resource, Context.NONE).getValue();
    }

    /**
     * Delete a ResourceGroupResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGroupResourceName The name of the ResourceGroupResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String resourceGroupResourceName) {
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, resourceGroupResourceName, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a ResourceGroupResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGroupResourceName The name of the ResourceGroupResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String resourceGroupResourceName) {
        return deleteWithResponseAsync(resourceGroupName, resourceGroupResourceName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a ResourceGroupResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGroupResourceName The name of the ResourceGroupResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String resourceGroupResourceName,
        Context context) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, resourceGroupResourceName, context);
    }

    /**
     * Delete a ResourceGroupResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGroupResourceName The name of the ResourceGroupResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String resourceGroupResourceName) {
        deleteWithResponse(resourceGroupName, resourceGroupResourceName, Context.NONE);
    }
}
