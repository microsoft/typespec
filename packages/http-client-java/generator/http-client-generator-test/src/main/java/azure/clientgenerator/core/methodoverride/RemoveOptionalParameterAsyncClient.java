// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.clientgenerator.core.methodoverride;

import azure.clientgenerator.core.methodoverride.implementation.RemoveOptionalParametersImpl;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous OverrideClient type.
 */
@ServiceClient(builder = OverrideClientBuilder.class, isAsync = true)
public final class RemoveOptionalParameterAsyncClient {
    @Generated
    private final RemoveOptionalParametersImpl serviceClient;

    /**
     * Initializes an instance of RemoveOptionalParameterAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    RemoveOptionalParameterAsyncClient(RemoveOptionalParametersImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The removeOptional operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>param2</td><td>String</td><td>No</td><td>The param2 parameter</td></tr>
     * <tr><td>param3</td><td>String</td><td>No</td><td>The param3 parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>param4</td><td>String</td><td>No</td><td>The param4 parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param param1 The param1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeOptionalWithResponse(String param1, RequestOptions requestOptions) {
        return this.serviceClient.removeOptionalWithResponseAsync(param1, requestOptions);
    }

    /**
     * The removeOptional operation.
     * 
     * @param param1 The param1 parameter.
     * @param param2 The param2 parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeOptional(String param1, String param2) {
        // Generated convenience method for removeOptionalWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (param2 != null) {
            requestOptions.addQueryParam("param2", param2, false);
        }
        return removeOptionalWithResponse(param1, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * The removeOptional operation.
     * 
     * @param param1 The param1 parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeOptional(String param1) {
        // Generated convenience method for removeOptionalWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return removeOptionalWithResponse(param1, requestOptions).flatMap(FluxUtil::toMono);
    }
}
