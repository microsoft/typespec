// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.clientgenerator.core.alternatetype;

import azure.clientgenerator.core.alternatetype.externaltype.models.Feature;
import azure.clientgenerator.core.alternatetype.externaltype.models.ModelWithFeatureProperty;
import azure.clientgenerator.core.alternatetype.implementation.ExternalTypesImpl;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous AlternateTypeClient type.
 */
@ServiceClient(builder = AlternateTypeClientBuilder.class)
public final class AlternateTypeClient {
    @Generated
    private final ExternalTypesImpl serviceClient;

    /**
     * Initializes an instance of AlternateTypeClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    AlternateTypeClient(ExternalTypesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The getModel operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     geometry (Required): {
     *         type: String (Required)
     *         coordinates (Required): [
     *             int (Required)
     *         ]
     *     }
     *     properties (Required): {
     *         String: BinaryData (Required)
     *     }
     *     id: BinaryData (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getModelWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getModelWithResponse(requestOptions);
    }

    /**
     * The putModel operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     type: String (Required)
     *     geometry (Required): {
     *         type: String (Required)
     *         coordinates (Required): [
     *             int (Required)
     *         ]
     *     }
     *     properties (Required): {
     *         String: BinaryData (Required)
     *     }
     *     id: BinaryData (Optional)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.putModelWithResponse(body, requestOptions);
    }

    /**
     * The getProperty operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     feature (Required): {
     *         type: String (Required)
     *         geometry (Required): {
     *             type: String (Required)
     *             coordinates (Required): [
     *                 int (Required)
     *             ]
     *         }
     *         properties (Required): {
     *             String: BinaryData (Required)
     *         }
     *         id: BinaryData (Optional)
     *     }
     *     additionalProperty: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPropertyWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getPropertyWithResponse(requestOptions);
    }

    /**
     * The putProperty operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     feature (Required): {
     *         type: String (Required)
     *         geometry (Required): {
     *             type: String (Required)
     *             coordinates (Required): [
     *                 int (Required)
     *             ]
     *         }
     *         properties (Required): {
     *             String: BinaryData (Required)
     *         }
     *         id: BinaryData (Optional)
     *     }
     *     additionalProperty: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putPropertyWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.putPropertyWithResponse(body, requestOptions);
    }

    /**
     * The getModel operation.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Feature getModel() {
        // Generated convenience method for getModelWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getModelWithResponse(requestOptions).getValue().toObject(Feature.class);
    }

    /**
     * The putModel operation.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModel(Feature body) {
        // Generated convenience method for putModelWithResponse
        RequestOptions requestOptions = new RequestOptions();
        putModelWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * The getProperty operation.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ModelWithFeatureProperty getProperty() {
        // Generated convenience method for getPropertyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPropertyWithResponse(requestOptions).getValue().toObject(ModelWithFeatureProperty.class);
    }

    /**
     * The putProperty operation.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putProperty(ModelWithFeatureProperty body) {
        // Generated convenience method for putPropertyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        putPropertyWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }
}
