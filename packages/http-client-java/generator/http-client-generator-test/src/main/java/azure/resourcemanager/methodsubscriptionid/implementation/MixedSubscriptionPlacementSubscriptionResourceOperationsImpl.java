// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.resourcemanager.methodsubscriptionid.implementation;

import azure.resourcemanager.methodsubscriptionid.fluent.MixedSubscriptionPlacementSubscriptionResourceOperationsClient;
import azure.resourcemanager.methodsubscriptionid.fluent.models.SubscriptionResourceInner;
import azure.resourcemanager.methodsubscriptionid.models.MixedSubscriptionPlacementSubscriptionResourceOperations;
import azure.resourcemanager.methodsubscriptionid.models.SubscriptionResource;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;

public final class MixedSubscriptionPlacementSubscriptionResourceOperationsImpl
    implements MixedSubscriptionPlacementSubscriptionResourceOperations {
    private static final ClientLogger LOGGER
        = new ClientLogger(MixedSubscriptionPlacementSubscriptionResourceOperationsImpl.class);

    private final MixedSubscriptionPlacementSubscriptionResourceOperationsClient innerClient;

    private final azure.resourcemanager.methodsubscriptionid.MethodSubscriptionIdManager serviceManager;

    public MixedSubscriptionPlacementSubscriptionResourceOperationsImpl(
        MixedSubscriptionPlacementSubscriptionResourceOperationsClient innerClient,
        azure.resourcemanager.methodsubscriptionid.MethodSubscriptionIdManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<SubscriptionResource> getWithResponse(String subscriptionId, String subscriptionResourceName,
        Context context) {
        Response<SubscriptionResourceInner> inner
            = this.serviceClient().getWithResponse(subscriptionId, subscriptionResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SubscriptionResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SubscriptionResource get(String subscriptionId, String subscriptionResourceName) {
        SubscriptionResourceInner inner = this.serviceClient().get(subscriptionId, subscriptionResourceName);
        if (inner != null) {
            return new SubscriptionResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String subscriptionId, String subscriptionResourceName,
        Context context) {
        return this.serviceClient().deleteWithResponse(subscriptionId, subscriptionResourceName, context);
    }

    public void deleteByResourceGroup(String subscriptionId, String subscriptionResourceName) {
        this.serviceClient().delete(subscriptionId, subscriptionResourceName);
    }

    public SubscriptionResource getById(String id) {
        String subscriptionId = ResourceManagerUtils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String subscriptionResourceName = ResourceManagerUtils.getValueFromIdByName(id, "subscriptionResources");
        if (subscriptionResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptionResources'.", id)));
        }
        return this.getWithResponse(subscriptionId, subscriptionResourceName, Context.NONE).getValue();
    }

    public Response<SubscriptionResource> getByIdWithResponse(String id, Context context) {
        String subscriptionId = ResourceManagerUtils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String subscriptionResourceName = ResourceManagerUtils.getValueFromIdByName(id, "subscriptionResources");
        if (subscriptionResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptionResources'.", id)));
        }
        return this.getWithResponse(subscriptionId, subscriptionResourceName, context);
    }

    public void deleteById(String id) {
        String subscriptionId = ResourceManagerUtils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String subscriptionResourceName = ResourceManagerUtils.getValueFromIdByName(id, "subscriptionResources");
        if (subscriptionResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptionResources'.", id)));
        }
        this.deleteByResourceGroupWithResponse(subscriptionId, subscriptionResourceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String subscriptionId = ResourceManagerUtils.getValueFromIdByName(id, "subscriptions");
        if (subscriptionId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptions'.", id)));
        }
        String subscriptionResourceName = ResourceManagerUtils.getValueFromIdByName(id, "subscriptionResources");
        if (subscriptionResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'subscriptionResources'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(subscriptionId, subscriptionResourceName, context);
    }

    private MixedSubscriptionPlacementSubscriptionResourceOperationsClient serviceClient() {
        return this.innerClient;
    }

    private azure.resourcemanager.methodsubscriptionid.MethodSubscriptionIdManager manager() {
        return this.serviceManager;
    }

    public SubscriptionResourceImpl define(String name) {
        return new SubscriptionResourceImpl(name, this.manager());
    }
}
