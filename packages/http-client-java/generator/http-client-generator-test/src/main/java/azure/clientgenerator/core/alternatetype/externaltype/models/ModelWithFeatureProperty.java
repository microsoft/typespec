// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.clientgenerator.core.alternatetype.externaltype.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ModelWithFeatureProperty model.
 */
@Immutable
public final class ModelWithFeatureProperty implements JsonSerializable<ModelWithFeatureProperty> {
    /*
     * The feature property.
     */
    @Generated
    private final Feature feature;

    /*
     * The additionalProperty property.
     */
    @Generated
    private final String additionalProperty;

    /**
     * Creates an instance of ModelWithFeatureProperty class.
     * 
     * @param feature the feature value to set.
     * @param additionalProperty the additionalProperty value to set.
     */
    @Generated
    public ModelWithFeatureProperty(Feature feature, String additionalProperty) {
        this.feature = feature;
        this.additionalProperty = additionalProperty;
    }

    /**
     * Get the feature property: The feature property.
     * 
     * @return the feature value.
     */
    @Generated
    public Feature getFeature() {
        return this.feature;
    }

    /**
     * Get the additionalProperty property: The additionalProperty property.
     * 
     * @return the additionalProperty value.
     */
    @Generated
    public String getAdditionalProperty() {
        return this.additionalProperty;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("feature", this.feature);
        jsonWriter.writeStringField("additionalProperty", this.additionalProperty);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ModelWithFeatureProperty from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ModelWithFeatureProperty if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ModelWithFeatureProperty.
     */
    @Generated
    public static ModelWithFeatureProperty fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Feature feature = null;
            String additionalProperty = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("feature".equals(fieldName)) {
                    feature = Feature.fromJson(reader);
                } else if ("additionalProperty".equals(fieldName)) {
                    additionalProperty = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new ModelWithFeatureProperty(feature, additionalProperty);
        });
    }
}
