// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.resourcemanager.methodsubscriptionid.implementation;

import azure.resourcemanager.methodsubscriptionid.fluent.MixedSubscriptionPlacementSubscriptionResourceOperationsClient;
import azure.resourcemanager.methodsubscriptionid.fluent.models.SubscriptionResourceInner;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * MixedSubscriptionPlacementSubscriptionResourceOperationsClient.
 */
public final class MixedSubscriptionPlacementSubscriptionResourceOperationsClientImpl
    implements MixedSubscriptionPlacementSubscriptionResourceOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final MixedSubscriptionPlacementSubscriptionResourceOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final MethodSubscriptionIdClientImpl client;

    /**
     * Initializes an instance of MixedSubscriptionPlacementSubscriptionResourceOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    MixedSubscriptionPlacementSubscriptionResourceOperationsClientImpl(MethodSubscriptionIdClientImpl client) {
        this.service = RestProxy.create(MixedSubscriptionPlacementSubscriptionResourceOperationsService.class,
            client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * MethodSubscriptionIdClientMixedSubscriptionPlacementSubscriptionResourceOperations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MethodSubscriptionIdClientMixedSubscriptionPlacementSubscriptionResourceOperations")
    public interface MixedSubscriptionPlacementSubscriptionResourceOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.MethodSubscriptionId/subscriptionResources/{subscriptionResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubscriptionResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("subscriptionResourceName") String subscriptionResourceName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.MethodSubscriptionId/subscriptionResources/{subscriptionResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SubscriptionResourceInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("subscriptionResourceName") String subscriptionResourceName,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.MethodSubscriptionId/subscriptionResources/{subscriptionResourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubscriptionResourceInner>> put(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("subscriptionResourceName") String subscriptionResourceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SubscriptionResourceInner resource, Context context);

        @Put("/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.MethodSubscriptionId/subscriptionResources/{subscriptionResourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SubscriptionResourceInner> putSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("subscriptionResourceName") String subscriptionResourceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SubscriptionResourceInner resource, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.MethodSubscriptionId/subscriptionResources/{subscriptionResourceName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("subscriptionResourceName") String subscriptionResourceName, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.MethodSubscriptionId/subscriptionResources/{subscriptionResourceName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<Void> deleteSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("subscriptionResourceName") String subscriptionResourceName, Context context);
    }

    /**
     * Get a SubscriptionResource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param subscriptionResourceName The name of the SubscriptionResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SubscriptionResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubscriptionResourceInner>> getWithResponseAsync(String subscriptionId,
        String subscriptionResourceName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), subscriptionId,
                subscriptionResourceName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a SubscriptionResource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param subscriptionResourceName The name of the SubscriptionResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SubscriptionResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubscriptionResourceInner> getAsync(String subscriptionId, String subscriptionResourceName) {
        return getWithResponseAsync(subscriptionId, subscriptionResourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a SubscriptionResource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param subscriptionResourceName The name of the SubscriptionResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SubscriptionResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SubscriptionResourceInner> getWithResponse(String subscriptionId, String subscriptionResourceName,
        Context context) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), subscriptionId,
            subscriptionResourceName, accept, context);
    }

    /**
     * Get a SubscriptionResource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param subscriptionResourceName The name of the SubscriptionResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SubscriptionResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubscriptionResourceInner get(String subscriptionId, String subscriptionResourceName) {
        return getWithResponse(subscriptionId, subscriptionResourceName, Context.NONE).getValue();
    }

    /**
     * Create a SubscriptionResource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param subscriptionResourceName The name of the SubscriptionResource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubscriptionResourceInner>> putWithResponseAsync(String subscriptionId,
        String subscriptionResourceName, SubscriptionResourceInner resource) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.put(this.client.getEndpoint(), this.client.getApiVersion(), subscriptionId,
                subscriptionResourceName, contentType, accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a SubscriptionResource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param subscriptionResourceName The name of the SubscriptionResource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubscriptionResourceInner> putAsync(String subscriptionId, String subscriptionResourceName,
        SubscriptionResourceInner resource) {
        return putWithResponseAsync(subscriptionId, subscriptionResourceName, resource)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create a SubscriptionResource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param subscriptionResourceName The name of the SubscriptionResource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type along
     * with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SubscriptionResourceInner> putWithResponse(String subscriptionId, String subscriptionResourceName,
        SubscriptionResourceInner resource, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.putSync(this.client.getEndpoint(), this.client.getApiVersion(), subscriptionId,
            subscriptionResourceName, contentType, accept, resource, context);
    }

    /**
     * Create a SubscriptionResource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param subscriptionResourceName The name of the SubscriptionResource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubscriptionResourceInner put(String subscriptionId, String subscriptionResourceName,
        SubscriptionResourceInner resource) {
        return putWithResponse(subscriptionId, subscriptionResourceName, resource, Context.NONE).getValue();
    }

    /**
     * Delete a SubscriptionResource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param subscriptionResourceName The name of the SubscriptionResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String subscriptionId, String subscriptionResourceName) {
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                subscriptionId, subscriptionResourceName, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a SubscriptionResource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param subscriptionResourceName The name of the SubscriptionResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String subscriptionId, String subscriptionResourceName) {
        return deleteWithResponseAsync(subscriptionId, subscriptionResourceName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a SubscriptionResource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param subscriptionResourceName The name of the SubscriptionResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String subscriptionId, String subscriptionResourceName, Context context) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(), subscriptionId,
            subscriptionResourceName, context);
    }

    /**
     * Delete a SubscriptionResource.
     * 
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param subscriptionResourceName The name of the SubscriptionResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String subscriptionId, String subscriptionResourceName) {
        deleteWithResponse(subscriptionId, subscriptionResourceName, Context.NONE);
    }
}
