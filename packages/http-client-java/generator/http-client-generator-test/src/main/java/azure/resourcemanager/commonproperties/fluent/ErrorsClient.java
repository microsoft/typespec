// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.resourcemanager.commonproperties.fluent;

import azure.resourcemanager.commonproperties.fluent.models.ConfidentialResourceInner;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * An instance of this class provides access to all the operations defined in ErrorsClient.
 */
public interface ErrorsClient {
    /**
     * Get a ConfidentialResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param confidentialResourceName The name of the ConfidentialResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ConfidentialResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ConfidentialResourceInner> getByResourceGroupWithResponse(String resourceGroupName,
        String confidentialResourceName, Context context);

    /**
     * Get a ConfidentialResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param confidentialResourceName The name of the ConfidentialResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ConfidentialResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConfidentialResourceInner getByResourceGroup(String resourceGroupName, String confidentialResourceName);

    /**
     * Create a ConfidentialResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param confidentialResourceName The name of the ConfidentialResource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws azure.resourcemanager.commonproperties.models.ApiErrorException thrown if the request is rejected by
     * server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete tracked resource types can be created by aliasing this type using a specific property type along
     * with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ConfidentialResourceInner> createForUserDefinedErrorWithResponse(String resourceGroupName,
        String confidentialResourceName, ConfidentialResourceInner resource, Context context);

    /**
     * Create a ConfidentialResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param confidentialResourceName The name of the ConfidentialResource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws azure.resourcemanager.commonproperties.models.ApiErrorException thrown if the request is rejected by
     * server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete tracked resource types can be created by aliasing this type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConfidentialResourceInner createForUserDefinedError(String resourceGroupName, String confidentialResourceName,
        ConfidentialResourceInner resource);
}
