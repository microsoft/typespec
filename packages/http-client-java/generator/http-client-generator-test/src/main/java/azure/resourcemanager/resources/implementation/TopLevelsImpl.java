// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.resourcemanager.resources.implementation;

import azure.resourcemanager.resources.fluent.TopLevelsClient;
import azure.resourcemanager.resources.fluent.models.TopLevelTrackedResourceInner;
import azure.resourcemanager.resources.models.NotificationDetails;
import azure.resourcemanager.resources.models.TopLevelTrackedResource;
import azure.resourcemanager.resources.models.TopLevels;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;

public final class TopLevelsImpl implements TopLevels {
    private static final ClientLogger LOGGER = new ClientLogger(TopLevelsImpl.class);

    private final TopLevelsClient innerClient;

    private final azure.resourcemanager.resources.ResourcesManager serviceManager;

    public TopLevelsImpl(TopLevelsClient innerClient, azure.resourcemanager.resources.ResourcesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<TopLevelTrackedResource> getByResourceGroupWithResponse(String resourceGroupName,
        String topLevelTrackedResourceName, Context context) {
        Response<TopLevelTrackedResourceInner> inner = this.serviceClient()
            .getByResourceGroupWithResponse(resourceGroupName, topLevelTrackedResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TopLevelTrackedResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TopLevelTrackedResource getByResourceGroup(String resourceGroupName, String topLevelTrackedResourceName) {
        TopLevelTrackedResourceInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, topLevelTrackedResourceName);
        if (inner != null) {
            return new TopLevelTrackedResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String topLevelTrackedResourceName) {
        this.serviceClient().delete(resourceGroupName, topLevelTrackedResourceName);
    }

    public void delete(String resourceGroupName, String topLevelTrackedResourceName, Context context) {
        this.serviceClient().delete(resourceGroupName, topLevelTrackedResourceName, context);
    }

    public PagedIterable<TopLevelTrackedResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<TopLevelTrackedResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TopLevelTrackedResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<TopLevelTrackedResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<TopLevelTrackedResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TopLevelTrackedResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<TopLevelTrackedResource> list() {
        PagedIterable<TopLevelTrackedResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TopLevelTrackedResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<TopLevelTrackedResource> list(Context context) {
        PagedIterable<TopLevelTrackedResourceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TopLevelTrackedResourceImpl(inner1, this.manager()));
    }

    public Response<Void> actionSyncWithResponse(String resourceGroupName, String topLevelTrackedResourceName,
        NotificationDetails body, Context context) {
        return this.serviceClient()
            .actionSyncWithResponse(resourceGroupName, topLevelTrackedResourceName, body, context);
    }

    public void actionSync(String resourceGroupName, String topLevelTrackedResourceName, NotificationDetails body) {
        this.serviceClient().actionSync(resourceGroupName, topLevelTrackedResourceName, body);
    }

    public TopLevelTrackedResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String topLevelTrackedResourceName = ResourceManagerUtils.getValueFromIdByName(id, "topLevelTrackedResources");
        if (topLevelTrackedResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'topLevelTrackedResources'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, topLevelTrackedResourceName, Context.NONE)
            .getValue();
    }

    public Response<TopLevelTrackedResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String topLevelTrackedResourceName = ResourceManagerUtils.getValueFromIdByName(id, "topLevelTrackedResources");
        if (topLevelTrackedResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'topLevelTrackedResources'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, topLevelTrackedResourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String topLevelTrackedResourceName = ResourceManagerUtils.getValueFromIdByName(id, "topLevelTrackedResources");
        if (topLevelTrackedResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'topLevelTrackedResources'.", id)));
        }
        this.delete(resourceGroupName, topLevelTrackedResourceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String topLevelTrackedResourceName = ResourceManagerUtils.getValueFromIdByName(id, "topLevelTrackedResources");
        if (topLevelTrackedResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'topLevelTrackedResources'.", id)));
        }
        this.delete(resourceGroupName, topLevelTrackedResourceName, context);
    }

    private TopLevelsClient serviceClient() {
        return this.innerClient;
    }

    private azure.resourcemanager.resources.ResourcesManager manager() {
        return this.serviceManager;
    }

    public TopLevelTrackedResourceImpl define(String name) {
        return new TopLevelTrackedResourceImpl(name, this.manager());
    }
}
