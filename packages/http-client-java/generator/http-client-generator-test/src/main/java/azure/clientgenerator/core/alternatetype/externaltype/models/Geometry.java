// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.clientgenerator.core.alternatetype.externaltype.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The Geometry model.
 */
@Immutable
public final class Geometry implements JsonSerializable<Geometry> {
    /*
     * The type property.
     */
    @Generated
    private final String type;

    /*
     * The coordinates property.
     */
    @Generated
    private final List<Integer> coordinates;

    /**
     * Creates an instance of Geometry class.
     * 
     * @param type the type value to set.
     * @param coordinates the coordinates value to set.
     */
    @Generated
    public Geometry(String type, List<Integer> coordinates) {
        this.type = type;
        this.coordinates = coordinates;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the coordinates property: The coordinates property.
     * 
     * @return the coordinates value.
     */
    @Generated
    public List<Integer> getCoordinates() {
        return this.coordinates;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeArrayField("coordinates", this.coordinates, (writer, element) -> writer.writeInt(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Geometry from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Geometry if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Geometry.
     */
    @Generated
    public static Geometry fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String type = null;
            List<Integer> coordinates = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("coordinates".equals(fieldName)) {
                    coordinates = reader.readArray(reader1 -> reader1.getInt());
                } else {
                    reader.skipChildren();
                }
            }
            return new Geometry(type, coordinates);
        });
    }
}
