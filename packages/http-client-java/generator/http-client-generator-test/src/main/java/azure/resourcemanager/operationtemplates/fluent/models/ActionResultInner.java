// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.resourcemanager.operationtemplates.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ActionResult model.
 */
@Immutable
public final class ActionResultInner implements JsonSerializable<ActionResultInner> {
    /*
     * The result of the action.
     */
    private String result;

    /**
     * Creates an instance of ActionResultInner class.
     */
    private ActionResultInner() {
    }

    /**
     * Get the result property: The result of the action.
     * 
     * @return the result value.
     */
    public String result() {
        return this.result;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (result() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property result in model ActionResultInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ActionResultInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("result", this.result);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActionResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActionResultInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ActionResultInner.
     */
    public static ActionResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActionResultInner deserializedActionResultInner = new ActionResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("result".equals(fieldName)) {
                    deserializedActionResultInner.result = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActionResultInner;
        });
    }
}
