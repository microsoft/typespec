// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package azure.resourcemanager.resources.implementation;

import azure.resourcemanager.resources.fluent.LocationResourcesClient;
import azure.resourcemanager.resources.fluent.models.LocationResourceInner;
import azure.resourcemanager.resources.models.LocationResource;
import azure.resourcemanager.resources.models.LocationResources;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;

public final class LocationResourcesImpl implements LocationResources {
    private static final ClientLogger LOGGER = new ClientLogger(LocationResourcesImpl.class);

    private final LocationResourcesClient innerClient;

    private final azure.resourcemanager.resources.ResourcesManager serviceManager;

    public LocationResourcesImpl(LocationResourcesClient innerClient,
        azure.resourcemanager.resources.ResourcesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<LocationResource> getWithResponse(String location, String locationResourceName, Context context) {
        Response<LocationResourceInner> inner
            = this.serviceClient().getWithResponse(location, locationResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new LocationResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public LocationResource get(String location, String locationResourceName) {
        LocationResourceInner inner = this.serviceClient().get(location, locationResourceName);
        if (inner != null) {
            return new LocationResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String location, String locationResourceName,
        Context context) {
        return this.serviceClient().deleteWithResponse(location, locationResourceName, context);
    }

    public void deleteByResourceGroup(String location, String locationResourceName) {
        this.serviceClient().delete(location, locationResourceName);
    }

    public PagedIterable<LocationResource> listByLocation(String location) {
        PagedIterable<LocationResourceInner> inner = this.serviceClient().listByLocation(location);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LocationResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<LocationResource> listByLocation(String location, Context context) {
        PagedIterable<LocationResourceInner> inner = this.serviceClient().listByLocation(location, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LocationResourceImpl(inner1, this.manager()));
    }

    public LocationResource getById(String id) {
        String location = ResourceManagerUtils.getValueFromIdByName(id, "locations");
        if (location == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'locations'.", id)));
        }
        String locationResourceName = ResourceManagerUtils.getValueFromIdByName(id, "locationResources");
        if (locationResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'locationResources'.", id)));
        }
        return this.getWithResponse(location, locationResourceName, Context.NONE).getValue();
    }

    public Response<LocationResource> getByIdWithResponse(String id, Context context) {
        String location = ResourceManagerUtils.getValueFromIdByName(id, "locations");
        if (location == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'locations'.", id)));
        }
        String locationResourceName = ResourceManagerUtils.getValueFromIdByName(id, "locationResources");
        if (locationResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'locationResources'.", id)));
        }
        return this.getWithResponse(location, locationResourceName, context);
    }

    public void deleteById(String id) {
        String location = ResourceManagerUtils.getValueFromIdByName(id, "locations");
        if (location == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'locations'.", id)));
        }
        String locationResourceName = ResourceManagerUtils.getValueFromIdByName(id, "locationResources");
        if (locationResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'locationResources'.", id)));
        }
        this.deleteByResourceGroupWithResponse(location, locationResourceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String location = ResourceManagerUtils.getValueFromIdByName(id, "locations");
        if (location == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'locations'.", id)));
        }
        String locationResourceName = ResourceManagerUtils.getValueFromIdByName(id, "locationResources");
        if (locationResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'locationResources'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(location, locationResourceName, context);
    }

    private LocationResourcesClient serviceClient() {
        return this.innerClient;
    }

    private azure.resourcemanager.resources.ResourcesManager manager() {
        return this.serviceManager;
    }

    public LocationResourceImpl define(String name) {
        return new LocationResourceImpl(name, this.manager());
    }
}
