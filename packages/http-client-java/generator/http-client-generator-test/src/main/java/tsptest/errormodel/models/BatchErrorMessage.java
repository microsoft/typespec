// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.errormodel.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The BatchErrorMessage model.
 */
@Immutable
public final class BatchErrorMessage implements JsonSerializable<BatchErrorMessage> {
    /*
     * The lang property.
     */
    @Generated
    private String lang;

    /*
     * The value property.
     */
    @Generated
    private String value;

    /**
     * Creates an instance of BatchErrorMessage class.
     */
    @Generated
    private BatchErrorMessage() {
    }

    /**
     * Get the lang property: The lang property.
     * 
     * @return the lang value.
     */
    @Generated
    public String getLang() {
        return this.lang;
    }

    /**
     * Get the value property: The value property.
     * 
     * @return the value value.
     */
    @Generated
    public String getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("lang", this.lang);
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchErrorMessage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchErrorMessage if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchErrorMessage.
     */
    @Generated
    public static BatchErrorMessage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchErrorMessage deserializedBatchErrorMessage = new BatchErrorMessage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lang".equals(fieldName)) {
                    deserializedBatchErrorMessage.lang = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedBatchErrorMessage.value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBatchErrorMessage;
        });
    }
}
