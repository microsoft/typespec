// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.armresourceprovider.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import tsptest.armresourceprovider.fluent.ImmutableResourceModelsClient;
import tsptest.armresourceprovider.fluent.models.NginxConfigurationResponseInner;
import tsptest.armresourceprovider.models.NginxConfigurationRequest;

/**
 * An instance of this class provides access to all the operations defined in ImmutableResourceModelsClient.
 */
public final class ImmutableResourceModelsClientImpl implements ImmutableResourceModelsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ImmutableResourceModelsService service;

    /**
     * The service client containing this operation class.
     */
    private final ArmClientImpl client;

    /**
     * Initializes an instance of ImmutableResourceModelsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ImmutableResourceModelsClientImpl(ArmClientImpl client) {
        this.service = RestProxy.create(ImmutableResourceModelsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ArmClientImmutableResourceModels to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ArmClientImmutableRe")
    public interface ImmutableResourceModelsService {
        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/TspTest.ArmResourceProvider/configurations/{configurationName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("configurationName") String configurationName, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") NginxConfigurationRequest properties, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/TspTest.ArmResourceProvider/configurations/{configurationName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("configurationName") String configurationName, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") NginxConfigurationRequest properties, Context context);
    }

    /**
     * The createOrUpdate operation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationName The name of the NginxConfigurationResponse.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String configurationName, NginxConfigurationRequest properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configurationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter configurationName is required and cannot be null."));
        }
        if (properties != null) {
            properties.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, configurationName, accept, properties, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The createOrUpdate operation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationName The name of the NginxConfigurationResponse.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type along
     * with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String configurationName,
        NginxConfigurationRequest properties) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configurationName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter configurationName is required and cannot be null."));
        }
        if (properties != null) {
            properties.validate();
        }
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, configurationName, accept, properties, Context.NONE);
    }

    /**
     * The createOrUpdate operation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationName The name of the NginxConfigurationResponse.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type along
     * with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String configurationName,
        NginxConfigurationRequest properties, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (configurationName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter configurationName is required and cannot be null."));
        }
        if (properties != null) {
            properties.validate();
        }
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, configurationName, accept, properties, context);
    }

    /**
     * The createOrUpdate operation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationName The name of the NginxConfigurationResponse.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of concrete proxy resource types can be created by aliasing this type
     * using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<NginxConfigurationResponseInner>, NginxConfigurationResponseInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String configurationName,
            NginxConfigurationRequest properties) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, configurationName, properties);
        return this.client.<NginxConfigurationResponseInner, NginxConfigurationResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), NginxConfigurationResponseInner.class, NginxConfigurationResponseInner.class,
            this.client.getContext());
    }

    /**
     * The createOrUpdate operation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationName The name of the NginxConfigurationResponse.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of concrete proxy resource types can be created by aliasing this type
     * using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<NginxConfigurationResponseInner>, NginxConfigurationResponseInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String configurationName) {
        final NginxConfigurationRequest properties = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, configurationName, properties);
        return this.client.<NginxConfigurationResponseInner, NginxConfigurationResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), NginxConfigurationResponseInner.class, NginxConfigurationResponseInner.class,
            this.client.getContext());
    }

    /**
     * The createOrUpdate operation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationName The name of the NginxConfigurationResponse.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of concrete proxy resource types can be created by aliasing this type
     * using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NginxConfigurationResponseInner>, NginxConfigurationResponseInner>
        beginCreateOrUpdate(String resourceGroupName, String configurationName, NginxConfigurationRequest properties) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, configurationName, properties);
        return this.client.<NginxConfigurationResponseInner, NginxConfigurationResponseInner>getLroResult(response,
            NginxConfigurationResponseInner.class, NginxConfigurationResponseInner.class, Context.NONE);
    }

    /**
     * The createOrUpdate operation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationName The name of the NginxConfigurationResponse.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of concrete proxy resource types can be created by aliasing this type
     * using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NginxConfigurationResponseInner>, NginxConfigurationResponseInner>
        beginCreateOrUpdate(String resourceGroupName, String configurationName) {
        final NginxConfigurationRequest properties = null;
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, configurationName, properties);
        return this.client.<NginxConfigurationResponseInner, NginxConfigurationResponseInner>getLroResult(response,
            NginxConfigurationResponseInner.class, NginxConfigurationResponseInner.class, Context.NONE);
    }

    /**
     * The createOrUpdate operation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationName The name of the NginxConfigurationResponse.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of concrete proxy resource types can be created by aliasing this type
     * using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NginxConfigurationResponseInner>, NginxConfigurationResponseInner> beginCreateOrUpdate(
        String resourceGroupName, String configurationName, NginxConfigurationRequest properties, Context context) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, configurationName, properties, context);
        return this.client.<NginxConfigurationResponseInner, NginxConfigurationResponseInner>getLroResult(response,
            NginxConfigurationResponseInner.class, NginxConfigurationResponseInner.class, context);
    }

    /**
     * The createOrUpdate operation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationName The name of the NginxConfigurationResponse.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NginxConfigurationResponseInner> createOrUpdateAsync(String resourceGroupName,
        String configurationName, NginxConfigurationRequest properties) {
        return beginCreateOrUpdateAsync(resourceGroupName, configurationName, properties).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The createOrUpdate operation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationName The name of the NginxConfigurationResponse.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NginxConfigurationResponseInner> createOrUpdateAsync(String resourceGroupName,
        String configurationName) {
        final NginxConfigurationRequest properties = null;
        return beginCreateOrUpdateAsync(resourceGroupName, configurationName, properties).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The createOrUpdate operation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationName The name of the NginxConfigurationResponse.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NginxConfigurationResponseInner createOrUpdate(String resourceGroupName, String configurationName) {
        final NginxConfigurationRequest properties = null;
        return beginCreateOrUpdate(resourceGroupName, configurationName, properties).getFinalResult();
    }

    /**
     * The createOrUpdate operation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationName The name of the NginxConfigurationResponse.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NginxConfigurationResponseInner createOrUpdate(String resourceGroupName, String configurationName,
        NginxConfigurationRequest properties, Context context) {
        return beginCreateOrUpdate(resourceGroupName, configurationName, properties, context).getFinalResult();
    }

    private static final ClientLogger LOGGER = new ClientLogger(ImmutableResourceModelsClientImpl.class);
}
