// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.armresourceprovider.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import tsptest.armresourceprovider.fluent.models.NginxConfigurationResponseInner;
import tsptest.armresourceprovider.models.NginxConfigurationRequest;
import tsptest.armresourceprovider.models.NginxConfigurationResponse;
import tsptest.armresourceprovider.models.NginxConfigurationResponseProperties;

public final class NginxConfigurationResponseImpl
    implements NginxConfigurationResponse, NginxConfigurationResponse.Definition, NginxConfigurationResponse.Update {
    private NginxConfigurationResponseInner innerObject;

    private final tsptest.armresourceprovider.ArmResourceProviderManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public NginxConfigurationResponseProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public NginxConfigurationResponseInner innerModel() {
        return this.innerObject;
    }

    private tsptest.armresourceprovider.ArmResourceProviderManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String configurationName;

    private NginxConfigurationRequest createProperties;

    private NginxConfigurationRequest updateProperties;

    public NginxConfigurationResponseImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public NginxConfigurationResponse create() {
        this.innerObject = serviceManager.serviceClient()
            .getImmutableResourceModels()
            .createOrUpdate(resourceGroupName, configurationName, createProperties, Context.NONE);
        return this;
    }

    public NginxConfigurationResponse create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getImmutableResourceModels()
            .createOrUpdate(resourceGroupName, configurationName, createProperties, context);
        return this;
    }

    NginxConfigurationResponseImpl(String name, tsptest.armresourceprovider.ArmResourceProviderManager serviceManager) {
        this.serviceManager = serviceManager;
        this.configurationName = name;
        this.createProperties = new NginxConfigurationRequest();
    }

    public NginxConfigurationResponseImpl update() {
        this.updateProperties = new NginxConfigurationRequest();
        return this;
    }

    public NginxConfigurationResponse apply() {
        this.innerObject = serviceManager.serviceClient()
            .getImmutableResourceModels()
            .createOrUpdate(resourceGroupName, configurationName, updateProperties, Context.NONE);
        return this;
    }

    public NginxConfigurationResponse apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getImmutableResourceModels()
            .createOrUpdate(resourceGroupName, configurationName, updateProperties, context);
        return this;
    }

    NginxConfigurationResponseImpl(NginxConfigurationResponseInner innerObject,
        tsptest.armresourceprovider.ArmResourceProviderManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.configurationName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "configurations");
    }

    public NginxConfigurationResponseImpl withRootFile(String rootFile) {
        if (isInCreateMode()) {
            this.createProperties.withRootFile(rootFile);
            return this;
        } else {
            this.updateProperties.withRootFile(rootFile);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel() == null || this.innerModel().id() == null;
    }
}
