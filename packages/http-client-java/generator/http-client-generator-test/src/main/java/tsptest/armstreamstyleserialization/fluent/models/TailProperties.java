// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.armstreamstyleserialization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The TailProperties model.
 */
@Fluent
public final class TailProperties implements JsonSerializable<TailProperties> {
    /*
     * The length property.
     */
    @Generated
    private double length;

    /*
     * The patten property.
     */
    @Generated
    private String patten;

    /*
     * The requiredString property.
     */
    @Generated
    private String requiredString;

    /**
     * Creates an instance of TailProperties class.
     */
    @Generated
    public TailProperties() {
    }

    /**
     * Get the length property: The length property.
     * 
     * @return the length value.
     */
    @Generated
    public double length() {
        return this.length;
    }

    /**
     * Set the length property: The length property.
     * 
     * @param length the length value to set.
     * @return the TailProperties object itself.
     */
    @Generated
    public TailProperties withLength(double length) {
        this.length = length;
        return this;
    }

    /**
     * Get the patten property: The patten property.
     * 
     * @return the patten value.
     */
    @Generated
    public String patten() {
        return this.patten;
    }

    /**
     * Get the requiredString property: The requiredString property.
     * 
     * @return the requiredString value.
     */
    @Generated
    public String requiredString() {
        return this.requiredString;
    }

    /**
     * Set the requiredString property: The requiredString property.
     * 
     * @param requiredString the requiredString value to set.
     * @return the TailProperties object itself.
     */
    @Generated
    public TailProperties withRequiredString(String requiredString) {
        this.requiredString = requiredString;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (requiredString() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property requiredString in model TailProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TailProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("length", this.length);
        jsonWriter.writeStringField("requiredString", this.requiredString);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TailProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TailProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TailProperties.
     */
    public static TailProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TailProperties deserializedTailProperties = new TailProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("length".equals(fieldName)) {
                    deserializedTailProperties.length = reader.getDouble();
                } else if ("patten".equals(fieldName)) {
                    deserializedTailProperties.patten = reader.getString();
                } else if ("requiredString".equals(fieldName)) {
                    deserializedTailProperties.requiredString = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTailProperties;
        });
    }
}
