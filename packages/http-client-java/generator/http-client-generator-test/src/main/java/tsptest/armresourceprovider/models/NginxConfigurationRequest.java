// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.armresourceprovider.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The NginxConfigurationRequest model.
 */
@Fluent
public final class NginxConfigurationRequest implements JsonSerializable<NginxConfigurationRequest> {
    /*
     * The rootFile property.
     */
    private String rootFile;

    /**
     * Creates an instance of NginxConfigurationRequest class.
     */
    public NginxConfigurationRequest() {
    }

    /**
     * Get the rootFile property: The rootFile property.
     * 
     * @return the rootFile value.
     */
    public String rootFile() {
        return this.rootFile;
    }

    /**
     * Set the rootFile property: The rootFile property.
     * 
     * @param rootFile the rootFile value to set.
     * @return the NginxConfigurationRequest object itself.
     */
    public NginxConfigurationRequest withRootFile(String rootFile) {
        this.rootFile = rootFile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("rootFile", this.rootFile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NginxConfigurationRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NginxConfigurationRequest if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NginxConfigurationRequest.
     */
    public static NginxConfigurationRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NginxConfigurationRequest deserializedNginxConfigurationRequest = new NginxConfigurationRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rootFile".equals(fieldName)) {
                    deserializedNginxConfigurationRequest.rootFile = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNginxConfigurationRequest;
        });
    }
}
