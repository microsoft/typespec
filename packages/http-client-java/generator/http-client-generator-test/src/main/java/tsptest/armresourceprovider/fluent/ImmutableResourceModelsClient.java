// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.armresourceprovider.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import tsptest.armresourceprovider.fluent.models.NginxConfigurationResponseInner;
import tsptest.armresourceprovider.models.NginxConfigurationRequest;

/**
 * An instance of this class provides access to all the operations defined in ImmutableResourceModelsClient.
 */
public interface ImmutableResourceModelsClient {
    /**
     * The createOrUpdate operation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationName The name of the NginxConfigurationResponse.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of concrete proxy resource types can be created by aliasing this type
     * using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NginxConfigurationResponseInner>, NginxConfigurationResponseInner>
        beginCreateOrUpdate(String resourceGroupName, String configurationName);

    /**
     * The createOrUpdate operation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationName The name of the NginxConfigurationResponse.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of concrete proxy resource types can be created by aliasing this type
     * using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NginxConfigurationResponseInner>, NginxConfigurationResponseInner> beginCreateOrUpdate(
        String resourceGroupName, String configurationName, NginxConfigurationRequest properties, Context context);

    /**
     * The createOrUpdate operation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationName The name of the NginxConfigurationResponse.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NginxConfigurationResponseInner createOrUpdate(String resourceGroupName, String configurationName);

    /**
     * The createOrUpdate operation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationName The name of the NginxConfigurationResponse.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NginxConfigurationResponseInner createOrUpdate(String resourceGroupName, String configurationName,
        NginxConfigurationRequest properties, Context context);
}
