// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.server.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the HttpbinClient type.
 */
public final class HttpbinClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final HttpbinClientService service;

    /**
     * second-level domain, use httpbin.
     */
    private final String domain;

    /**
     * Gets second-level domain, use httpbin.
     * 
     * @return the domain value.
     */
    public String getDomain() {
        return this.domain;
    }

    /**
     * top-level domain, use org.
     */
    private final String tld;

    /**
     * Gets top-level domain, use org.
     * 
     * @return the tld value.
     */
    public String getTld() {
        return this.tld;
    }

    /**
     * relative path segment, can be empty.
     */
    private final String relativePath;

    /**
     * Gets relative path segment, can be empty.
     * 
     * @return the relativePath value.
     */
    public String getRelativePath() {
        return this.relativePath;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of HttpbinClient client.
     * 
     * @param domain second-level domain, use httpbin.
     * @param tld top-level domain, use org.
     * @param relativePath relative path segment, can be empty.
     */
    public HttpbinClientImpl(String domain, String tld, String relativePath) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), domain, tld, relativePath);
    }

    /**
     * Initializes an instance of HttpbinClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param domain second-level domain, use httpbin.
     * @param tld top-level domain, use org.
     * @param relativePath relative path segment, can be empty.
     */
    public HttpbinClientImpl(HttpPipeline httpPipeline, String domain, String tld, String relativePath) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), domain, tld, relativePath);
    }

    /**
     * Initializes an instance of HttpbinClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param domain second-level domain, use httpbin.
     * @param tld top-level domain, use org.
     * @param relativePath relative path segment, can be empty.
     */
    public HttpbinClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String domain, String tld,
        String relativePath) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.domain = domain;
        this.tld = tld;
        this.relativePath = relativePath;
        this.service = RestProxy.create(HttpbinClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for HttpbinClient to be used by the proxy service to perform REST calls.
     */
    @Host("https://{domain}.{tld}{relative-path}")
    @ServiceInterface(name = "HttpbinClient")
    public interface HttpbinClientService {
        @Get("/status/{code}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> status(@HostParam("domain") String domain, @HostParam("tld") String tld,
            @HostParam("relative-path") String relativePath, @PathParam("code") int code, RequestOptions requestOptions,
            Context context);

        @Get("/status/{code}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> statusSync(@HostParam("domain") String domain, @HostParam("tld") String tld,
            @HostParam("relative-path") String relativePath, @PathParam("code") int code, RequestOptions requestOptions,
            Context context);
    }

    /**
     * The status operation.
     * 
     * @param code The code parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> statusWithResponseAsync(int code, RequestOptions requestOptions) {
        return FluxUtil.withContext(context -> service.status(this.getDomain(), this.getTld(), this.getRelativePath(),
            code, requestOptions, context));
    }

    /**
     * The status operation.
     * 
     * @param code The code parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> statusWithResponse(int code, RequestOptions requestOptions) {
        return service.statusSync(this.getDomain(), this.getTld(), this.getRelativePath(), code, requestOptions,
            Context.NONE);
    }
}
