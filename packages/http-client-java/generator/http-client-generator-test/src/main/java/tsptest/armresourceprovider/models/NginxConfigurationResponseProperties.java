// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.armresourceprovider.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The NginxConfigurationResponseProperties model.
 */
@Immutable
public final class NginxConfigurationResponseProperties
    implements JsonSerializable<NginxConfigurationResponseProperties> {
    /*
     * The provisioningState property.
     */
    private ProvisioningState provisioningState;

    /*
     * The rootFile property.
     */
    private String rootFile;

    /**
     * Creates an instance of NginxConfigurationResponseProperties class.
     */
    private NginxConfigurationResponseProperties() {
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the rootFile property: The rootFile property.
     * 
     * @return the rootFile value.
     */
    public String rootFile() {
        return this.rootFile;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("rootFile", this.rootFile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NginxConfigurationResponseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NginxConfigurationResponseProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NginxConfigurationResponseProperties.
     */
    public static NginxConfigurationResponseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NginxConfigurationResponseProperties deserializedNginxConfigurationResponseProperties
                = new NginxConfigurationResponseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedNginxConfigurationResponseProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("rootFile".equals(fieldName)) {
                    deserializedNginxConfigurationResponseProperties.rootFile = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNginxConfigurationResponseProperties;
        });
    }
}
