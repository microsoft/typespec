// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.armresourceprovider.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;
import tsptest.armresourceprovider.fluent.models.TopLevelArmResourceUpdateProperties;

/**
 * The type used for update operations of the TopLevelArmResource.
 */
@Fluent
public final class TopLevelArmResourceUpdate implements JsonSerializable<TopLevelArmResourceUpdate> {
    /*
     * Resource tags.
     */
    private Map<String, String> tags;

    /*
     * The resource-specific properties for this resource.
     */
    private TopLevelArmResourceUpdateProperties innerProperties;

    /**
     * Creates an instance of TopLevelArmResourceUpdate class.
     */
    public TopLevelArmResourceUpdate() {
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the TopLevelArmResourceUpdate object itself.
     */
    public TopLevelArmResourceUpdate withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private TopLevelArmResourceUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the userName property: The userName property.
     * 
     * @return the userName value.
     */
    public String userName() {
        return this.innerProperties() == null ? null : this.innerProperties().userName();
    }

    /**
     * Set the userName property: The userName property.
     * 
     * @param userName the userName value to set.
     * @return the TopLevelArmResourceUpdate object itself.
     */
    public TopLevelArmResourceUpdate withUserName(String userName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TopLevelArmResourceUpdateProperties();
        }
        this.innerProperties().withUserName(userName);
        return this;
    }

    /**
     * Get the userNames property: The userNames property.
     * 
     * @return the userNames value.
     */
    public String userNames() {
        return this.innerProperties() == null ? null : this.innerProperties().userNames();
    }

    /**
     * Set the userNames property: The userNames property.
     * 
     * @param userNames the userNames value to set.
     * @return the TopLevelArmResourceUpdate object itself.
     */
    public TopLevelArmResourceUpdate withUserNames(String userNames) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TopLevelArmResourceUpdateProperties();
        }
        this.innerProperties().withUserNames(userNames);
        return this;
    }

    /**
     * Get the accuserName property: The accuserName property.
     * 
     * @return the accuserName value.
     */
    public String accuserName() {
        return this.innerProperties() == null ? null : this.innerProperties().accuserName();
    }

    /**
     * Set the accuserName property: The accuserName property.
     * 
     * @param accuserName the accuserName value to set.
     * @return the TopLevelArmResourceUpdate object itself.
     */
    public TopLevelArmResourceUpdate withAccuserName(String accuserName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TopLevelArmResourceUpdateProperties();
        }
        this.innerProperties().withAccuserName(accuserName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TopLevelArmResourceUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TopLevelArmResourceUpdate if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TopLevelArmResourceUpdate.
     */
    public static TopLevelArmResourceUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TopLevelArmResourceUpdate deserializedTopLevelArmResourceUpdate = new TopLevelArmResourceUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedTopLevelArmResourceUpdate.tags = tags;
                } else if ("properties".equals(fieldName)) {
                    deserializedTopLevelArmResourceUpdate.innerProperties
                        = TopLevelArmResourceUpdateProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTopLevelArmResourceUpdate;
        });
    }
}
