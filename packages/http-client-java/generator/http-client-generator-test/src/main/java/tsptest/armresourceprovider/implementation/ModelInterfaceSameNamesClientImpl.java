// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.armresourceprovider.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import reactor.core.publisher.Mono;
import tsptest.armresourceprovider.fluent.ModelInterfaceSameNamesClient;
import tsptest.armresourceprovider.fluent.models.ModelInterfaceSameNameInner;

/**
 * An instance of this class provides access to all the operations defined in ModelInterfaceSameNamesClient.
 */
public final class ModelInterfaceSameNamesClientImpl implements ModelInterfaceSameNamesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ModelInterfaceSameNamesService service;

    /**
     * The service client containing this operation class.
     */
    private final ArmResourceProviderClientImpl client;

    /**
     * Initializes an instance of ModelInterfaceSameNamesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ModelInterfaceSameNamesClientImpl(ArmResourceProviderClientImpl client) {
        this.service = RestProxy.create(ModelInterfaceSameNamesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ArmResourceProviderClientModelInterfaceSameNames to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ArmResourceProviderC")
    public interface ModelInterfaceSameNamesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/TspTest.ArmResourceProvider/modelInterfaceDifferentNames/{modelInterfaceDifferentNameName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ModelInterfaceSameNameInner>> getByResourceGroup(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("modelInterfaceDifferentNameName") String modelInterfaceDifferentNameName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/TspTest.ArmResourceProvider/modelInterfaceDifferentNames/{modelInterfaceDifferentNameName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ModelInterfaceSameNameInner> getByResourceGroupSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("modelInterfaceDifferentNameName") String modelInterfaceDifferentNameName,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a ModelInterfaceDifferentName.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param modelInterfaceDifferentNameName The name of the ModelInterfaceDifferentName.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ModelInterfaceDifferentName along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ModelInterfaceSameNameInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String modelInterfaceDifferentNameName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (modelInterfaceDifferentNameName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter modelInterfaceDifferentNameName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, modelInterfaceDifferentNameName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a ModelInterfaceDifferentName.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param modelInterfaceDifferentNameName The name of the ModelInterfaceDifferentName.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ModelInterfaceDifferentName on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ModelInterfaceSameNameInner> getByResourceGroupAsync(String resourceGroupName,
        String modelInterfaceDifferentNameName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, modelInterfaceDifferentNameName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a ModelInterfaceDifferentName.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param modelInterfaceDifferentNameName The name of the ModelInterfaceDifferentName.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ModelInterfaceDifferentName along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ModelInterfaceSameNameInner> getByResourceGroupWithResponse(String resourceGroupName,
        String modelInterfaceDifferentNameName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (modelInterfaceDifferentNameName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter modelInterfaceDifferentNameName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getByResourceGroupSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, modelInterfaceDifferentNameName, accept, context);
    }

    /**
     * Get a ModelInterfaceDifferentName.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param modelInterfaceDifferentNameName The name of the ModelInterfaceDifferentName.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ModelInterfaceDifferentName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ModelInterfaceSameNameInner getByResourceGroup(String resourceGroupName,
        String modelInterfaceDifferentNameName) {
        return getByResourceGroupWithResponse(resourceGroupName, modelInterfaceDifferentNameName, Context.NONE)
            .getValue();
    }

    private static final ClientLogger LOGGER = new ClientLogger(ModelInterfaceSameNamesClientImpl.class);
}
