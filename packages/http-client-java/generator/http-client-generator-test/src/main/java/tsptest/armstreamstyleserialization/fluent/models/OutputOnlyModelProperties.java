// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.armstreamstyleserialization.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import tsptest.armstreamstyleserialization.models.Dog;

/**
 * The OutputOnlyModelProperties model.
 */
@Immutable
public final class OutputOnlyModelProperties implements JsonSerializable<OutputOnlyModelProperties> {
    /*
     * The title property.
     */
    private String title;

    /*
     * The dog property.
     */
    private Dog dog;

    /**
     * Creates an instance of OutputOnlyModelProperties class.
     */
    private OutputOnlyModelProperties() {
    }

    /**
     * Get the title property: The title property.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Get the dog property: The dog property.
     * 
     * @return the dog value.
     */
    public Dog dog() {
        return this.dog;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (title() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property title in model OutputOnlyModelProperties"));
        }
        if (dog() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property dog in model OutputOnlyModelProperties"));
        } else {
            dog().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OutputOnlyModelProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeJsonField("dog", this.dog);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OutputOnlyModelProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OutputOnlyModelProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OutputOnlyModelProperties.
     */
    public static OutputOnlyModelProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OutputOnlyModelProperties deserializedOutputOnlyModelProperties = new OutputOnlyModelProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    deserializedOutputOnlyModelProperties.title = reader.getString();
                } else if ("dog".equals(fieldName)) {
                    deserializedOutputOnlyModelProperties.dog = Dog.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOutputOnlyModelProperties;
        });
    }
}
