// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.armresourceprovider.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import tsptest.armresourceprovider.fluent.models.ChildExtensionResourceInner;
import tsptest.armresourceprovider.models.ChildExtensionResourceUpdate;

/**
 * An instance of this class provides access to all the operations defined in ChildExtensionResourceInterfacesClient.
 */
public interface ChildExtensionResourceInterfacesClient {
    /**
     * Get a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ChildExtensionResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<ChildExtensionResourceInner>> getWithResponseAsync(String resourceUri, String topLevelArmResourceName,
        String childExtensionResourceName);

    /**
     * Get a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ChildExtensionResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ChildExtensionResourceInner> getAsync(String resourceUri, String topLevelArmResourceName,
        String childExtensionResourceName);

    /**
     * Get a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ChildExtensionResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ChildExtensionResourceInner> getWithResponse(String resourceUri, String topLevelArmResourceName,
        String childExtensionResourceName, Context context);

    /**
     * Get a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ChildExtensionResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ChildExtensionResourceInner get(String resourceUri, String topLevelArmResourceName,
        String childExtensionResourceName);

    /**
     * Create a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensionResource of Top Level Arm Resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceUri, String topLevelArmResourceName,
        String childExtensionResourceName, ChildExtensionResourceInner resource);

    /**
     * Create a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of extensionResource of Top Level Arm Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    PollerFlux<PollResult<ChildExtensionResourceInner>, ChildExtensionResourceInner> beginCreateOrUpdateAsync(
        String resourceUri, String topLevelArmResourceName, String childExtensionResourceName,
        ChildExtensionResourceInner resource);

    /**
     * Create a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of extensionResource of Top Level Arm Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ChildExtensionResourceInner>, ChildExtensionResourceInner> beginCreateOrUpdate(
        String resourceUri, String topLevelArmResourceName, String childExtensionResourceName,
        ChildExtensionResourceInner resource);

    /**
     * Create a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of extensionResource of Top Level Arm Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ChildExtensionResourceInner>, ChildExtensionResourceInner> beginCreateOrUpdate(
        String resourceUri, String topLevelArmResourceName, String childExtensionResourceName,
        ChildExtensionResourceInner resource, Context context);

    /**
     * Create a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensionResource of Top Level Arm Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ChildExtensionResourceInner> createOrUpdateAsync(String resourceUri, String topLevelArmResourceName,
        String childExtensionResourceName, ChildExtensionResourceInner resource);

    /**
     * Create a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensionResource of Top Level Arm Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ChildExtensionResourceInner createOrUpdate(String resourceUri, String topLevelArmResourceName,
        String childExtensionResourceName, ChildExtensionResourceInner resource);

    /**
     * Create a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensionResource of Top Level Arm Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ChildExtensionResourceInner createOrUpdate(String resourceUri, String topLevelArmResourceName,
        String childExtensionResourceName, ChildExtensionResourceInner resource, Context context);

    /**
     * Update a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensionResource of Top Level Arm Resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<ChildExtensionResourceInner>> updateWithResponseAsync(String resourceUri,
        String topLevelArmResourceName, String childExtensionResourceName, ChildExtensionResourceUpdate properties);

    /**
     * Update a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensionResource of Top Level Arm Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ChildExtensionResourceInner> updateAsync(String resourceUri, String topLevelArmResourceName,
        String childExtensionResourceName, ChildExtensionResourceUpdate properties);

    /**
     * Update a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensionResource of Top Level Arm Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ChildExtensionResourceInner> updateWithResponse(String resourceUri, String topLevelArmResourceName,
        String childExtensionResourceName, ChildExtensionResourceUpdate properties, Context context);

    /**
     * Update a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extensionResource of Top Level Arm Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ChildExtensionResourceInner update(String resourceUri, String topLevelArmResourceName,
        String childExtensionResourceName, ChildExtensionResourceUpdate properties);

    /**
     * Delete a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceUri, String topLevelArmResourceName,
        String childExtensionResourceName);

    /**
     * Delete a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceUri, String topLevelArmResourceName,
        String childExtensionResourceName);

    /**
     * Delete a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, String topLevelArmResourceName,
        String childExtensionResourceName);

    /**
     * Delete a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, String topLevelArmResourceName,
        String childExtensionResourceName, Context context);

    /**
     * Delete a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteAsync(String resourceUri, String topLevelArmResourceName, String childExtensionResourceName);

    /**
     * Delete a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceUri, String topLevelArmResourceName, String childExtensionResourceName);

    /**
     * Delete a ChildExtensionResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param childExtensionResourceName ChildExtensionResources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceUri, String topLevelArmResourceName, String childExtensionResourceName, Context context);

    /**
     * List ChildExtensionResource resources by TopLevelArmResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ChildExtensionResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<ChildExtensionResourceInner> listByTopLevelArmResourceAsync(String resourceUri,
        String topLevelArmResourceName);

    /**
     * List ChildExtensionResource resources by TopLevelArmResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ChildExtensionResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ChildExtensionResourceInner> listByTopLevelArmResource(String resourceUri,
        String topLevelArmResourceName);

    /**
     * List ChildExtensionResource resources by TopLevelArmResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param topLevelArmResourceName arm resource name for path.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ChildExtensionResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ChildExtensionResourceInner> listByTopLevelArmResource(String resourceUri,
        String topLevelArmResourceName, Context context);
}
