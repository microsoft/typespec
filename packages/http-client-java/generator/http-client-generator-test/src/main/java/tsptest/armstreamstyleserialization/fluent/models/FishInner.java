// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.armstreamstyleserialization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import tsptest.armstreamstyleserialization.models.Shark;

/**
 * This is base model for polymorphic multiple levels inheritance with a discriminator.
 */
@Fluent
public class FishInner implements JsonSerializable<FishInner> {
    /*
     * Discriminator property for Fish.
     */
    private String kind = "Fish";

    /*
     * The age property.
     */
    private int age;

    /*
     * The dna property.
     */
    private String dna;

    /*
     * The properties property.
     */
    private FishProperties innerProperties = new FishProperties();

    /*
     * The anotherProperties property.
     */
    private AnotherFishProperties innerAnotherProperties = new AnotherFishProperties();

    /**
     * Creates an instance of FishInner class.
     */
    public FishInner() {
    }

    /**
     * Get the kind property: Discriminator property for Fish.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Get the age property: The age property.
     * 
     * @return the age value.
     */
    public int age() {
        return this.age;
    }

    /**
     * Set the age property: The age property.
     * 
     * @param age the age value to set.
     * @return the FishInner object itself.
     */
    public FishInner withAge(int age) {
        this.age = age;
        return this;
    }

    /**
     * Get the dna property: The dna property.
     * 
     * @return the dna value.
     */
    public String dna() {
        return this.dna;
    }

    /**
     * Set the dna property: The dna property.
     * 
     * @param dna the dna value to set.
     * @return the FishInner object itself.
     */
    FishInner withDna(String dna) {
        this.dna = dna;
        return this;
    }

    /**
     * Get the innerProperties property: The properties property.
     * 
     * @return the innerProperties value.
     */
    private FishProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Set the innerProperties property: The properties property.
     * 
     * @param innerProperties the innerProperties value to set.
     * @return the FishInner object itself.
     */
    FishInner withInnerProperties(FishProperties innerProperties) {
        this.innerProperties = innerProperties;
        return this;
    }

    /**
     * Get the innerAnotherProperties property: The anotherProperties property.
     * 
     * @return the innerAnotherProperties value.
     */
    private AnotherFishProperties innerAnotherProperties() {
        return this.innerAnotherProperties;
    }

    /**
     * Set the innerAnotherProperties property: The anotherProperties property.
     * 
     * @param innerAnotherProperties the innerAnotherProperties value to set.
     * @return the FishInner object itself.
     */
    FishInner withInnerAnotherProperties(AnotherFishProperties innerAnotherProperties) {
        this.innerAnotherProperties = innerAnotherProperties;
        return this;
    }

    /**
     * Get the length property: The length property.
     * 
     * @return the length value.
     */
    public double length() {
        return this.innerProperties() == null ? 0.0 : this.innerProperties().length();
    }

    /**
     * Set the length property: The length property.
     * 
     * @param length the length value to set.
     * @return the FishInner object itself.
     */
    public FishInner withLength(double length) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FishProperties();
        }
        this.innerProperties().withLength(length);
        return this;
    }

    /**
     * Get the patten property: The patten property.
     * 
     * @return the patten value.
     */
    public String patten() {
        return this.innerProperties() == null ? null : this.innerProperties().patten();
    }

    /**
     * Get the requiredString property: The requiredString property.
     * 
     * @return the requiredString value.
     */
    public String requiredString() {
        return this.innerProperties() == null ? null : this.innerProperties().requiredString();
    }

    /**
     * Set the requiredString property: The requiredString property.
     * 
     * @param requiredString the requiredString value to set.
     * @return the FishInner object itself.
     */
    public FishInner withRequiredString(String requiredString) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FishProperties();
        }
        this.innerProperties().withRequiredString(requiredString);
        return this;
    }

    /**
     * Get the length property: The length property.
     * 
     * @return the length value.
     */
    public double lengthAnotherPropertiesLength() {
        return this.innerAnotherProperties() == null ? 0.0 : this.innerAnotherProperties().length();
    }

    /**
     * Set the length property: The length property.
     * 
     * @param length the length value to set.
     * @return the FishInner object itself.
     */
    public FishInner withLengthAnotherPropertiesLength(double length) {
        if (this.innerAnotherProperties() == null) {
            this.innerAnotherProperties = new AnotherFishProperties();
        }
        this.innerAnotherProperties().withLength(length);
        return this;
    }

    /**
     * Get the patten property: The patten property.
     * 
     * @return the patten value.
     */
    public String pattenAnotherPropertiesPatten() {
        return this.innerAnotherProperties() == null ? null : this.innerAnotherProperties().patten();
    }

    /**
     * Get the requiredString property: The requiredString property.
     * 
     * @return the requiredString value.
     */
    public String requiredStringAnotherPropertiesRequiredString() {
        return this.innerAnotherProperties() == null ? null : this.innerAnotherProperties().requiredString();
    }

    /**
     * Set the requiredString property: The requiredString property.
     * 
     * @param requiredString the requiredString value to set.
     * @return the FishInner object itself.
     */
    public FishInner withRequiredStringAnotherPropertiesRequiredString(String requiredString) {
        if (this.innerAnotherProperties() == null) {
            this.innerAnotherProperties = new AnotherFishProperties();
        }
        this.innerAnotherProperties().withRequiredString(requiredString);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property innerProperties in model FishInner"));
        } else {
            innerProperties().validate();
        }
        if (innerAnotherProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerAnotherProperties in model FishInner"));
        } else {
            innerAnotherProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FishInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("age", this.age);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("anotherProperties", this.innerAnotherProperties);
        jsonWriter.writeStringField("kind", this.kind);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FishInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FishInner if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FishInner.
     */
    public static FishInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("shark".equals(discriminatorValue)) {
                    return Shark.fromJson(readerToUse.reset());
                } else if ("salmon".equals(discriminatorValue)) {
                    return SalmonInner.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static FishInner fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FishInner deserializedFishInner = new FishInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("age".equals(fieldName)) {
                    deserializedFishInner.age = reader.getInt();
                } else if ("dna".equals(fieldName)) {
                    deserializedFishInner.dna = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedFishInner.innerProperties = FishProperties.fromJson(reader);
                } else if ("anotherProperties".equals(fieldName)) {
                    deserializedFishInner.innerAnotherProperties = AnotherFishProperties.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    deserializedFishInner.kind = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFishInner;
        });
    }
}
