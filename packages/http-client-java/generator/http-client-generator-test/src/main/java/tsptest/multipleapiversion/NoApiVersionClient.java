// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.multipleapiversion;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import tsptest.multipleapiversion.implementation.NoApiVersionClientImpl;

/**
 * Initializes a new instance of the synchronous NoApiVersionClient type.
 */
@ServiceClient(builder = NoApiVersionClientBuilder.class)
public final class NoApiVersionClient {
    @Generated
    private final NoApiVersionClientImpl serviceClient;

    /**
     * Initializes an instance of NoApiVersionClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    NoApiVersionClient(NoApiVersionClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The action operation.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>param1</td><td>String</td><td>No</td><td>The param1 parameter</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> actionWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.actionWithResponse(requestOptions);
    }

    /**
     * The action operation.
     * 
     * @param param1 The param1 parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void action(String param1) {
        // Generated convenience method for actionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (param1 != null) {
            requestOptions.addQueryParam("param1", param1, false);
        }
        actionWithResponse(requestOptions).getValue();
    }

    /**
     * The action operation.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void action() {
        // Generated convenience method for actionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        actionWithResponse(requestOptions).getValue();
    }
}
