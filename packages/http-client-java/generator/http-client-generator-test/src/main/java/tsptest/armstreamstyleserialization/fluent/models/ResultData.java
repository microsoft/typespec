// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package tsptest.armstreamstyleserialization.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ResultData model.
 */
@Immutable
public final class ResultData implements JsonSerializable<ResultData> {
    /*
     * The prop1 property.
     */
    private String prop1;

    /*
     * The prop2 property.
     */
    private String prop2;

    /**
     * Creates an instance of ResultData class.
     */
    private ResultData() {
    }

    /**
     * Get the prop1 property: The prop1 property.
     * 
     * @return the prop1 value.
     */
    public String prop1() {
        return this.prop1;
    }

    /**
     * Get the prop2 property: The prop2 property.
     * 
     * @return the prop2 value.
     */
    public String prop2() {
        return this.prop2;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (prop1() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property prop1 in model ResultData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResultData.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("prop1", this.prop1);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResultData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResultData if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResultData.
     */
    public static ResultData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResultData deserializedResultData = new ResultData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("prop1".equals(fieldName)) {
                    deserializedResultData.prop1 = reader.getString();
                } else if ("prop2".equals(fieldName)) {
                    deserializedResultData.prop2 = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResultData;
        });
    }
}
