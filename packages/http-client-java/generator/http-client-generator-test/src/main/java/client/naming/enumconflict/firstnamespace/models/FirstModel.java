// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package client.naming.enumconflict.firstnamespace.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The FirstModel model.
 */
@Immutable
public final class FirstModel implements JsonSerializable<FirstModel> {
    /*
     * Status from first namespace
     */
    @Generated
    private final Status status;

    /*
     * Name of the item
     */
    @Generated
    private final String name;

    /**
     * Creates an instance of FirstModel class.
     * 
     * @param status the status value to set.
     * @param name the name value to set.
     */
    @Generated
    public FirstModel(Status status, String name) {
        this.status = status;
        this.name = name;
    }

    /**
     * Get the status property: Status from first namespace.
     * 
     * @return the status value.
     */
    @Generated
    public Status getStatus() {
        return this.status;
    }

    /**
     * Get the name property: Name of the item.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FirstModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FirstModel if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FirstModel.
     */
    @Generated
    public static FirstModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Status status = null;
            String name = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    status = Status.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new FirstModel(status, name);
        });
    }
}
