// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package client.naming.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The LanguageClientNameModel model.
 */
@Immutable
public final class LanguageClientNameModel implements JsonSerializable<LanguageClientNameModel> {
    /*
     * Pass in true
     */
    @Generated
    private final boolean javaName;

    /**
     * Creates an instance of LanguageClientNameModel class.
     * 
     * @param javaName the javaName value to set.
     */
    @Generated
    public LanguageClientNameModel(boolean javaName) {
        this.javaName = javaName;
    }

    /**
     * Get the javaName property: Pass in true.
     * 
     * @return the javaName value.
     */
    @Generated
    public boolean isJavaName() {
        return this.javaName;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("defaultName", this.javaName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LanguageClientNameModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LanguageClientNameModel if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LanguageClientNameModel.
     */
    @Generated
    public static LanguageClientNameModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean javaName = false;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("defaultName".equals(fieldName)) {
                    javaName = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }
            return new LanguageClientNameModel(javaName);
        });
    }
}
