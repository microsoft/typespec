// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.type.property.optional;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.client.traits.ConfigurationTrait;
import com.azure.core.client.traits.EndpointTrait;
import com.azure.core.client.traits.HttpTrait;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.AddHeadersPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.ClientOptions;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.builder.ClientBuilderUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.JacksonAdapter;
import com.type.property.optional.implementation.OptionalClientImpl;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * A builder for creating a new instance of the OptionalClient type.
 */
@ServiceClientBuilder(
    serviceClients = {
        StringOperationClient.class,
        BytesClient.class,
        DatetimeOperationClient.class,
        DurationOperationClient.class,
        PlainDateClient.class,
        PlainTimeClient.class,
        CollectionsByteClient.class,
        CollectionsModelClient.class,
        StringLiteralClient.class,
        IntLiteralClient.class,
        FloatLiteralClient.class,
        BooleanLiteralClient.class,
        UnionStringLiteralClient.class,
        UnionIntLiteralClient.class,
        UnionFloatLiteralClient.class,
        RequiredAndOptionalClient.class,
        StringOperationAsyncClient.class,
        BytesAsyncClient.class,
        DatetimeOperationAsyncClient.class,
        DurationOperationAsyncClient.class,
        PlainDateAsyncClient.class,
        PlainTimeAsyncClient.class,
        CollectionsByteAsyncClient.class,
        CollectionsModelAsyncClient.class,
        StringLiteralAsyncClient.class,
        IntLiteralAsyncClient.class,
        FloatLiteralAsyncClient.class,
        BooleanLiteralAsyncClient.class,
        UnionStringLiteralAsyncClient.class,
        UnionIntLiteralAsyncClient.class,
        UnionFloatLiteralAsyncClient.class,
        RequiredAndOptionalAsyncClient.class })
public final class OptionalClientBuilder implements HttpTrait<OptionalClientBuilder>,
    ConfigurationTrait<OptionalClientBuilder>, EndpointTrait<OptionalClientBuilder> {
    @Generated
    private static final String SDK_NAME = "name";

    @Generated
    private static final String SDK_VERSION = "version";

    @Generated
    private static final Map<String, String> PROPERTIES = CoreUtils.getProperties("type-property-optional.properties");

    @Generated
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /**
     * Create an instance of the OptionalClientBuilder.
     */
    @Generated
    public OptionalClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * The HTTP pipeline to send requests through.
     */
    @Generated
    private HttpPipeline pipeline;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public OptionalClientBuilder pipeline(HttpPipeline pipeline) {
        if (this.pipeline != null && pipeline == null) {
            LOGGER.atInfo().log("HttpPipeline is being set to 'null' when it was previously configured.");
        }
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    @Generated
    private HttpClient httpClient;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public OptionalClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    @Generated
    private HttpLogOptions httpLogOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public OptionalClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The client options such as application ID and custom headers to set on a request.
     */
    @Generated
    private ClientOptions clientOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public OptionalClientBuilder clientOptions(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        return this;
    }

    /*
     * The retry options to configure retry policy for failed requests.
     */
    @Generated
    private RetryOptions retryOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public OptionalClientBuilder retryOptions(RetryOptions retryOptions) {
        this.retryOptions = retryOptions;
        return this;
    }

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public OptionalClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        Objects.requireNonNull(customPolicy, "'customPolicy' cannot be null.");
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /*
     * The configuration store that is used during construction of the service client.
     */
    @Generated
    private Configuration configuration;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public OptionalClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The service endpoint
     */
    @Generated
    private String endpoint;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public OptionalClientBuilder endpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if applicable.
     */
    @Generated
    private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     * 
     * @param retryPolicy the retryPolicy value.
     * @return the OptionalClientBuilder.
     */
    @Generated
    public OptionalClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /**
     * Builds an instance of OptionalClientImpl with the provided parameters.
     * 
     * @return an instance of OptionalClientImpl.
     */
    @Generated
    private OptionalClientImpl buildInnerClient() {
        this.validateClient();
        HttpPipeline localPipeline = (pipeline != null) ? pipeline : createHttpPipeline();
        String localEndpoint = (endpoint != null) ? endpoint : "http://localhost:3000";
        OptionalClientImpl client
            = new OptionalClientImpl(localPipeline, JacksonAdapter.createDefaultSerializerAdapter(), localEndpoint);
        return client;
    }

    @Generated
    private void validateClient() {
        // This method is invoked from 'buildInnerClient'/'buildClient' method.
        // Developer can customize this method, to validate that the necessary conditions are met for the new client.
    }

    @Generated
    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration
            = (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        HttpLogOptions localHttpLogOptions = this.httpLogOptions == null ? new HttpLogOptions() : this.httpLogOptions;
        ClientOptions localClientOptions = this.clientOptions == null ? new ClientOptions() : this.clientOptions;
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        String clientName = PROPERTIES.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, "UnknownVersion");
        String applicationId = CoreUtils.getApplicationId(localClientOptions, localHttpLogOptions);
        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));
        policies.add(new RequestIdPolicy());
        policies.add(new AddHeadersFromContextPolicy());
        HttpHeaders headers = CoreUtils.createHttpHeadersFromClientOptions(localClientOptions);
        if (headers != null) {
            policies.add(new AddHeadersPolicy(headers));
        }
        this.pipelinePolicies.stream()
            .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(ClientBuilderUtil.validateAndGetRetryPolicy(retryPolicy, retryOptions, new RetryPolicy()));
        policies.add(new AddDatePolicy());
        this.pipelinePolicies.stream()
            .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
        HttpPipeline httpPipeline = new HttpPipelineBuilder().policies(policies.toArray(new HttpPipelinePolicy[0]))
            .httpClient(httpClient)
            .clientOptions(localClientOptions)
            .build();
        return httpPipeline;
    }

    /**
     * Builds an instance of StringOperationAsyncClient class.
     * 
     * @return an instance of StringOperationAsyncClient.
     */
    @Generated
    public StringOperationAsyncClient buildStringOperationAsyncClient() {
        return new StringOperationAsyncClient(buildInnerClient().getStringOperations());
    }

    /**
     * Builds an instance of BytesAsyncClient class.
     * 
     * @return an instance of BytesAsyncClient.
     */
    @Generated
    public BytesAsyncClient buildBytesAsyncClient() {
        return new BytesAsyncClient(buildInnerClient().getBytes());
    }

    /**
     * Builds an instance of DatetimeOperationAsyncClient class.
     * 
     * @return an instance of DatetimeOperationAsyncClient.
     */
    @Generated
    public DatetimeOperationAsyncClient buildDatetimeOperationAsyncClient() {
        return new DatetimeOperationAsyncClient(buildInnerClient().getDatetimeOperations());
    }

    /**
     * Builds an instance of DurationOperationAsyncClient class.
     * 
     * @return an instance of DurationOperationAsyncClient.
     */
    @Generated
    public DurationOperationAsyncClient buildDurationOperationAsyncClient() {
        return new DurationOperationAsyncClient(buildInnerClient().getDurationOperations());
    }

    /**
     * Builds an instance of PlainDateAsyncClient class.
     * 
     * @return an instance of PlainDateAsyncClient.
     */
    @Generated
    public PlainDateAsyncClient buildPlainDateAsyncClient() {
        return new PlainDateAsyncClient(buildInnerClient().getPlainDates());
    }

    /**
     * Builds an instance of PlainTimeAsyncClient class.
     * 
     * @return an instance of PlainTimeAsyncClient.
     */
    @Generated
    public PlainTimeAsyncClient buildPlainTimeAsyncClient() {
        return new PlainTimeAsyncClient(buildInnerClient().getPlainTimes());
    }

    /**
     * Builds an instance of CollectionsByteAsyncClient class.
     * 
     * @return an instance of CollectionsByteAsyncClient.
     */
    @Generated
    public CollectionsByteAsyncClient buildCollectionsByteAsyncClient() {
        return new CollectionsByteAsyncClient(buildInnerClient().getCollectionsBytes());
    }

    /**
     * Builds an instance of CollectionsModelAsyncClient class.
     * 
     * @return an instance of CollectionsModelAsyncClient.
     */
    @Generated
    public CollectionsModelAsyncClient buildCollectionsModelAsyncClient() {
        return new CollectionsModelAsyncClient(buildInnerClient().getCollectionsModels());
    }

    /**
     * Builds an instance of StringLiteralAsyncClient class.
     * 
     * @return an instance of StringLiteralAsyncClient.
     */
    @Generated
    public StringLiteralAsyncClient buildStringLiteralAsyncClient() {
        return new StringLiteralAsyncClient(buildInnerClient().getStringLiterals());
    }

    /**
     * Builds an instance of IntLiteralAsyncClient class.
     * 
     * @return an instance of IntLiteralAsyncClient.
     */
    @Generated
    public IntLiteralAsyncClient buildIntLiteralAsyncClient() {
        return new IntLiteralAsyncClient(buildInnerClient().getIntLiterals());
    }

    /**
     * Builds an instance of FloatLiteralAsyncClient class.
     * 
     * @return an instance of FloatLiteralAsyncClient.
     */
    @Generated
    public FloatLiteralAsyncClient buildFloatLiteralAsyncClient() {
        return new FloatLiteralAsyncClient(buildInnerClient().getFloatLiterals());
    }

    /**
     * Builds an instance of BooleanLiteralAsyncClient class.
     * 
     * @return an instance of BooleanLiteralAsyncClient.
     */
    @Generated
    public BooleanLiteralAsyncClient buildBooleanLiteralAsyncClient() {
        return new BooleanLiteralAsyncClient(buildInnerClient().getBooleanLiterals());
    }

    /**
     * Builds an instance of UnionStringLiteralAsyncClient class.
     * 
     * @return an instance of UnionStringLiteralAsyncClient.
     */
    @Generated
    public UnionStringLiteralAsyncClient buildUnionStringLiteralAsyncClient() {
        return new UnionStringLiteralAsyncClient(buildInnerClient().getUnionStringLiterals());
    }

    /**
     * Builds an instance of UnionIntLiteralAsyncClient class.
     * 
     * @return an instance of UnionIntLiteralAsyncClient.
     */
    @Generated
    public UnionIntLiteralAsyncClient buildUnionIntLiteralAsyncClient() {
        return new UnionIntLiteralAsyncClient(buildInnerClient().getUnionIntLiterals());
    }

    /**
     * Builds an instance of UnionFloatLiteralAsyncClient class.
     * 
     * @return an instance of UnionFloatLiteralAsyncClient.
     */
    @Generated
    public UnionFloatLiteralAsyncClient buildUnionFloatLiteralAsyncClient() {
        return new UnionFloatLiteralAsyncClient(buildInnerClient().getUnionFloatLiterals());
    }

    /**
     * Builds an instance of RequiredAndOptionalAsyncClient class.
     * 
     * @return an instance of RequiredAndOptionalAsyncClient.
     */
    @Generated
    public RequiredAndOptionalAsyncClient buildRequiredAndOptionalAsyncClient() {
        return new RequiredAndOptionalAsyncClient(buildInnerClient().getRequiredAndOptionals());
    }

    /**
     * Builds an instance of StringOperationClient class.
     * 
     * @return an instance of StringOperationClient.
     */
    @Generated
    public StringOperationClient buildStringOperationClient() {
        return new StringOperationClient(buildInnerClient().getStringOperations());
    }

    /**
     * Builds an instance of BytesClient class.
     * 
     * @return an instance of BytesClient.
     */
    @Generated
    public BytesClient buildBytesClient() {
        return new BytesClient(buildInnerClient().getBytes());
    }

    /**
     * Builds an instance of DatetimeOperationClient class.
     * 
     * @return an instance of DatetimeOperationClient.
     */
    @Generated
    public DatetimeOperationClient buildDatetimeOperationClient() {
        return new DatetimeOperationClient(buildInnerClient().getDatetimeOperations());
    }

    /**
     * Builds an instance of DurationOperationClient class.
     * 
     * @return an instance of DurationOperationClient.
     */
    @Generated
    public DurationOperationClient buildDurationOperationClient() {
        return new DurationOperationClient(buildInnerClient().getDurationOperations());
    }

    /**
     * Builds an instance of PlainDateClient class.
     * 
     * @return an instance of PlainDateClient.
     */
    @Generated
    public PlainDateClient buildPlainDateClient() {
        return new PlainDateClient(buildInnerClient().getPlainDates());
    }

    /**
     * Builds an instance of PlainTimeClient class.
     * 
     * @return an instance of PlainTimeClient.
     */
    @Generated
    public PlainTimeClient buildPlainTimeClient() {
        return new PlainTimeClient(buildInnerClient().getPlainTimes());
    }

    /**
     * Builds an instance of CollectionsByteClient class.
     * 
     * @return an instance of CollectionsByteClient.
     */
    @Generated
    public CollectionsByteClient buildCollectionsByteClient() {
        return new CollectionsByteClient(buildInnerClient().getCollectionsBytes());
    }

    /**
     * Builds an instance of CollectionsModelClient class.
     * 
     * @return an instance of CollectionsModelClient.
     */
    @Generated
    public CollectionsModelClient buildCollectionsModelClient() {
        return new CollectionsModelClient(buildInnerClient().getCollectionsModels());
    }

    /**
     * Builds an instance of StringLiteralClient class.
     * 
     * @return an instance of StringLiteralClient.
     */
    @Generated
    public StringLiteralClient buildStringLiteralClient() {
        return new StringLiteralClient(buildInnerClient().getStringLiterals());
    }

    /**
     * Builds an instance of IntLiteralClient class.
     * 
     * @return an instance of IntLiteralClient.
     */
    @Generated
    public IntLiteralClient buildIntLiteralClient() {
        return new IntLiteralClient(buildInnerClient().getIntLiterals());
    }

    /**
     * Builds an instance of FloatLiteralClient class.
     * 
     * @return an instance of FloatLiteralClient.
     */
    @Generated
    public FloatLiteralClient buildFloatLiteralClient() {
        return new FloatLiteralClient(buildInnerClient().getFloatLiterals());
    }

    /**
     * Builds an instance of BooleanLiteralClient class.
     * 
     * @return an instance of BooleanLiteralClient.
     */
    @Generated
    public BooleanLiteralClient buildBooleanLiteralClient() {
        return new BooleanLiteralClient(buildInnerClient().getBooleanLiterals());
    }

    /**
     * Builds an instance of UnionStringLiteralClient class.
     * 
     * @return an instance of UnionStringLiteralClient.
     */
    @Generated
    public UnionStringLiteralClient buildUnionStringLiteralClient() {
        return new UnionStringLiteralClient(buildInnerClient().getUnionStringLiterals());
    }

    /**
     * Builds an instance of UnionIntLiteralClient class.
     * 
     * @return an instance of UnionIntLiteralClient.
     */
    @Generated
    public UnionIntLiteralClient buildUnionIntLiteralClient() {
        return new UnionIntLiteralClient(buildInnerClient().getUnionIntLiterals());
    }

    /**
     * Builds an instance of UnionFloatLiteralClient class.
     * 
     * @return an instance of UnionFloatLiteralClient.
     */
    @Generated
    public UnionFloatLiteralClient buildUnionFloatLiteralClient() {
        return new UnionFloatLiteralClient(buildInnerClient().getUnionFloatLiterals());
    }

    /**
     * Builds an instance of RequiredAndOptionalClient class.
     * 
     * @return an instance of RequiredAndOptionalClient.
     */
    @Generated
    public RequiredAndOptionalClient buildRequiredAndOptionalClient() {
        return new RequiredAndOptionalClient(buildInnerClient().getRequiredAndOptionals());
    }

    private static final ClientLogger LOGGER = new ClientLogger(OptionalClientBuilder.class);
}
