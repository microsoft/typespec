// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.models.commontypes.managedidentity;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpPipeline;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.models.commontypes.managedidentity.fluent.ManagedIdentityClient;
import com.azure.resourcemanager.models.commontypes.managedidentity.implementation.ManagedIdentityClientBuilder;
import com.azure.resourcemanager.models.commontypes.managedidentity.implementation.ManagedIdentityTrackedResourcesImpl;
import com.azure.resourcemanager.models.commontypes.managedidentity.models.ManagedIdentityTrackedResources;
import java.time.Duration;
import java.util.Objects;

/**
 * Entry point to ManagedIdentityManager.
 * Arm Managed Identity Provider management API.
 */
public final class ManagedIdentityManager {
    private ManagedIdentityTrackedResources managedIdentityTrackedResources;

    private final ManagedIdentityClient clientObject;

    private ManagedIdentityManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject = new ManagedIdentityClientBuilder().pipeline(httpPipeline)
            .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
            .subscriptionId(profile.getSubscriptionId())
            .defaultPollInterval(defaultPollInterval)
            .buildClient();
    }

    /**
     * Creates an instance of ManagedIdentity service API entry point.
     * 
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the ManagedIdentity service API instance.
     */
    public static ManagedIdentityManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of ManagedIdentity service API entry point.
     * 
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the ManagedIdentity service API instance.
     */
    public static ManagedIdentityManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new ManagedIdentityManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create ManagedIdentityManager with optional configuration.
     * 
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new ManagedIdentityManager.Configurable();
    }

    /**
     * Gets the resource collection API of ManagedIdentityTrackedResources. It manages ManagedIdentityTrackedResource.
     * 
     * @return Resource collection API of ManagedIdentityTrackedResources.
     */
    public ManagedIdentityTrackedResources managedIdentityTrackedResources() {
        if (this.managedIdentityTrackedResources == null) {
            this.managedIdentityTrackedResources
                = new ManagedIdentityTrackedResourcesImpl(clientObject.getManagedIdentityTrackedResources(), this);
        }
        return managedIdentityTrackedResources;
    }

    /**
     * Gets wrapped service client ManagedIdentityClient providing direct access to the underlying auto-generated API
     * implementation, based on Azure REST API.
     * 
     * @return Wrapped service client ManagedIdentityClient.
     */
    public ManagedIdentityClient serviceClient() {
        return this.clientObject;
    }
}
