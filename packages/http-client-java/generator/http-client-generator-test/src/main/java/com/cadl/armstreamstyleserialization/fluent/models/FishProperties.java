// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.armstreamstyleserialization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The FishProperties model.
 */
@Fluent
public final class FishProperties implements JsonSerializable<FishProperties> {
    /*
     * The tailProperties property.
     */
    private TailProperties innerTailProperties = new TailProperties();

    /**
     * Creates an instance of FishProperties class.
     */
    public FishProperties() {
    }

    /**
     * Get the innerTailProperties property: The tailProperties property.
     * 
     * @return the innerTailProperties value.
     */
    private TailProperties innerTailProperties() {
        return this.innerTailProperties;
    }

    /**
     * Get the length property: The length property.
     * 
     * @return the length value.
     */
    public double length() {
        return this.innerTailProperties() == null ? 0.0 : this.innerTailProperties().length();
    }

    /**
     * Set the length property: The length property.
     * 
     * @param length the length value to set.
     * @return the FishProperties object itself.
     */
    public FishProperties withLength(double length) {
        if (this.innerTailProperties() == null) {
            this.innerTailProperties = new TailProperties();
        }
        this.innerTailProperties().withLength(length);
        return this;
    }

    /**
     * Get the patten property: The patten property.
     * 
     * @return the patten value.
     */
    public String patten() {
        return this.innerTailProperties() == null ? null : this.innerTailProperties().patten();
    }

    /**
     * Get the requiredString property: The requiredString property.
     * 
     * @return the requiredString value.
     */
    public String requiredString() {
        return this.innerTailProperties() == null ? null : this.innerTailProperties().requiredString();
    }

    /**
     * Set the requiredString property: The requiredString property.
     * 
     * @param requiredString the requiredString value to set.
     * @return the FishProperties object itself.
     */
    public FishProperties withRequiredString(String requiredString) {
        if (this.innerTailProperties() == null) {
            this.innerTailProperties = new TailProperties();
        }
        this.innerTailProperties().withRequiredString(requiredString);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerTailProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerTailProperties in model FishProperties"));
        } else {
            innerTailProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FishProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("tailProperties", this.innerTailProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FishProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FishProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FishProperties.
     */
    public static FishProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FishProperties deserializedFishProperties = new FishProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tailProperties".equals(fieldName)) {
                    deserializedFishProperties.innerTailProperties = TailProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFishProperties;
        });
    }
}
