// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.models.commontypes.managedidentity.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.models.commontypes.managedidentity.fluent.ManagedIdentityTrackedResourcesClient;
import com.azure.resourcemanager.models.commontypes.managedidentity.fluent.models.ManagedIdentityTrackedResourceInner;
import com.azure.resourcemanager.models.commontypes.managedidentity.models.ManagedIdentityTrackedResource;
import com.azure.resourcemanager.models.commontypes.managedidentity.models.ManagedIdentityTrackedResources;

public final class ManagedIdentityTrackedResourcesImpl implements ManagedIdentityTrackedResources {
    private static final ClientLogger LOGGER = new ClientLogger(ManagedIdentityTrackedResourcesImpl.class);

    private final ManagedIdentityTrackedResourcesClient innerClient;

    private final com.azure.resourcemanager.models.commontypes.managedidentity.ManagedIdentityManager serviceManager;

    public ManagedIdentityTrackedResourcesImpl(ManagedIdentityTrackedResourcesClient innerClient,
        com.azure.resourcemanager.models.commontypes.managedidentity.ManagedIdentityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ManagedIdentityTrackedResource> getByResourceGroupWithResponse(String resourceGroupName,
        String managedIdentityTrackedResourceName, Context context) {
        Response<ManagedIdentityTrackedResourceInner> inner = this.serviceClient()
            .getByResourceGroupWithResponse(resourceGroupName, managedIdentityTrackedResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ManagedIdentityTrackedResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ManagedIdentityTrackedResource getByResourceGroup(String resourceGroupName,
        String managedIdentityTrackedResourceName) {
        ManagedIdentityTrackedResourceInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, managedIdentityTrackedResourceName);
        if (inner != null) {
            return new ManagedIdentityTrackedResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ManagedIdentityTrackedResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedIdentityTrackedResourceName
            = ResourceManagerUtils.getValueFromIdByName(id, "managedIdentityTrackedResources");
        if (managedIdentityTrackedResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'managedIdentityTrackedResources'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, managedIdentityTrackedResourceName, Context.NONE)
            .getValue();
    }

    public Response<ManagedIdentityTrackedResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedIdentityTrackedResourceName
            = ResourceManagerUtils.getValueFromIdByName(id, "managedIdentityTrackedResources");
        if (managedIdentityTrackedResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'managedIdentityTrackedResources'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, managedIdentityTrackedResourceName, context);
    }

    private ManagedIdentityTrackedResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.models.commontypes.managedidentity.ManagedIdentityManager manager() {
        return this.serviceManager;
    }

    public ManagedIdentityTrackedResourceImpl define(String name) {
        return new ManagedIdentityTrackedResourceImpl(name, this.manager());
    }
}
