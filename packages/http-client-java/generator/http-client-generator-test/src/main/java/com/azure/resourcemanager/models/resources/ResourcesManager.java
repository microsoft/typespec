// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.models.resources;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpPipeline;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.models.resources.fluent.ResourcesClient;
import com.azure.resourcemanager.models.resources.implementation.NestedProxyResourcesImpl;
import com.azure.resourcemanager.models.resources.implementation.ResourcesClientBuilder;
import com.azure.resourcemanager.models.resources.implementation.TopLevelTrackedResourcesImpl;
import com.azure.resourcemanager.models.resources.models.NestedProxyResources;
import com.azure.resourcemanager.models.resources.models.TopLevelTrackedResources;
import java.time.Duration;
import java.util.Objects;

/**
 * Entry point to ResourcesManager.
 * Arm Resource Provider management API.
 */
public final class ResourcesManager {
    private TopLevelTrackedResources topLevelTrackedResources;

    private NestedProxyResources nestedProxyResources;

    private final ResourcesClient clientObject;

    private ResourcesManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject = new ResourcesClientBuilder().pipeline(httpPipeline)
            .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
            .subscriptionId(profile.getSubscriptionId())
            .defaultPollInterval(defaultPollInterval)
            .buildClient();
    }

    /**
     * Creates an instance of Resources service API entry point.
     * 
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Resources service API instance.
     */
    public static ResourcesManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of Resources service API entry point.
     * 
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the Resources service API instance.
     */
    public static ResourcesManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new ResourcesManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create ResourcesManager with optional configuration.
     * 
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new ResourcesManager.Configurable();
    }

    /**
     * Gets the resource collection API of TopLevelTrackedResources. It manages TopLevelTrackedResource.
     * 
     * @return Resource collection API of TopLevelTrackedResources.
     */
    public TopLevelTrackedResources topLevelTrackedResources() {
        if (this.topLevelTrackedResources == null) {
            this.topLevelTrackedResources
                = new TopLevelTrackedResourcesImpl(clientObject.getTopLevelTrackedResources(), this);
        }
        return topLevelTrackedResources;
    }

    /**
     * Gets the resource collection API of NestedProxyResources. It manages NestedProxyResource.
     * 
     * @return Resource collection API of NestedProxyResources.
     */
    public NestedProxyResources nestedProxyResources() {
        if (this.nestedProxyResources == null) {
            this.nestedProxyResources = new NestedProxyResourcesImpl(clientObject.getNestedProxyResources(), this);
        }
        return nestedProxyResources;
    }

    /**
     * Gets wrapped service client ResourcesClient providing direct access to the underlying auto-generated API
     * implementation, based on Azure REST API.
     * 
     * @return Wrapped service client ResourcesClient.
     */
    public ResourcesClient serviceClient() {
        return this.clientObject;
    }
}
