// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.models.resources.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.models.resources.fluent.models.NestedProxyResourceInner;
import com.azure.resourcemanager.models.resources.models.NestedProxyResource;
import com.azure.resourcemanager.models.resources.models.NestedProxyResourceProperties;

public final class NestedProxyResourceImpl
    implements NestedProxyResource, NestedProxyResource.Definition, NestedProxyResource.Update {
    private NestedProxyResourceInner innerObject;

    private final com.azure.resourcemanager.models.resources.ResourcesManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public NestedProxyResourceProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public NestedProxyResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.models.resources.ResourcesManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String topLevelTrackedResourceName;

    private String nextedProxyResourceName;

    public NestedProxyResourceImpl withExistingTopLevelTrackedResource(String resourceGroupName,
        String topLevelTrackedResourceName) {
        this.resourceGroupName = resourceGroupName;
        this.topLevelTrackedResourceName = topLevelTrackedResourceName;
        return this;
    }

    public NestedProxyResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getNestedProxyResources()
            .createOrReplace(resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, this.innerModel(),
                Context.NONE);
        return this;
    }

    public NestedProxyResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getNestedProxyResources()
            .createOrReplace(resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, this.innerModel(),
                context);
        return this;
    }

    NestedProxyResourceImpl(String name, com.azure.resourcemanager.models.resources.ResourcesManager serviceManager) {
        this.innerObject = new NestedProxyResourceInner();
        this.serviceManager = serviceManager;
        this.nextedProxyResourceName = name;
    }

    public NestedProxyResourceImpl update() {
        return this;
    }

    public NestedProxyResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getNestedProxyResources()
            .update(resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, this.innerModel(),
                Context.NONE);
        return this;
    }

    public NestedProxyResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getNestedProxyResources()
            .update(resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, this.innerModel(),
                context);
        return this;
    }

    NestedProxyResourceImpl(NestedProxyResourceInner innerObject,
        com.azure.resourcemanager.models.resources.ResourcesManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.topLevelTrackedResourceName
            = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "topLevelTrackedResources");
        this.nextedProxyResourceName
            = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "nestedProxyResources");
    }

    public NestedProxyResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getNestedProxyResources()
            .getWithResponse(resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, Context.NONE)
            .getValue();
        return this;
    }

    public NestedProxyResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getNestedProxyResources()
            .getWithResponse(resourceGroupName, topLevelTrackedResourceName, nextedProxyResourceName, context)
            .getValue();
        return this;
    }

    public NestedProxyResourceImpl withProperties(NestedProxyResourceProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
