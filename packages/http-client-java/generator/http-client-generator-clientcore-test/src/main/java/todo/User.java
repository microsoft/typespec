package todo;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * The User model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class User implements JsonSerializable<User> {
    /*
     * An autogenerated unique id for the user
     */
    @Metadata(generated = true)
    private long id;

    /*
     * The user's username
     */
    @Metadata(generated = true)
    private final String username;

    /*
     * The user's email address
     */
    @Metadata(generated = true)
    private final String email;

    /*
     * The user's password, provided when creating a user
     * but is otherwise not visible (and hashed by the backend)
     */
    @Metadata(generated = true)
    private final String password;

    /**
     * Creates an instance of User class.
     * 
     * @param username the username value to set.
     * @param email the email value to set.
     * @param password the password value to set.
     */
    @Metadata(generated = true)
    public User(String username, String email, String password) {
        this.username = username;
        this.email = email;
        this.password = password;
    }

    /**
     * Get the id property: An autogenerated unique id for the user.
     * 
     * @return the id value.
     */
    @Metadata(generated = true)
    public long getId() {
        return this.id;
    }

    /**
     * Get the username property: The user's username.
     * 
     * @return the username value.
     */
    @Metadata(generated = true)
    public String getUsername() {
        return this.username;
    }

    /**
     * Get the email property: The user's email address.
     * 
     * @return the email value.
     */
    @Metadata(generated = true)
    public String getEmail() {
        return this.email;
    }

    /**
     * Get the password property: The user's password, provided when creating a user
     * but is otherwise not visible (and hashed by the backend).
     * 
     * @return the password value.
     */
    @Metadata(generated = true)
    public String getPassword() {
        return this.password;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("username", this.username);
        jsonWriter.writeStringField("email", this.email);
        jsonWriter.writeStringField("password", this.password);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of User from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of User if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the User.
     */
    @Metadata(generated = true)
    public static User fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            long id = 0L;
            String username = null;
            String email = null;
            String password = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getLong();
                } else if ("username".equals(fieldName)) {
                    username = reader.getString();
                } else if ("email".equals(fieldName)) {
                    email = reader.getString();
                } else if ("password".equals(fieldName)) {
                    password = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            User deserializedUser = new User(username, email, password);
            deserializedUser.id = id;

            return deserializedUser;
        });
    }
}
