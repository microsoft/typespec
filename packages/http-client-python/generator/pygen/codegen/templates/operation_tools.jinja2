{% macro wrap_string(string, wrapstring, width=95, suffix_string="", escape_backslashes=true) %}
{%- if width is string -%}
    {# Handle legacy wrap_model_string calls: wrap_string(text, wrapstring, suffix_string) #}
    {%- set actual_width = 95 -%}
    {%- set actual_suffix = width -%}
    {%- set actual_escape = false -%}
{%- else -%}
    {# Handle normal wrap_string calls: wrap_string(text, wrapstring, width, suffix_string, escape_backslashes) #}
    {%- set actual_width = width -%}
    {%- set actual_suffix = suffix_string -%}
    {%- set actual_escape = escape_backslashes -%}
{%- endif -%}

{%- set lines = string.split('\n') -%}
{%- set processed_lines = [] -%}
{%- for line in lines -%}
    {%- set stripped = line.strip() -%}
    {%- if stripped.startswith('* ') -%}
        {%- set bullet_content = stripped[2:] -%}
        {%- set bullet_line = '     * ' + bullet_content -%}
        {%- set wrapped = bullet_line | wordwrap(width=actual_width, break_long_words=False, break_on_hyphens=False, wrapstring=wrapstring + '   ') -%}
        {%- set _ = processed_lines.append(wrapped) -%}
    {%- elif stripped -%}
        {%- if width is string or suffix_string is defined -%}
            {# Model documentation mode - add extra space for continuation #}
            {%- set wrapped = stripped | wordwrap(width=actual_width, break_long_words=False, break_on_hyphens=False, wrapstring=wrapstring + ' ') -%}
        {%- else -%}
            {# Operation documentation mode - no extra space #}
            {%- set wrapped = stripped | wordwrap(width=actual_width, break_long_words=False, break_on_hyphens=False, wrapstring=wrapstring) -%}
        {%- endif -%}
        {%- set _ = processed_lines.append(wrapped) -%}
    {%- endif -%}
{%- endfor -%}
{%- set original_result = processed_lines | join('\n') -%}

{%- if actual_suffix -%}
{% set list_result = original_result.split('\n') %}
{% for line in list_result %}
    {% set prefix = "" if loop.index == 1 else " " %}
    {% set suffix = actual_suffix if list_result | length == loop.index %}
{{ prefix }}{{ line }}{{ suffix }}
{% endfor %}
{%- else -%}
{{ original_result | replace("\\", "\\\\") if actual_escape else original_result }}
{%- endif -%}
{% endmacro %}

{% macro description(builder, serializer) %}
{% set example_template = serializer.example_template(builder) %}
{% set param_description_and_response_docstring = serializer.param_description_and_response_docstring(builder) %}
{% set ns = namespace(line_too_long=false) %}
{% for item in param_description_and_response_docstring %}
    {% if item and serializer.line_too_long(wrap_string(item, wrapstring='\n').split('\n'), 8) %}
        {% set ns.line_too_long = true %}
    {% endif %}
{% endfor %}
    {% for description in serializer.description_and_summary(builder) %}
        {% if description %}
{% set description = wrap_string(description, wrapstring='\n') %}
{{ '"""' + description if loop.first else description }}
        {% else %}

        {% endif %}
    {% endfor %}
    {% for description in param_description_and_response_docstring %}
        {% if description %}
{% set description = wrap_string(description, wrapstring='\n') %}
{{ " " if description[0] != ":" and description[0] != " " else "" }}{{ description}}
        {% else %}

        {% endif %}
{% endfor %}
{% if example_template %}

Example:
    .. code-block:: python
    {% for template_line in example_template %}
        {% if template_line %}
            {% set wrap_amount = (template_line | length) - (template_line.lstrip() | length) + 10 %}
        {{  wrap_string(template_line, wrapstring='\n' + " " * wrap_amount, width=(95 - wrap_amount)) }}
        {% else %}

        {% endif %}
    {% endfor %}
{% endif %}
"""
{% endmacro %}

{% macro serialize(lines) %}
{% for line in lines %}
    {% if line %}
{{ line }}
    {% else %}

    {% endif %}
{% endfor %}{% endmacro %}

{% macro serialize_with_wrap(lines, wrapstring) %}
{% for line in lines %}
    {% if line %}
{{ wrap_string(line, wrapstring=wrapstring) }}
    {% else %}

    {% endif %}
{% endfor %}{% endmacro %}

{% macro declare_serializer(code_model) %}
{% if code_model.has_non_abstract_operations %}
_SERIALIZER = Serializer()
    {% if not code_model.options["client-side-validation"] %}
_SERIALIZER.client_side_validation = False
    {% endif %}
{% endif %}
{% endmacro %}

{% macro generate_overloads(operation_serializer, operation) %}
{% for overload in operation.overloads %}
{{ operation_serializer.method_signature_and_response_type_annotation(overload) }}
{% if not operation.internal %}
    {{ description(overload, operation_serializer) | indent }}
{% else %}
    ...
{% endif %}
{% endfor %}{% endmacro %}
