# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Unbranded Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Unbranded (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Mapping, overload

from .. import _model_base
from .._model_base import rest_field


class Pet(_model_base.Model):
    """This is base model for not-discriminated normal multiple levels inheritance.


    :ivar name: Required.
    :vartype name: str
    """

    name: str = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Cat(Pet):
    """The second level model in the normal multiple levels inheritance.


    :ivar name: Required.
    :vartype name: str
    :ivar age: Required.
    :vartype age: int
    """

    age: int = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        age: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Siamese(Cat):
    """The third level model in the normal multiple levels inheritance.


    :ivar name: Required.
    :vartype name: str
    :ivar age: Required.
    :vartype age: int
    :ivar smart: Required.
    :vartype smart: bool
    """

    smart: bool = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        age: int,
        smart: bool,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
