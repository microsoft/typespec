/**
 * This configuration file defines custom commands for the "rush" command-line.
 * For full documentation, please see https://rushjs.io
 */
{
  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/command-line.schema.json",
  /**
   * Custom "commands" introduce new verbs for the command-line.  To see the help for these
   * example commands, try "rush --help", "rush my-bulk-command --help", or
   * "rush my-global-command --help".
   */
  "commands": [
    {
      "commandKind": "global",
      "safeForSimultaneousRushProcesses": true,
      "name": "watch",
      "summary": "(CUSTOM) Runs TypeScript compiler in watch mode on all projects.",
      "shellCommand": "node eng/scripts/watch.js"
    },
    {
      "commandKind": "bulk",
      "name": "test",
      "summary": "(CUSTOM) Runs all tests.",
      "enableParallelism": true,
      "ignoreMissingScript": true,
      "ignoreDependencyOrder": true
    },
    {
      "commandKind": "bulk",
      "name": "test-official",
      "summary": "(CUSTOM) Runs all tests for CI or PR validation. Disallows .only.",
      "enableParallelism": true,
      "ignoreMissingScript": true,
      "ignoreDependencyOrder": true
    },
    {
      "commandKind": "global",
      "safeForSimultaneousRushProcesses": true,
      "name": "merge-coverage",
      "summary": "(CUSTOM) Merge the coverage reports generated by running `rush test-official`",
      "shellCommand": "node eng/scripts/merge-coverage.js"
    },
    {
      "commandKind": "global",
      "name": "format",
      "summary": "(CUSTOM) Formats all code with Prettier.",
      "shellCommand": "node eng/scripts/format.js"
    },
    {
      "commandKind": "global",
      "name": "check-format",
      "summary": "(CUSTOM) Checks formatting of all code with with Prettier.",
      "shellCommand": "node eng/scripts/check-format.js"
    },
    {
      "commandKind": "global",
      "name": "regen-docs",
      "summary": "(CUSTOM) Regenerate the reference docs.",
      "shellCommand": "node eng/scripts/npm-run.js regen-docs"
    },
    {
      "commandKind": "global",
      "name": "regen-samples",
      "summary": "(CUSTOM) Regenerate samples.",
      "shellCommand": "node eng/scripts/npm-run.js regen-samples"
    },
    {
      "commandKind": "global",
      "name": "update-latest-docs",
      "summary": "(CUSTOM) Copy the current docs to the latest.",
      "shellCommand": "node eng/scripts/npm-run.js update-latest-docs"
    },
    {
      "commandKind": "global",
      "name": "cspell",
      "summary": "(CUSTOM) Check spelling.",
      "shellCommand": "node eng/scripts/cspell.js"
    },
    {
      "commandKind": "global",
      "safeForSimultaneousRushProcesses": true,
      "name": "dogfood",
      "summary": "(CUSTOM) Globally installs local builds of @typespec/compiler and typespec-vscode.",
      "shellCommand": "node eng/scripts/dogfood.js"
    },
    {
      "commandKind": "bulk",
      "name": "lint",
      "summary": "Lint projects. Runs `npm run lint` on all projects.",
      "enableParallelism": true,
      "ignoreMissingScript": true,
      "ignoreDependencyOrder": true
    },
    {
      "commandKind": "bulk",
      "name": "lint:fix",
      "summary": "Fix lint issues in projects. Runs `npm run lint:fix` on all projects.",
      "enableParallelism": true,
      "ignoreMissingScript": true,
      "ignoreDependencyOrder": true
    },
    {
      "commandKind": "global",
      "safeForSimultaneousRushProcesses": true,
      "name": "e2e",
      "summary": "(CUSTOM) Runs the e2e tests",
      "shellCommand": "node e2e/e2e-tests.js"
    },
    {
      "commandKind": "bulk",
      "name": "clean",
      "summary": "(CUSTOM) Run `npm run clean` on all the projects.",
      "enableParallelism": true,
      "ignoreMissingScript": true,
      "ignoreDependencyOrder": true
    }
  ],
  /**
   * Custom "parameters" introduce new parameters for specified Rush command-line commands.
   * For example, you might define a "--production" parameter for the "rush build" command.
   */
  "parameters": [
    // {
    //   /**
    //    * (Required) Determines the type of custom parameter.
    //    * A "flag" is a custom command-line parameter whose presence acts as an on/off switch.
    //    */
    //   "parameterKind": "flag",
    //
    //   /**
    //    * (Required) The long name of the parameter.  It must be lower-case and use dash delimiters.
    //    */
    //   "longName": "--my-flag",
    //
    //   /**
    //    * An optional alternative short name for the parameter.  It must be a dash followed by a single
    //    * lower-case or upper-case letter, which is case-sensitive.
    //    *
    //    * NOTE: The Rush developers recommend that automation scripts should always use the long name
    //    * to improve readability.  The short name is only intended as a convenience for humans.
    //    * The alphabet letters run out quickly, and are difficult to memorize, so *only* use
    //    * a short name if you expect the parameter to be needed very often in everyday operations.
    //    */
    //   "shortName": "-m",
    //
    //   /**
    //    * (Required) A long description to be shown in the command-line help.
    //    *
    //    * Whenever you introduce commands/parameters, taking a little time to write meaningful
    //    * documentation can make a big difference for the developer experience in your repo.
    //    */
    //   "description": "A custom flag parameter that is passed to the scripts that are invoked when building projects",
    //
    //   /**
    //    * (Required) A list of custom commands and/or built-in Rush commands that this parameter may
    //    * be used with.  The parameter will be appended to the shell command that Rush invokes.
    //    */
    //    "associatedCommands": [ "build", "rebuild" ]
    // },
    //
    // {
    //   /**
    //    * (Required) Determines the type of custom parameter.
    //    * A "flag" is a custom command-line parameter whose presence acts as an on/off switch.
    //    */
    //   "parameterKind": "choice",
    //   "longName": "--my-choice",
    //   "description": "A custom choice parameter for the \"my-global-command\" custom command",
    //
    //   "associatedCommands": [ "my-global-command" ],
    //
    //   /**
    //    * Normally if a parameter is omitted from the command line, it will not be passed
    //    * to the shell command. this value will be inserted by default.  Whereas if a "defaultValue"
    //    * is defined, the parameter will always be passed to the shell command, and will use the
    //    * default value if unspecified.  The value must be one of the defined alternatives.
    //    */
    //   "defaultValue": "vanilla",
    //
    //   /**
    //    * (Required) A list of alternative argument values that can be chosen for this parameter.
    //    */
    //   "alternatives": [
    //     {
    //       /**
    //        * A token that is one of the alternatives that can be used with the choice parameter,
    //        * e.g. "vanilla" in "--flavor vanilla".
    //        */
    //       "name": "vanilla",
    //
    //       /**
    //        * A detailed description for the alternative that can be shown in the command-line help.
    //        *
    //        * Whenever you introduce commands/parameters, taking a little time to write meaningful
    //        * documentation can make a big difference for the developer experience in your repo.
    //        */
    //       "description": "Use the vanilla flavor (the default)"
    //     },
    //
    //     {
    //       "name": "chocolate",
    //       "description": "Use the chocolate flavor"
    //     },
    //
    //     {
    //       "name": "strawberry",
    //       "description": "Use the strawberry flavor"
    //     }
    //   ]
    // }
  ]
}
