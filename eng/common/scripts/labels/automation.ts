import { resolve } from "path";
import { stringify } from "yaml";
import { AreaPaths } from "../../config/areas.js";
import { AreaLabels } from "../../config/labels.js";
import { CheckOptions, repoRoot, syncFile } from "../common.js";
import {
  PolicyServiceConfig,
  and,
  eventResponderTask,
  hasLabel,
  includesModifiedFiles,
  isAction,
  labelAdded,
  labelRemoved,
  not,
  or,
  payloadType,
} from "./policy.js";

const policyFolder = resolve(repoRoot, ".github", "policies");

export interface SyncLabelAutomationOptions extends CheckOptions {}

export async function syncLabelAutomation(options: SyncLabelAutomationOptions) {
  await syncPolicyFile(issueTriageConfig, options);
  await syncPolicyFile(prTriageConfig, options);
}

async function syncPolicyFile(policy: PolicyServiceConfig, options: CheckOptions) {
  const yaml = stringify(policy);
  const content = `# This file is generated by the sync-labels script DO NOT EDIT manually\n${yaml}`;
  const filename = resolve(policyFolder, `${policy.id}.generated.yml`);
  await syncFile(filename, content, options);
}

const issueTriageConfig: PolicyServiceConfig = {
  id: "issues.triage",
  name: "New Issue Assign labels",
  description: "Assign labels to new issues",
  resource: "repository",
  disabled: false,
  configuration: {
    resourceManagementConfiguration: {
      eventResponderTasks: [
        eventResponderTask({
          description: "Adds `needs-area` label for new unassigned issues",
          if: [payloadType("Issues"), isAction("Opened"), not(and(["isAssignedToSomeone"]))],
          then: [
            {
              addLabel: {
                label: "needs-area",
              },
            },
          ],
        }),
        eventResponderTask({
          description: "Remove `needs-area` label when an area label is added",
          if: [
            payloadType("Issues"),
            hasLabel("needs-area"),
            "isOpen",
            or(Object.keys(AreaLabels).map((area) => labelAdded(area))),
          ],
          then: [
            {
              removeLabel: {
                label: "needs-area",
              },
            },
          ],
        }),
        eventResponderTask({
          description: "Add `needs-area` back when all area labels are removed",
          if: [
            payloadType("Issues"),
            not(hasLabel("needs-area")),
            "isOpen",
            or(Object.keys(AreaLabels).map((area) => labelRemoved(area))),
            not(or(Object.keys(AreaLabels).map((area) => hasLabel(area)))),
          ],
          then: [
            {
              removeLabel: {
                label: "needs-area",
              },
            },
          ],
        }),
      ],
    },
  },
};

const prTriageConfig: PolicyServiceConfig = {
  id: "prs.triage",
  name: "Assign area labels to PRs",
  description: "Assign area labels to PR depending on path modified.",
  resource: "repository",
  disabled: false,
  configuration: {
    resourceManagementConfiguration: {
      eventResponderTasks: [
        eventResponderTask({
          description: "Assign area labels to PRs based on modified files",
          if: [payloadType("Pull_Request"), "isOpen"],
          then: Object.entries(AreaPaths).map(([label, files]) => {
            return {
              if: [includesModifiedFiles(files)],
              then: [
                {
                  addLabel: {
                    label,
                  },
                },
              ],
            };
          }),
        }),
      ],
    },
  },
};
