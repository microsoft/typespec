parameters:
  # Whether to build alpha versions of the packages. This is passed as a flag to the build script.
  - name: BuildPrereleaseVersion
    type: boolean

  # Whether to use the `next` version of TypeSpec. This is passed as a flag to the initialize script.
  - name: UseTypeSpecNext
    type: boolean

  # Whether to publish to the internal feed.
  - name: Publish
    type: string
    default: "none"

  # Path to the emitter package's package.json file. If specified, it will be used to generate emitter-package.json in the artifact `build_artifacts`.
  - name: EmitterPackageJsonPath
    type: string
    default: "not-specified"

  # Custom steps to run in the Build and Test stages after the repositories are cloned.
  - name: AdditionalInitializeSteps
    type: stepList
    default: []

  # List of packages to publish. Each package is an object with the following properties:
  #   name: The name of the package. This is used to determine the name of the file to publish.
  #   type: The type of package. Currently supported values are 'npm' and 'nuget'.
  #   file: The path to the file to publish. This is relative to the packages directory in the build artifacts directory.
  - name: Packages
    type: object
    default: []

  # Indicates the build matrix to use for post-build autorest validation
  - name: TestMatrix
    type: object
    default: {}

  # Indicates the build matrix to use for post-build autorest validation
  - name: PublishDependsOnTest
    type: boolean
    default: false

  # Location of emitter package path
  - name: PackagePath
    type: string

  # Pass through for 1es-redirect.yml
  - name: Use1ESOfficial
    type: boolean
    default: true
  - name: BinSkimSettings
    type: object
    default: {}

extends:
  template: /eng/common/pipelines/templates/1es-redirect.yml

  parameters:
    Use1ESOfficial: ${{ parameters.Use1ESOfficial }}
    BinSkimSettings: ${{ parameters.BinSkimSettings }}
    stages:
      # Build stage
      # Responsible for building the autorest generator and typespec emitter packages
      # Produces the artifact `build_artifacts` which contains the following:
      #   emitter-package.json: Will be used to generate the emitter-package-lock.json file and placed in the `/eng` folder
      #                         of the sdk repository.
      #   overrides.json: Contains npm package version overrides for the emitter and generator
      #   packages/: Contains the packages to publish
      - stage: Build
        variables:
          selfRepositoryPath: $(Build.SourcesDirectory)
        pool:
          name: $(LINUXPOOL)
          image: $(LINUXVMIMAGE)
          os: linux
        jobs:
          - job: Build
            steps:
              - ${{ if notIn(parameters.Publish, 'none', 'internal', 'public') }}:
                  - script: |
                      echo "Publish parameter has unsupported type: '${{ parameters.Publish }}'"
                      echo "Supported types are 'none', 'internal', 'public'"
                      exit 1
              # Validate parameters and fail early if invalid
              - ${{ each package in parameters.Packages }}:
                  - ${{ if notIn(package.type, 'npm', 'nuget') }}:
                      - script: |
                          echo "Package ${{ package.name }} has unsupported type: ${{ package.type }}"
                          exit 1
                        displayName: "Unsupported package type"
                        condition: always()

              - checkout: self

              - ${{ parameters.AdditionalInitializeSteps }}

              - task: PowerShell@2
                displayName: "Run initialize script"
                inputs:
                  pwsh: true
                  filePath: $(selfRepositoryPath)${{ parameters.PackagePath }}/eng/scripts/Initialize-Repository.ps1
                  arguments: -UseTypeSpecNext:$${{ parameters.UseTypeSpecNext }}
                  workingDirectory: $(selfRepositoryPath)

              - task: PowerShell@2
                displayName: "Run build script"
                name: ci_build
                inputs:
                  pwsh: true
                  filePath: $(selfRepositoryPath)${{ parameters.PackagePath }}/eng/scripts/Build-Packages.ps1
                  arguments: >
                    -BuildNumber "$(Build.BuildNumber)"
                    -Output "$(Build.ArtifactStagingDirectory)"
                    -PublishType:"${{ parameters.Publish }}"
                    -Prerelease:$${{ parameters.BuildPrereleaseVersion }}
                  workingDirectory: $(selfRepositoryPath)

            templateContext:
              outputs:
                - output: pipelineArtifact
                  path: $(Build.ArtifactStagingDirectory)
                  artifact: build_artifacts

      # Publish stage
      # Responsible for publishing the packages in `build_artifacts/packages` and producing `emitter-package-lock.json`
      # Produces the artifact `publish_artifacts` which contains the following:
      #   emitter-package-lock.json: Created by calling `npm install` using `build_artifacts/emitter-package.json` and will
      #                              be placed in the `/eng` folder of the sdk repository.
      - ${{ if ne(parameters.Publish, 'none') }}:
          - stage: Publish
            dependsOn:
              - Build
              - ${{ if and(parameters.PublishDependsOnTest, ne(length(parameters.TestMatrix), 0)) }}:
                  - Test
            variables:
              toolsRepositoryPath: $(Build.SourcesDirectory)
              buildArtifactsPath: $(Pipeline.Workspace)/build_artifacts
            pool:
              name: $(LINUXPOOL)
              image: $(LINUXVMIMAGE)
              os: linux
            jobs:
              - job: Publish
                steps:
                  - checkout: self

                  - download: current
                    artifact: build_artifacts
                    displayName: Download build artifacts

                  # Create authenticated .npmrc file for publishing
                  - ${{ if eq(parameters.Publish, 'internal') }}:
                      - template: /eng/emitters/pipelines/templates/steps/create-authenticated-npmrc.yml
                        parameters:
                          npmrcPath: $(buildArtifactsPath)/packages/.npmrc
                          registryUrl: https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-js-test-autorest/npm/registry/
                  - ${{ else }}:
                      - pwsh: |
                          "//registry.npmjs.org/:_authToken=$(azure-sdk-npm-token)" | Out-File '.npmrc'
                        displayName: Authenticate .npmrc for npmjs.org
                        workingDirectory: $(buildArtifactsPath)/packages

                  # per package, publishing using appropriate tool
                  - ${{ each package in parameters.Packages }}:
                      - ${{ if eq(package.type, 'npm') }}:
                          - pwsh: |
                              $file = Resolve-Path "${{ package.file }}"
                              Write-Host "npm publish $file --verbose --access public --prefix $(buildArtifactsPath)/packages"
                              npm publish $file --verbose --access public --prefix $(buildArtifactsPath)/packages
                            displayName: Publish ${{ package.name }}
                            workingDirectory: $(buildArtifactsPath)/packages

                templateContext:
                  outputs:
                    - output: pipelineArtifact
                      path: $(Build.ArtifactStagingDirectory)
                      artifact: publish_artifacts

      # Test stage
      # Responsible for running unit and functional tests using a matrix passed in as the parameter `TestMatrix`.
      # Will only run if the parameter `TestMatrix` is not empty.
      # The contents of the artifact `build_artifacts` are available under the path `$(buildArtifactsPath)`.
      - ${{ if ne(length(parameters.TestMatrix), 0) }}:
          - stage: Test
            dependsOn: Build
            variables:
              selfRepositoryPath: $(Build.SourcesDirectory)
            pool:
              name: $(LINUXPOOL)
              image: $(LINUXVMIMAGE)
              os: linux
            jobs:
              - job: Test
                strategy:
                  matrix: ${{ parameters.TestMatrix }}
                variables:
                  buildArtifactsPath: $(Pipeline.Workspace)/build_artifacts
                steps:
                  - checkout: self

                  - download: current
                    artifact: build_artifacts
                    displayName: Download build artifacts

                  - ${{ parameters.AdditionalInitializeSteps }}

                  - task: PowerShell@2
                    displayName: "Run initialize script"
                    inputs:
                      pwsh: true
                      filePath: $(selfRepositoryPath)${{ parameters.PackagePath }}/eng/scripts/Initialize-Repository.ps1
                      arguments: -BuildArtifactsPath '$(buildArtifactsPath)'
                      workingDirectory: $(selfRepositoryPath)

                  - task: PowerShell@2
                    displayName: "Run test script"
                    inputs:
                      pwsh: true
                      filePath: $(selfRepositoryPath)${{ parameters.PackagePath }}/eng/scripts/Test-Packages.ps1
                      arguments: $(TestArguments)
                      workingDirectory: $(selfRepositoryPath)

                templateContext:
                  outputs:
                    - output: pipelineArtifact
                      path: $(Build.ArtifactStagingDirectory)
                      artifact: test_artifacts_$(System.JobName)
