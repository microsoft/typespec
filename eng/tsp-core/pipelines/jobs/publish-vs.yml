jobs:
  - job: sign_vs
    displayName: Sign
    pool:
      name: $(LINUXPOOL)
      image: $(LINUXVMIMAGE)
      os: linux

    steps:
      - checkout: self

      - download: current
        artifact: vs-extension-unsigned
        displayName: Download VS extension(.vsix) from pipeline artifacts

      - template: /eng/tsp-core/pipelines/templates/sign-vsix.yml
        parameters:
          path: $(Pipeline.Workspace)/vs-extension-unsigned
          pattern: "*.vsix"

    templateContext:
      outputs:
        - output: pipelineArtifact
          path: $(Pipeline.Workspace)/vs-extension-unsigned
          artifact: vs-extension-signed
          displayName: Publish signed VS extension

  - job: publish_vs
    displayName: Publish
    dependsOn: sign_vs
    pool:
      name: $(WINDOWSPOOL)
      image: $(WINDOWSVMIMAGE)
      os: windows

    steps:
      - checkout: self

      - download: current
        artifact: vs-extension-signed
        displayName: Download VS extension(.vsix) from pipeline artifacts

      - task: AzureCLI@2
        displayName: Publish
        inputs:
          azureSubscription: azure-sdk-vsmarketplace
          scriptType: pscore
          scriptLocation: inlineScript
          workingDirectory: packages/typespec-vs
          inlineScript: |
            # 499b84ac-1321-427f-aa17-267ca6975798 is ADO resource id.
            $aadToken = az account get-access-token --query accessToken --resource 499b84ac-1321-427f-aa17-267ca6975798 -o tsv
            Install-Module VSSetup -Force
            $vsixPublisher = Join-Path -Path (Get-VSSetupInstance -All | Select-VSSetupInstance -Latest).installationPath -ChildPath "VSSDK\VisualStudioIntegration\Tools\Bin\VsixPublisher.exe" -Resolve
            $vsixPath = Resolve-Path "$(Pipeline.Workspace)/vs-extension-signed/Microsoft.Typespec.VS.vsix"  
            echo "Path to vsix: $vsixPath"
            $stdout = (& $vsixPublisher publish -payload $vsixPath -publishManifest "publishManifest.json" -personalAccessToken $aadToken -ignoreWarnings "VSIXValidatorWarning01,VSIXValidatorWarning02,VSIXValidatorWarning08"  2>&1)
            Write-Output $stdout
            if ($LASTEXITCODE -eq 0) {
              Write-Output "Successfully published VSIX"
            } elseif ($stdout -match "^VSSDK: error VsixPub0029 :") {
              Write-Output "Version already exists, skipping publish"
              exit 0
            } else {
              exit 1
            }
