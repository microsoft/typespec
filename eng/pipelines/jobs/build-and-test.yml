parameters:
  - name: nodeVersion
    type: string
  - name: os
    type: string

steps:
  - template: /eng/pipelines/templates/install.yml
    parameters:
      nodeVersion: ${{ parameters.nodeVersion }}

  # Only running UI test on linux
  - ${{ if ne(variables['Agent.OS'], 'Windows_NT') }}:
      - template: /eng/pipelines/templates/install-browsers.yml

  - script: pnpm run check-version-mismatch
    displayName: Check version mismatch

  - template: /eng/pipelines/templates/build.yml

  - script: pnpm run test-official
    displayName: Test

  - template: /eng/pipelines/templates/upload-coverage.yml

  - script: pnpm run check-format
    displayName: Check Formatting
    condition: ne(variables['Agent.OS'], 'Windows_NT')

  - script: pnpm run lint
    displayName: Lint
    condition: ne(variables['Agent.OS'], 'Windows_NT')

  - script: node eng/scripts/check-for-changed-files.js
    displayName: Check Git Status For Changed Files

  - script: node eng/scripts/check-docs.js
    displayName: Check docs
    condition: ne(variables['Agent.OS'], 'Windows_NT')

  - script: pnpm run cspell
    displayName: Spell check
    condition: ne(variables['Agent.OS'], 'Windows_NT')

  - script: pnpm run test:e2e
    displayName: E2E Tests

  # Unlink node_modules folders to significantly improve performance of subsequent tasks
  # which need to walk the directory tree (and are hardcoded to follow symlinks).
  - script: pnpm run purge
    displayName: "Purge dependencies"
    condition: always()

  # It's important for performance to pass "packages" as "searchFolder" to avoid looking under root "node_modules".
  # PublishTestResults.searchFolder only supports absolute paths, not relative.
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: "JUnit"
      searchFolder: "$(System.DefaultWorkingDirectory)/packages"
      testResultsFiles: "*/test-results.xml"
      mergeTestResults: true
      failTaskOnFailedTests: true
      testRunTitle: "Test os: ${{ parameters.os }}, node: ${{ parameters.nodeVersion }}"
    displayName: Publish test results
    condition: always()

  - task: 1ES.PublishPipelineArtifact@1
    inputs:
      path: ./packages/playground-website/test-results
      artifact: "uitestresults-${{ parameters.os }}-node-${{ parameters.nodeVersion }}"
    displayName: Publish UI tests artifacts
    condition: ne(variables['Agent.OS'], 'Windows_NT')
